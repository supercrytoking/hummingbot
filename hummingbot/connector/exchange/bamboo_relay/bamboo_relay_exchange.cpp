/* Generated by Cython 3.0a7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange",
        "sources": [
            "hummingbot\\connector\\exchange\\bamboo_relay\\bamboo_relay_exchange.pyx"
        ]
    },
    "module_name": "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a7"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A7
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__connector__exchange__bamboo_relay__bamboo_relay_exchange
#define __PYX_HAVE_API__hummingbot__connector__exchange__bamboo_relay__bamboo_relay_exchange
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "hummingbot\\\\connector\\\\exchange\\\\bamboo_relay\\\\bamboo_relay_exchange.pyx",
  "stringsource",
  "__init__.cython-30.pxd",
  "hummingbot\\\\core\\\\pubsub.pxd",
  "hummingbot\\\\core\\\\event\\\\event_listener.pxd",
  "hummingbot\\\\core\\\\event\\\\event_reporter.pxd",
  "hummingbot\\\\core\\\\event\\\\event_logger.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book_query_result.pxd",
  "type.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book.pxd",
  "hummingbot\\\\core\\\\clock.pxd",
  "hummingbot\\\\core\\\\time_iterator.pxd",
  "hummingbot\\\\core\\\\network_iterator.pxd",
  "hummingbot\\\\connector\\\\connector_base.pxd",
  "hummingbot\\\\connector\\\\in_flight_order_base.pxd",
  "hummingbot\\\\connector\\\\exchange\\\\bamboo_relay\\\\bamboo_relay_in_flight_order.pxd",
  "hummingbot\\\\connector\\\\trading_rule.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder;
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount;

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1490
 *             )
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1520
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1790
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};

/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tx_time_limits;
};


/* "hummingbot/connector/in_flight_order_base.pxd":1
 * cdef class InFlightOrderBase:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public str client_order_id
 */
struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase {
  PyObject_HEAD
  PyObject *client_order_id;
  PyObject *exchange_order_id;
  PyObject *trading_pair;
  PyObject *order_type;
  PyObject *trade_type;
  PyObject *price;
  PyObject *amount;
  PyObject *executed_amount_base;
  PyObject *executed_amount_quote;
  PyObject *fee_asset;
  PyObject *fee_paid;
  PyObject *last_state;
  PyObject *exchange_order_id_update_event;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_in_flight_order.pxd":3
 * from hummingbot.connector.in_flight_order_base cimport InFlightOrderBase
 * 
 * cdef class BambooRelayInFlightOrder(InFlightOrderBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public bint is_coordinated
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder {
  struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase __pyx_base;
  int is_coordinated;
  int has_been_cancelled;
  int expires;
  PyObject *available_amount_base;
  PyObject *protocol_fee_amount;
  PyObject *taker_fee_amount;
  PyObject *tx_hash;
  PyObject *recorded_fills;
  PyObject *zero_ex_order;
};


/* "hummingbot/connector/trading_rule.pxd":1
 * cdef class TradingRule:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public str trading_pair
 */
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule {
  PyObject_HEAD
  PyObject *trading_pair;
  PyObject *min_order_size;
  PyObject *max_order_size;
  PyObject *min_price_increment;
  PyObject *min_base_amount_increment;
  PyObject *min_quote_amount_increment;
  PyObject *max_price_significant_digits;
  PyObject *min_notional_size;
  PyObject *min_order_value;
  int supports_limit_orders;
  int supports_market_orders;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pxd":6
 * 
 * 
 * cdef class BambooRelayExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _wallet_spender_address
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *_wallet_spender_address;
  PyObject *_wallet;
  int _chain_id;
  PyObject *_provider;
  PyObject *_weth_token;
  PyObject *_ev_loop;
  PyObject *_poll_notifier;
  double _last_timestamp;
  double _last_failed_limit_order_timestamp;
  double _last_update_limit_order_timestamp;
  double _last_update_market_order_timestamp;
  double _last_update_trading_rules_timestamp;
  double _last_update_available_balance_timestamp;
  double _poll_interval;
  PyObject *_in_flight_limit_orders;
  PyObject *_in_flight_market_orders;
  PyObject *_in_flight_pending_limit_orders;
  PyObject *_in_flight_cancels;
  PyObject *_in_flight_pending_cancels;
  PyObject *_filled_order_hashes;
  PyObject *_order_expiry_queue;
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *_tx_tracker;
  PyObject *_w3;
  PyObject *_exchange;
  PyObject *_coordinator;
  int _use_coordinator;
  int _pre_emptive_soft_cancels;
  PyObject *_trading_rules;
  PyObject *_pending_approval_tx_hashes;
  PyObject *_status_polling_task;
  PyObject *_user_stream_event_listener_task;
  PyObject *_approval_tx_polling_task;
  int64_t _latest_salt;
  PyObject *_api_endpoint;
  PyObject *_api_prefix;
  PyObject *_exchange_address;
  PyObject *_coordinator_address;
  PyObject *_fee_recipient_address;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":104
 * s_decimal_NaN = Decimal("NaN")
 * 
 * cdef class BambooRelayTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         BambooRelayExchange _owner
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker {
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *_owner;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":358
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 *     async def get_active_exchange_markets(self):             # <<<<<<<<<<<<<<
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":361
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":484
 *             self._last_update_available_balance_timestamp = current_timestamp
 * 
 *     async def list_market(self) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_url;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":488
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules {
  PyObject_HEAD
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_markets;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_trading_rule;
  PyObject *__pyx_v_trading_rules_list;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":517
 *         return retval
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":522
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders {
  PyObject_HEAD
  PyObject *__pyx_v_order_hashes;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":528
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates {
  PyObject_HEAD
  PyObject *__pyx_v_account_order;
  PyObject *__pyx_v_account_orders_list;
  PyObject *__pyx_v_account_orders_map;
  PyObject *__pyx_v_hash;
  PyObject *__pyx_v_hash_index;
  PyObject *__pyx_v_hashes;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_order_hash;
  PyObject *__pyx_v_order_updates;
  PyObject *__pyx_v_orders;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_tracked_limit_order;
  PyObject *__pyx_v_tracked_limit_orders;
  PyObject *__pyx_v_tracked_order;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":655
 *                 return
 * 
 *     async def _update_limit_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status {
  PyObject_HEAD
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_fill;
  PyObject *__pyx_v_fill_base_token_amount;
  PyObject *__pyx_v_order_filled_base_token_amount;
  PyObject *__pyx_v_order_filled_quote_token_amount;
  PyObject *__pyx_v_order_remaining_base_token_amount;
  PyObject *__pyx_v_order_state;
  int __pyx_v_order_timestamp_diff;
  PyObject *__pyx_v_order_update;
  PyObject *__pyx_v_order_updates;
  PyObject *__pyx_v_previous_amount_available;
  PyObject *__pyx_v_previous_is_cancelled;
  PyObject *__pyx_v_previous_is_done;
  PyObject *__pyx_v_previous_is_expired;
  PyObject *__pyx_v_previous_is_failure;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_tracked_limit_order;
  PyObject *__pyx_v_tracked_limit_orders;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":837
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 *     async def _update_market_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status {
  PyObject_HEAD
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_err_msg;
  double __pyx_v_gas_used;
  PyObject *__pyx_v_receipt;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_tracked_market_order;
  PyObject *__pyx_v_tracked_market_orders;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":920
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 *     async def _approval_tx_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop {
  PyObject_HEAD
  PyObject *__pyx_v_receipt;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_tx_hash;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request {
  PyObject_HEAD
  PyObject *__pyx_v_client;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_headers;
  PyObject *__pyx_v_http_method;
  PyObject *__pyx_v_response;
  PyObject *__pyx_v_response_json;
  PyObject *__pyx_v_response_text;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_url;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
  PyObject *__pyx_t_10;
  PyObject *__pyx_t_11;
  PyObject *__pyx_t_12;
  PyObject *__pyx_t_13;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1043
 *         return found_orders
 * 
 *     async def submit_market_order(self,             # <<<<<<<<<<<<<<
 *                                   trading_pair: str,
 *                                   trade_type: TradeType,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_apiOrder;
  PyObject *__pyx_v_base_asset_decimals;
  PyObject *__pyx_v_base_asset_increment;
  PyObject *__pyx_v_calculated_price;
  PyObject *__pyx_v_is_coordinated;
  PyObject *__pyx_v_max_base_amount_with_decimals;
  PyObject *__pyx_v_order;
  PyObject *__pyx_v_order_price;
  PyObject *__pyx_v_orders;
  PyObject *__pyx_v_price;
  PyObject *__pyx_v_protocol_fee;
  PyObject *__pyx_v_quote_asset_decimals;
  PyObject *__pyx_v_quote_asset_increment;
  PyObject *__pyx_v_remaining_base_token_amount;
  PyObject *__pyx_v_remaining_quote_token_amount;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_signature;
  PyObject *__pyx_v_signatures;
  PyObject *__pyx_v_signed_market_order;
  PyObject *__pyx_v_taker_asset_fill_amount;
  PyObject *__pyx_v_taker_asset_fill_amounts;
  PyObject *__pyx_v_total_base_token_amount;
  PyObject *__pyx_v_total_quote_token_amount;
  PyObject *__pyx_v_trade_type;
  PyObject *__pyx_v_trading_pair;
  PyObject *__pyx_v_trading_pair_rules;
  PyObject *__pyx_v_tx_hash;
  PyObject *__pyx_v_valid_orders;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1169
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *     async def submit_limit_order(self,             # <<<<<<<<<<<<<<
 *                                  trading_pair: str,
 *                                  trade_type: TradeType,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_base_amount_with_decimals;
  PyObject *__pyx_v_base_asset_decimals;
  PyObject *__pyx_v_base_asset_increment;
  PyObject *__pyx_v_base_token_asset_data;
  PyObject *__pyx_v_ex;
  PyObject *__pyx_v_expires;
  PyObject *__pyx_v_is_coordinated;
  PyObject *__pyx_v_latest_salt;
  PyObject *__pyx_v_maker_asset_amount;
  PyObject *__pyx_v_maker_asset_data;
  PyObject *__pyx_v_null_address;
  PyObject *__pyx_v_order_hash;
  PyObject *__pyx_v_order_hash_hex;
  PyObject *__pyx_v_pair_split;
  PyObject *__pyx_v_price;
  PyObject *__pyx_v_quote_amount;
  PyObject *__pyx_v_quote_amount_with_decimals;
  PyObject *__pyx_v_quote_asset_decimals;
  PyObject *__pyx_v_quote_asset_increment;
  PyObject *__pyx_v_quote_token_asset_data;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_signature;
  PyObject *__pyx_v_signed_limit_order;
  PyObject *__pyx_v_taker_asset_amount;
  PyObject *__pyx_v_taker_asset_data;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_trade_type;
  PyObject *__pyx_v_trading_pair;
  PyObject *__pyx_v_trading_pair_rules;
  PyObject *__pyx_v_unsigned_limit_order;
  PyObject *__pyx_v_zero_ex_order;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1287
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int order_timestamp_diff
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all {
  PyObject_HEAD
  double __pyx_v_current_timestamp;
  int __pyx_v_has_coordinated_order;
  PyObject *__pyx_v_in_flight_limit_orders;
  PyObject *__pyx_v_incomplete_order_ids;
  PyObject *__pyx_v_incomplete_orders;
  PyObject *__pyx_8genexpr5__pyx_v_o;
  PyObject *__pyx_8genexpr6__pyx_v_oid;
  PyObject *__pyx_8genexpr7__pyx_v_oid;
  PyObject *__pyx_8genexpr8__pyx_v_oid;
  PyObject *__pyx_8genexpr9__pyx_v_oid;
  PyObject *__pyx_v_order;
  PyObject *__pyx_v_order_ids;
  int __pyx_v_order_timestamp_diff;
  PyObject *__pyx_v_orders;
  PyObject *__pyx_v_receipt;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_soft_cancel_result;
  double __pyx_v_timeout_seconds;
  PyObject *__pyx_v_tx_hash;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
  PyObject *__pyx_t_10;
  PyObject *__pyx_t_11;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1382
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 * 
 *     async def execute_trade(self,             # <<<<<<<<<<<<<<
 *                             order_id: str,
 *                             order_type: OrderType,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_amount_to_fill;
  PyObject *__pyx_v_avg_price;
  PyObject *__pyx_v_exchange_order_id;
  PyObject *__pyx_v_expires;
  PyObject *__pyx_v_is_coordinated;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_price;
  PyObject *__pyx_v_protocol_fee;
  PyObject *__pyx_v_q_amt;
  PyObject *__pyx_v_q_price;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_trade_type;
  PyObject *__pyx_v_trade_type_desc;
  PyObject *__pyx_v_trading_pair;
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule;
  PyObject *__pyx_v_tx_hash;
  PyObject *__pyx_v_type_str;
  PyObject *__pyx_v_zero_ex_order;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1550
 *         return order_id
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order {
  PyObject_HEAD
  PyObject *__pyx_v_client_order_id;
  double __pyx_v_current_timestamp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_order;
  int __pyx_v_order_timestamp_diff;
  PyObject *__pyx_v_receipt;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_tx_hash;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1629
 *             return None
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders {
  PyObject_HEAD
  PyObject *__pyx_v_response_data;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_url;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1648
 *         return order_books[trading_pair]
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_v_tx_hashes;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1669
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1672
 *         self._stop_network()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};



/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_start_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *, float);
  PyObject *(*c_stop_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  int (*c_is_tx_tracked)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_did_timeout_tx)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_process_tx_timeouts)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":117
 * 
 * 
 * cdef class BambooRelayExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange {
  struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_expire_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, int);
  PyObject *(*c_check_and_remove_expired_orders)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *);
  PyObject *(*c_get_orders_for_amount_price)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;


/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":104
 * s_decimal_NaN = Decimal("NaN")
 * 
 * cdef class BambooRelayTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         BambooRelayExchange _owner
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseMappingExpected.proto */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Coroutine.proto */
#define __Pyx_Coroutine_USED
static PyTypeObject *__pyx_CoroutineType = 0;
static PyTypeObject *__pyx_CoroutineAwaitType = 0;
#define __Pyx_Coroutine_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_CoroutineType)
#define __Pyx_Coroutine_Check(obj) __Pyx_Coroutine_CheckExact(obj)
#define __Pyx_CoroutineAwait_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_CoroutineAwaitType)
#define __Pyx_Coroutine_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_CoroutineType, body, code, closure, name, qualname, module_name)
static int __pyx_Coroutine_init(void);
static PyObject *__Pyx__Coroutine_await(PyObject *coroutine);
typedef struct {
    PyObject_HEAD
    PyObject *coroutine;
} __pyx_CoroutineAwaitObject;
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg);
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args);

/* GetAwaitIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o);
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *o);

/* CoroutineYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* ReturnWithStopIteration.proto */
#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* py_dict_clear.proto */
#define __Pyx_PyDict_Clear(d) (PyDict_Clear(d), 0)

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ReRaiseException.proto */
static CYTHON_INLINE void __Pyx_ReraiseException(void);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyType_Ready.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t);
#else
#define __Pyx_PyType_Ready(t) PyType_Ready(t)
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* PatchAsyncIO.proto */
static PyObject* __Pyx_patch_asyncio(PyObject* module);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_trade_type, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_orders_for_amount_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell *__pyx_optional_args); /* proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, int __pyx_v_is_coordinated, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount, int __pyx_v_expires, PyObject *__pyx_v_zero_ex_order); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_market_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, int __pyx_v_is_coordinated, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount, PyObject *__pyx_v_tx_hash, PyObject *__pyx_v_protocol_fee_amount); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_expire_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, int __pyx_v_seconds); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_check_and_remove_expired_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount *__pyx_optional_args); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.PyRef" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.pubsub" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_listener" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_reporter" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_logger" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;
#endif

/* Module declarations from "libcpp.set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.OrderBookEntry" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.order_book_query_result" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.order_book" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;
#endif

/* Module declarations from "hummingbot.core.clock" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;
#endif

/* Module declarations from "hummingbot.core.time_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;
#endif

/* Module declarations from "hummingbot.core.network_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;
#endif

/* Module declarations from "hummingbot.connector.connector_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.transaction_tracker" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = 0;
#endif

/* Module declarations from "hummingbot.connector.in_flight_order_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder = 0;
#endif

/* Module declarations from "hummingbot.connector.trading_rule" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = 0;
#endif
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange"
extern int __pyx_module_is_main_hummingbot__connector__exchange__bamboo_relay__bamboo_relay_exchange;
int __pyx_module_is_main_hummingbot__connector__exchange__bamboo_relay__bamboo_relay_exchange = 0;

/* Implementation of "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_0[] = "0";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_0x[] = "0x";
static const char __pyx_k_1e[] = "1e-";
static const char __pyx_k__5[] = "-";
static const char __pyx_k_ex[] = "ex";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_ETH[] = "ETH";
static const char __pyx_k_GET[] = "GET";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k__13[] = "";
static const char __pyx_k__15[] = ".";
static const char __pyx_k__20[] = " - ";
static const char __pyx_k__26[] = " ";
static const char __pyx_k__41[] = "'.";
static const char __pyx_k__52[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_buy[] = "buy-";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_eth[] = "eth";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_oid[] = "oid";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_1e_2[] = "1e";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_Web3[] = "Web3";
static const char __pyx_k__125[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fill[] = "fill";
static const char __pyx_k_hash[] = "hash";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_post[] = "post";
static const char __pyx_k_salt[] = "salt";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sell[] = "sell-";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_web3[] = "web3";
static const char __pyx_k_Event[] = "Event";
static const char __pyx_k_KOVAN[] = "KOVAN";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_Order[] = "Order";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_aexit[] = "__aexit__";
static const char __pyx_k_await[] = "__await__";
static const char __pyx_k_buy_2[] = "buy";
static const char __pyx_k_chain[] = "chain";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_fills[] = "fills";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_log10[] = "log10";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_q_amt[] = "q_amt";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_toHex[] = "toHex";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_FILLED[] = "FILLED";
static const char __pyx_k_Filled[] = "Filled ";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_aenter[] = "__aenter__";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_cancel[] = "cancel";
static const char __pyx_k_client[] = "client";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_hashes[] = "hashes";
static const char __pyx_k_hexstr[] = "hexstr";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_is_nan[] = "is_nan";
static const char __pyx_k_is_set[] = "is_set";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_orders[] = "/orders";
static const char __pyx_k_out_of[] = " out of ";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_retval[] = "retval";
static const char __pyx_k_sell_2[] = "sell";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_tokens[] = "/tokens";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_wallet[] = "wallet";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_RINKEBY[] = "RINKEBY";
static const char __pyx_k_ROPSTEN[] = "ROPSTEN";
static const char __pyx_k_address[] = "address";
static const char __pyx_k_aiohttp[] = "aiohttp";
static const char __pyx_k_asyncio[] = "asyncio";
static const char __pyx_k_balance[] = "balance";
static const char __pyx_k_chainId[] = "chainId";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_err_msg[] = "err_msg";
static const char __pyx_k_expires[] = "expires";
static const char __pyx_k_gasUsed[] = "gasUsed";
static const char __pyx_k_get_fee[] = "get_fee";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_is_done[] = "is_done";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_main_0x[] = "main/0x";
static const char __pyx_k_markets[] = "markets";
static const char __pyx_k_network[] = "network";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_q_price[] = "q_price";
static const char __pyx_k_receipt[] = "receipt";
static const char __pyx_k_request[] = "request";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_spender[] = "spender";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_to_json[] = "to_json";
static const char __pyx_k_tx_hash[] = "tx_hash";
static const char __pyx_k_CANCELED[] = "CANCELED";
static const char __pyx_k_List_str[] = "List[str]";
static const char __pyx_k_MAIN_NET[] = "MAIN_NET";
static const char __pyx_k_Optional[] = "Optional";
static const char __pyx_k_Skipping[] = ". Skipping.";
static const char __pyx_k_TradeFee[] = "TradeFee";
static const char __pyx_k_accounts[] = "/accounts/";
static const char __pyx_k_apiOrder[] = "apiOrder";
static const char __pyx_k_chain_id[] = "chain_id";
static const char __pyx_k_currency[] = "currency";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_gas_used[] = "gas_used";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_kovan_0x[] = "kovan/0x";
static const char __pyx_k_makerFee[] = "makerFee";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_orders_2[] = "orders";
static const char __pyx_k_response[] = "response";
static const char __pyx_k_rounding[] = "rounding";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_takerFee[] = "takerFee";
static const char __pyx_k_tokens_2[] = "tokens";
static const char __pyx_k_type_str[] = "type_str";
static const char __pyx_k_wrap_eth[] = "wrap_eth";
static const char __pyx_k_COMPLETED[] = "COMPLETED";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_OrderBook[] = "OrderBook";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_and_price[] = " and price ";
static const char __pyx_k_avg_price[] = "avg_price";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_eth_utils[] = "eth_utils";
static const char __pyx_k_from_json[] = "from_json";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_get_price[] = "get_price";
static const char __pyx_k_is_finite[] = "is_finite";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_orderHash[] = "orderHash";
static const char __pyx_k_order_ids[] = "order_ids";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_sign_hash[] = "sign_hash";
static const char __pyx_k_signature[] = "signature";
static const char __pyx_k_tx_hashes[] = "tx_hashes";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_User_Agent[] = "User-Agent";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_Web3Wallet[] = "Web3Wallet";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_brm_logger[] = "brm_logger";
static const char __pyx_k_cancel_all[] = "cancel_all";
static const char __pyx_k_capitalize[] = "capitalize";
static const char __pyx_k_fill_event[] = "fill_event";
static const char __pyx_k_fill_order[] = "fill_order";
static const char __pyx_k_get_orders[] = "get_orders";
static const char __pyx_k_hash_index[] = "hash_index";
static const char __pyx_k_hummingbot[] = "hummingbot";
static const char __pyx_k_is_expired[] = "is_expired";
static const char __pyx_k_is_failure[] = "is_failure";
static const char __pyx_k_order_hash[] = "order_hash";
static const char __pyx_k_order_side[] = "order_side";
static const char __pyx_k_order_type[] = "order_type";
static const char __pyx_k_pair_split[] = "pair_split";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_rinkeby_0x[] = "rinkeby/0x";
static const char __pyx_k_ropsten_0x[] = "ropsten/0x";
static const char __pyx_k_signatures[] = "signatures";
static const char __pyx_k_testrpc_0x[] = "testrpc/0x";
static const char __pyx_k_trade_type[] = "trade_type";
static const char __pyx_k_unwrap_eth[] = "unwrap_eth";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MarketEvent[] = "MarketEvent";
static const char __pyx_k_OrderFilled[] = "OrderFilled";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_ROUND_FLOOR[] = "ROUND_FLOOR";
static const char __pyx_k_ZEROEX_TEST[] = "ZEROEX_TEST";
static const char __pyx_k_ZeroExOrder[] = "ZeroExOrder";
static const char __pyx_k_active_asks[] = "active_asks";
static const char __pyx_k_active_bids[] = "active_bids";
static const char __pyx_k_api_request[] = "_api_request";
static const char __pyx_k_blockNumber[] = "blockNumber";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_http_method[] = "http_method";
static const char __pyx_k_latest_salt[] = "latest_salt";
static const char __pyx_k_list_market[] = "list_market";
static const char __pyx_k_order_books[] = "order_books";
static const char __pyx_k_order_price[] = "order_price";
static const char __pyx_k_order_state[] = "order_state";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_reset_state[] = "reset_state";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_safe_gather[] = "safe_gather";
static const char __pyx_k_status_dict[] = "status_dict";
static const char __pyx_k_zeroExOrder[] = "zeroExOrder";
static const char __pyx_k_Dict_str_Any[] = "Dict[str, Any]";
static const char __pyx_k_Dict_str_any[] = "Dict[str, any]";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_HTTPProvider[] = "HTTPProvider";
static const char __pyx_k_OrderExpired[] = "OrderExpired";
static const char __pyx_k_OrderFailure[] = "OrderFailure";
static const char __pyx_k_bamboo_relay[] = "bamboo_relay";
static const char __pyx_k_cancel_order[] = "cancel_order";
static const char __pyx_k_erc20_tokens[] = "erc20_tokens";
static const char __pyx_k_estimate_fee[] = "estimate_fee";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_cancelled[] = "is_cancelled";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_limit_orders[] = "limit_orders";
static const char __pyx_k_makerAddress[] = "makerAddress";
static const char __pyx_k_maxOrderSize[] = "maxOrderSize";
static const char __pyx_k_minOrderSize[] = "minOrderSize";
static const char __pyx_k_null_address[] = "null_address";
static const char __pyx_k_order_amount[] = " order amount ";
static const char __pyx_k_order_hashes[] = "order_hashes";
static const char __pyx_k_order_struct[] = "order_struct";
static const char __pyx_k_order_update[] = "order_update";
static const char __pyx_k_protocol_fee[] = "protocol_fee";
static const char __pyx_k_quote_amount[] = "quote_amount";
static const char __pyx_k_saved_states[] = "saved_states";
static const char __pyx_k_stop_network[] = "_stop_network";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_takerAddress[] = "takerAddress";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_trading_rule[] = "trading_rule";
static const char __pyx_k_valid_orders[] = "valid_orders";
static const char __pyx_k_ClientSession[] = "ClientSession";
static const char __pyx_k_EthereumChain[] = "EthereumChain";
static const char __pyx_k_NOT_CONNECTED[] = "NOT_CONNECTED";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_ReceivedAsset[] = "ReceivedAsset";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_account_order[] = "account_order";
static const char __pyx_k_async_timeout[] = "async_timeout";
static const char __pyx_k_asyncio_tasks[] = "asyncio.tasks";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_check_network[] = "check_network";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_execute_trade[] = "execute_trade";
static const char __pyx_k_expiration_ts[] = "expiration_ts";
static const char __pyx_k_fix_signature[] = "fix_signature";
static const char __pyx_k_isCoordinated[] = "isCoordinated";
static const char __pyx_k_market_orders[] = "market_orders";
static const char __pyx_k_order_updates[] = "order_updates";
static const char __pyx_k_orders_hashes[] = "/orders/hashes";
static const char __pyx_k_poll_interval[] = "poll_interval";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_response_data[] = "response_data";
static const char __pyx_k_response_json[] = "response_json";
static const char __pyx_k_response_text[] = "response_text";
static const char __pyx_k_s_decimal_NaN[] = "s_decimal_NaN";
static const char __pyx_k_senderAddress[] = "senderAddress";
static const char __pyx_k_start_network[] = "start_network";
static const char __pyx_k_tracked_order[] = "tracked_order";
static const char __pyx_k_trading_pairs[] = "trading_pairs";
static const char __pyx_k_trading_rules[] = "trading_rules";
static const char __pyx_k_zero_ex_order[] = "zero_ex_order";
static const char __pyx_k_CancelledError[] = "CancelledError";
static const char __pyx_k_HTTP_status_is[] = ". HTTP status is ";
static const char __pyx_k_OrderCancelled[] = "OrderCancelled";
static const char __pyx_k_ZeroExExchange[] = "ZeroExExchange";
static const char __pyx_k_amount_to_fill[] = "amount_to_fill";
static const char __pyx_k_get_event_loop[] = "get_event_loop";
static const char __pyx_k_get_order_book[] = "get_order_book";
static const char __pyx_k_is_coordinated[] = "is_coordinated";
static const char __pyx_k_makerAssetData[] = "makerAssetData";
static const char __pyx_k_max_order_size[] = "max_order_size";
static const char __pyx_k_min_order_size[] = "min_order_size";
static const char __pyx_k_network_status[] = "network_status";
static const char __pyx_k_order_hash_hex[] = "order_hash_hex";
static const char __pyx_k_quoteIncrement[] = "quoteIncrement";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_stop_network_2[] = "stop_network";
static const char __pyx_k_takerAssetData[] = "takerAssetData";
static const char __pyx_k_to_limit_order[] = "to_limit_order";
static const char __pyx_k_token_approval[] = "token_approval";
static const char __pyx_k_total_balances[] = "total_balances";
static const char __pyx_k_unsigned_order[] = "unsigned_order";
static const char __pyx_k_BuyOrderCreated[] = "BuyOrderCreated";
static const char __pyx_k_The_limit_order[] = "The limit order ";
static const char __pyx_k_ZeroExFillEvent[] = "ZeroExFillEvent";
static const char __pyx_k_account_balance[] = "account_balance";
static const char __pyx_k_app_warning_msg[] = "app_warning_msg";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_current_backend[] = "current_backend";
static const char __pyx_k_exchangeAddress[] = "exchangeAddress";
static const char __pyx_k_expiration_time[] = "expiration time ";
static const char __pyx_k_fixed_signature[] = "fixed_signature";
static const char __pyx_k_locked_balances[] = "locked_balances";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_timeout_seconds[] = "timeout_seconds";
static const char __pyx_k_trade_type_desc[] = "trade_type_desc";
static const char __pyx_k_transactionHash[] = "transactionHash";
static const char __pyx_k_tx_hash_receipt[] = "tx_hash_receipt";
static const char __pyx_k_update_balances[] = "_update_balances";
static const char __pyx_k_use_coordinator[] = "use_coordinator";
static const char __pyx_k_web3_exceptions[] = "web3.exceptions";
static const char __pyx_k_API_CALL_TIMEOUT[] = "API_CALL_TIMEOUT";
static const char __pyx_k_Error_submitting[] = "Error submitting ";
static const char __pyx_k_Failed_to_submit[] = "Failed to submit ";
static const char __pyx_k_HummingbotLogger[] = "HummingbotLogger";
static const char __pyx_k_List_TradingRule[] = "List[TradingRule]";
static const char __pyx_k_OrderFilledEvent[] = "OrderFilledEvent";
static const char __pyx_k_SellOrderCreated[] = "SellOrderCreated";
static const char __pyx_k_The_limit_orders[] = "The limit orders ";
static const char __pyx_k_The_market_order[] = "The market order ";
static const char __pyx_k_c_did_timeout_tx[] = "c_did_timeout_tx";
static const char __pyx_k_calculated_price[] = "calculated_price";
static const char __pyx_k_ethereum_rpc_url[] = "ethereum_rpc_url";
static const char __pyx_k_exchange_address[] = "exchange_address";
static const char __pyx_k_for_more_details[] = " for more details.";
static const char __pyx_k_get_all_balances[] = "get_all_balances";
static const char __pyx_k_makerAssetAmount[] = "makerAssetAmount";
static const char __pyx_k_maker_asset_data[] = "maker_asset_data";
static const char __pyx_k_previous_is_done[] = "previous_is_done";
static const char __pyx_k_remove_0x_prefix[] = "remove_0x_prefix";
static const char __pyx_k_takerAssetAmount[] = "takerAssetAmount";
static const char __pyx_k_taker_asset_data[] = "taker_asset_data";
static const char __pyx_k_trading_required[] = "trading_required";
static const char __pyx_k_watch_order_hash[] = "watch_order_hash";
static const char __pyx_k_BuyOrderCompleted[] = "BuyOrderCompleted";
static const char __pyx_k_List_Dict_str_Any[] = "List[Dict[str, Any]]";
static const char __pyx_k_ORDER_EXPIRY_TIME[] = "ORDER_EXPIRY_TIME";
static const char __pyx_k_OrderExpiredEvent[] = "OrderExpiredEvent";
static const char __pyx_k_ZeroExCoordinator[] = "ZeroExCoordinator";
static const char __pyx_k_baseTokenDecimals[] = "baseTokenDecimals";
static const char __pyx_k_batch_fill_orders[] = "batch_fill_orders";
static const char __pyx_k_current_timestamp[] = "current_timestamp";
static const char __pyx_k_exchange_order_id[] = "exchange_order_id";
static const char __pyx_k_get_order_updates[] = "_get_order_updates";
static const char __pyx_k_hummingbot_logger[] = "hummingbot.logger";
static const char __pyx_k_incomplete_orders[] = "incomplete_orders";
static const char __pyx_k_makerFeeAssetData[] = "makerFeeAssetData";
static const char __pyx_k_soft_cancel_order[] = "soft_cancel_order";
static const char __pyx_k_takerFeeAssetData[] = "takerFeeAssetData";
static const char __pyx_k_toChecksumAddress[] = "toChecksumAddress";
static const char __pyx_k_to_integral_exact[] = "to_integral_exact";
static const char __pyx_k_CANCEL_EXPIRY_TIME[] = "CANCEL_EXPIRY_TIME";
static const char __pyx_k_CancellationResult[] = "CancellationResult";
static const char __pyx_k_SellOrderCompleted[] = "SellOrderCompleted";
static const char __pyx_k_account_orders_map[] = "account_orders_map";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_account_orders[] = "get_account_orders";
static const char __pyx_k_get_order_hash_hex[] = "get_order_hash_hex";
static const char __pyx_k_get_tracking_nonce[] = "get_tracking_nonce";
static const char __pyx_k_has_been_cancelled[] = "has_been_cancelled";
static const char __pyx_k_maker_asset_amount[] = "maker_asset_amount";
static const char __pyx_k_of_the_limit_order[] = " of the limit order ";
static const char __pyx_k_quoteTokenDecimals[] = "quoteTokenDecimals";
static const char __pyx_k_safe_ensure_future[] = "safe_ensure_future";
static const char __pyx_k_signed_limit_order[] = "signed_limit_order";
static const char __pyx_k_soft_cancel_result[] = "soft_cancel_result";
static const char __pyx_k_submit_limit_order[] = "submit_limit_order";
static const char __pyx_k_taker_asset_amount[] = "taker_asset_amount";
static const char __pyx_k_trading_pair_rules[] = "trading_pair_rules";
static const char __pyx_k_trading_rules_list[] = "trading_rules_list";
static const char __pyx_k_unwatch_order_hash[] = "unwatch_order_hash";
static const char __pyx_k_BambooRelayExchange[] = "BambooRelayExchange";
static const char __pyx_k_OrderCancelledEvent[] = "OrderCancelledEvent";
static const char __pyx_k_The_limit_buy_order[] = "The limit buy order ";
static const char __pyx_k_TransactionNotFound[] = "TransactionNotFound";
static const char __pyx_k_account_orders_list[] = "account_orders_list";
static const char __pyx_k_base_asset_decimals[] = "base_asset_decimals";
static const char __pyx_k_cancel_orders_up_to[] = "cancel_orders_up_to";
static const char __pyx_k_feeRecipientAddress[] = "feeRecipientAddress";
static const char __pyx_k_get_tx_hash_receipt[] = "get_tx_hash_receipt";
static const char __pyx_k_list_account_orders[] = "list_account_orders";
static const char __pyx_k_min_price_increment[] = "min_price_increment";
static const char __pyx_k_previous_is_expired[] = "previous_is_expired";
static const char __pyx_k_previous_is_failure[] = "previous_is_failure";
static const char __pyx_k_protocol_fee_amount[] = "protocol_fee_amount";
static const char __pyx_k_signed_market_order[] = "signed_market_order";
static const char __pyx_k_status_polling_loop[] = "_status_polling_loop";
static const char __pyx_k_submit_market_order[] = "submit_market_order";
static const char __pyx_k_tracked_limit_order[] = "tracked_limit_order";
static const char __pyx_k_zeroex_fill_watcher[] = "zeroex_fill_watcher";
static const char __pyx_k_BuyOrderCreatedEvent[] = "BuyOrderCreatedEvent";
static const char __pyx_k_The_limit_sell_order[] = "The limit sell order ";
static const char __pyx_k_The_market_buy_order[] = "The market buy order ";
static const char __pyx_k_base_asset_increment[] = "base_asset_increment";
static const char __pyx_k_format_trading_rules[] = "_format_trading_rules";
static const char __pyx_k_incomplete_order_ids[] = "incomplete_order_ids";
static const char __pyx_k_order_timestamp_diff[] = "order_timestamp_diff";
static const char __pyx_k_quote_asset_decimals[] = "quote_asset_decimals";
static const char __pyx_k_tracked_limit_orders[] = "tracked_limit_orders";
static const char __pyx_k_tracked_market_order[] = "tracked_market_order";
static const char __pyx_k_unsigned_limit_order[] = "unsigned_limit_order";
static const char __pyx_k_update_trading_rules[] = "_update_trading_rules";
static const char __pyx_k_Dict_str_Dict_str_Any[] = "Dict[str, Dict[str, Any]]";
static const char __pyx_k_Optional_Dict_str_Any[] = "Optional[Dict[str, Any]]";
static const char __pyx_k_Optional_Dict_str_str[] = "Optional[Dict[str, str]]";
static const char __pyx_k_SellOrderCreatedEvent[] = "SellOrderCreatedEvent";
static const char __pyx_k_The_market_sell_order[] = "The market sell order ";
static const char __pyx_k_Tuple_str_ZeroExOrder[] = "Tuple[str, ZeroExOrder]";
static const char __pyx_k_UPDATE_RULES_INTERVAL[] = "UPDATE_RULES_INTERVAL";
static const char __pyx_k_base_token_asset_data[] = "base_token_asset_data";
static const char __pyx_k_executed_amount_quote[] = "executed_amount_quote";
static const char __pyx_k_expirationTimeSeconds[] = "expirationTimeSeconds";
static const char __pyx_k_filledBaseTokenAmount[] = "filledBaseTokenAmount";
static const char __pyx_k_getTransactionReceipt[] = "getTransactionReceipt";
static const char __pyx_k_get_zero_ex_signature[] = "get_zero_ex_signature";
static const char __pyx_k_has_coordinated_order[] = "has_coordinated_order";
static const char __pyx_k_previous_is_cancelled[] = "previous_is_cancelled";
static const char __pyx_k_quote_asset_increment[] = "quote_asset_increment";
static const char __pyx_k_tracked_market_orders[] = "tracked_market_orders";
static const char __pyx_k_BuyOrderCompletedEvent[] = "BuyOrderCompletedEvent";
static const char __pyx_k_Check_transaction_hash[] = ". Check transaction hash ";
static const char __pyx_k_Failed_to_cancel_order[] = "Failed to cancel order ";
static const char __pyx_k_fill_base_token_amount[] = "fill_base_token_amount";
static const char __pyx_k_filledQuoteTokenAmount[] = "filledQuoteTokenAmount";
static const char __pyx_k_in_flight_limit_orders[] = "in_flight_limit_orders";
static const char __pyx_k_jsdict_order_to_struct[] = "jsdict_order_to_struct";
static const char __pyx_k_quote_token_asset_data[] = "quote_token_asset_data";
static const char __pyx_k_BambooRelayExchange_buy[] = "BambooRelayExchange.buy";
static const char __pyx_k_List_CancellationResult[] = "List[CancellationResult]";
static const char __pyx_k_MarketOrderFailureEvent[] = "MarketOrderFailureEvent";
static const char __pyx_k_SellOrderCompletedEvent[] = "SellOrderCompletedEvent";
static const char __pyx_k_generate_order_hash_hex[] = "generate_order_hash_hex";
static const char __pyx_k_in_flight_market_orders[] = "in_flight_market_orders";
static const char __pyx_k_order_books_initialized[] = "order_books_initialized";
static const char __pyx_k_restore_tracking_states[] = "restore_tracking_states";
static const char __pyx_k_taker_asset_fill_amount[] = "taker_asset_fill_amount";
static const char __pyx_k_total_base_token_amount[] = "total_base_token_amount";
static const char __pyx_k_BambooRelayExchange_sell[] = "BambooRelayExchange.sell";
static const char __pyx_k_Error_fetching_data_from[] = "Error fetching data from ";
static const char __pyx_k_No_order_book_exists_for[] = "No order book exists for '";
static const char __pyx_k_Server_Error_Bad_Gateway[] = " - Server Error: Bad Gateway.";
static const char __pyx_k_ZERO_EX_TEST_ERC20_PROXY[] = "ZERO_EX_TEST_ERC20_PROXY";
static const char __pyx_k_approval_tx_polling_loop[] = "_approval_tx_polling_loop";
static const char __pyx_k_batch_soft_cancel_orders[] = "batch_soft_cancel_orders";
static const char __pyx_k_get_active_order_tracker[] = "get_active_order_tracker";
static const char __pyx_k_pre_emptive_soft_cancels[] = "pre_emptive_soft_cancels";
static const char __pyx_k_remainingBaseTokenAmount[] = "remainingBaseTokenAmount";
static const char __pyx_k_taker_asset_fill_amounts[] = "taker_asset_fill_amounts";
static const char __pyx_k_total_quote_token_amount[] = "total_quote_token_amount";
static const char __pyx_k_trading_rule_initialized[] = "trading_rule_initialized";
static const char __pyx_k_ZERO_EX_KOVAN_ERC20_PROXY[] = "ZERO_EX_KOVAN_ERC20_PROXY";
static const char __pyx_k_account_available_balance[] = "account_available_balance";
static const char __pyx_k_base_amount_with_decimals[] = "base_amount_with_decimals";
static const char __pyx_k_maker_asset_filled_amount[] = "maker_asset_filled_amount";
static const char __pyx_k_min_base_amount_increment[] = "min_base_amount_increment";
static const char __pyx_k_order_to_Bamboo_Relay_for[] = " order to Bamboo Relay for ";
static const char __pyx_k_previous_amount_available[] = "previous_amount_available";
static const char __pyx_k_remainingQuoteTokenAmount[] = "remainingQuoteTokenAmount";
static const char __pyx_k_taker_asset_filled_amount[] = "taker_asset_filled_amount";
static const char __pyx_k_update_available_balances[] = "_update_available_balances";
static const char __pyx_k_update_limit_order_status[] = "_update_limit_order_status";
static const char __pyx_k_update_single_limit_order[] = "_update_single_limit_order";
static const char __pyx_k_BAMBOO_RELAY_REST_ENDPOINT[] = "BAMBOO_RELAY_REST_ENDPOINT";
static const char __pyx_k_BAMBOO_RELAY_TEST_ENDPOINT[] = "BAMBOO_RELAY_TEST_ENDPOINT";
static const char __pyx_k_BambooRelayExchange_cancel[] = "BambooRelayExchange.cancel";
static const char __pyx_k_BambooRelayExchange_logger[] = "BambooRelayExchange.logger";
static const char __pyx_k_min_quote_amount_increment[] = "min_quote_amount_increment";
static const char __pyx_k_quote_amount_with_decimals[] = "quote_amount_with_decimals";
static const char __pyx_k_update_market_order_status[] = "_update_market_order_status";
static const char __pyx_k_BambooRelayExchange_get_fee[] = "BambooRelayExchange.get_fee";
static const char __pyx_k_BambooRelayOrderBookTracker[] = "BambooRelayOrderBookTracker";
static const char __pyx_k_Invalid_trade_type_Aborting[] = "Invalid trade_type. Aborting.";
static const char __pyx_k_ORDER_CREATION_BACKOFF_TIME[] = "ORDER_CREATION_BACKOFF_TIME";
static const char __pyx_k_ZERO_EX_MAINNET_ERC20_PROXY[] = "ZERO_EX_MAINNET_ERC20_PROXY";
static const char __pyx_k_ZERO_EX_RINKEBY_ERC20_PROXY[] = "ZERO_EX_RINKEBY_ERC20_PROXY";
static const char __pyx_k_ZERO_EX_ROPSTEN_ERC20_PROXY[] = "ZERO_EX_ROPSTEN_ERC20_PROXY";
static const char __pyx_k_get_active_exchange_markets[] = "get_active_exchange_markets";
static const char __pyx_k_remaining_base_token_amount[] = "remaining_base_token_amount";
static const char __pyx_k_BambooRelayExchange_wrap_eth[] = "BambooRelayExchange.wrap_eth";
static const char __pyx_k_PRE_EMPTIVE_SOFT_CANCEL_TIME[] = "PRE_EMPTIVE_SOFT_CANCEL_TIME";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_max_price_significant_digits[] = "max_price_significant_digits";
static const char __pyx_k_remaining_quote_token_amount[] = "remaining_quote_token_amount";
static const char __pyx_k_BambooRelayExchange_get_price[] = "BambooRelayExchange.get_price";
static const char __pyx_k_BambooRelayTransactionTracker[] = "BambooRelayTransactionTracker";
static const char __pyx_k_List_BambooRelayInFlightOrder[] = "List[BambooRelayInFlightOrder]";
static const char __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG[] = "MARKET_ORDER_FILLED_EVENT_TAG";
static const char __pyx_k_UPDATE_MARKET_ORDERS_INTERVAL[] = "UPDATE_MARKET_ORDERS_INTERVAL";
static const char __pyx_k_ZERO_EX_TEST_EXCHANGE_ADDRESS[] = "ZERO_EX_TEST_EXCHANGE_ADDRESS";
static const char __pyx_k_according_to_order_status_API[] = " according to order status API.";
static const char __pyx_k_is_worse_than_requested_price[] = " is worse than requested price ";
static const char __pyx_k_max_base_amount_with_decimals[] = "max_base_amount_with_decimals";
static const char __pyx_k_BambooRelayExchange_cancel_all[] = "BambooRelayExchange.cancel_all";
static const char __pyx_k_BambooRelayExchange_get_orders[] = "BambooRelayExchange.get_orders";
static const char __pyx_k_BambooRelayExchange_unwrap_eth[] = "BambooRelayExchange.unwrap_eth";
static const char __pyx_k_Error_parsing_the_trading_pair[] = "Error parsing the trading_pair ";
static const char __pyx_k_MARKET_ORDER_EXPIRED_EVENT_TAG[] = "MARKET_ORDER_EXPIRED_EVENT_TAG";
static const char __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG[] = "MARKET_ORDER_FAILURE_EVENT_TAG";
static const char __pyx_k_ZERO_EX_KOVAN_EXCHANGE_ADDRESS[] = "ZERO_EX_KOVAN_EXCHANGE_ADDRESS";
static const char __pyx_k_check_and_fix_approval_amounts[] = "check_and_fix_approval_amounts";
static const char __pyx_k_has_completed_according_to_the[] = " has completed according to the RPC transaction logs.";
static const char __pyx_k_has_expired_according_to_order[] = " has expired according to order status API.";
static const char __pyx_k_order_filled_base_token_amount[] = "order_filled_base_token_amount";
static const char __pyx_k_BAMBOO_RELAY_TEST_FEE_RECIPIENT[] = "BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS";
static const char __pyx_k_BambooRelayExchange_get_account[] = "BambooRelayExchange.get_account_orders";
static const char __pyx_k_BambooRelayExchange_get_tx_hash[] = "BambooRelayExchange.get_tx_hash_receipt";
static const char __pyx_k_BambooRelayExchange_get_zero_ex[] = "BambooRelayExchange.get_zero_ex_signature";
static const char __pyx_k_BambooRelayExchange_list_market[] = "BambooRelayExchange.list_market";
static const char __pyx_k_BambooRelayExchange_reset_state[] = "BambooRelayExchange.reset_state";
static const char __pyx_k_BambooRelayTransactionTracker_2[] = "BambooRelayTransactionTracker.__reduce_cython__";
static const char __pyx_k_BambooRelayTransactionTracker_3[] = "BambooRelayTransactionTracker.__setstate_cython__";
static const char __pyx_k_Error_restoring_tracking_states[] = "Error restoring tracking states.";
static const char __pyx_k_Failed_to_fetch_account_updates[] = "Failed to fetch account updates on Bamboo Relay. Check network connection.";
static const char __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG[] = "MARKET_RECEIVED_ASSET_EVENT_TAG";
static const char __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT[] = "MARKET_SELL_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_Order_not_found_in_tracked_orde[] = ". Order not found in tracked orders.";
static const char __pyx_k_Unexpected_error_while_fetching[] = "Unexpected error while fetching account updates.";
static const char __pyx_k_Unrecognized_transaction_status[] = "Unrecognized transaction status for market order ";
static const char __pyx_k_according_to_the_RPC_transactio[] = " according to the RPC transaction logs.";
static const char __pyx_k_could_not_be_found_according_to[] = " could not be found according to order status API. Removing from tracking.";
static const char __pyx_k_has_been_hard_cancelled_accordi[] = " has been hard cancelled according to transaction hash ";
static const char __pyx_k_has_been_soft_cancelled_accordi[] = " has been soft cancelled according to the Coordinator server.";
static const char __pyx_k_has_cancelled_according_to_orde[] = " has cancelled according to order status API.";
static const char __pyx_k_has_completed_according_to_orde[] = " has completed according to order status API.";
static const char __pyx_k_has_completed_according_to_tran[] = " has completed according to transaction hash ";
static const char __pyx_k_has_failed_according_to_order_s[] = " has failed according to order status API.";
static const char __pyx_k_has_had_it_s_available_amount_r[] = " has had it's available amount reduced to ";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_hummingbot_wallet_ethereum_web3[] = "hummingbot.wallet.ethereum.web3_wallet";
static const char __pyx_k_hummingbot_wallet_ethereum_zero[] = "hummingbot.wallet.ethereum.zero_ex.zero_ex_custom_utils_v3";
static const char __pyx_k_is_greater_than_requested_amoun[] = " is greater than requested amount ";
static const char __pyx_k_is_greater_than_the_maximum_ord[] = " is greater than the maximum order size ";
static const char __pyx_k_is_lower_than_the_minimum_order[] = " is lower than the minimum order size ";
static const char __pyx_k_markets_perPage_1000_include_ba[] = "/markets?perPage=1000&include=base";
static const char __pyx_k_must_be_greater_than_current_ti[] = " must be greater than current time ";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_order_filled_quote_token_amount[] = "order_filled_quote_token_amount";
static const char __pyx_k_order_to_Bamboo_Relay_Check_Eth[] = " order to Bamboo Relay. Check Ethereum wallet and network connection.";
static const char __pyx_k_will_be_pre_emptively_soft_canc[] = " will be pre-emptively soft cancelled.";
static const char __pyx_k_0x000000000000000000000000000000[] = "0x0000000000000000000000000000000000000000";
static const char __pyx_k_0xf47261b00000000000000000000000[] = "0xf47261b0000000000000000000000000";
static const char __pyx_k_API_returned_incorrect_values_fo[] = "API returned incorrect values for market order, total maker amount ";
static const char __pyx_k_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT[] = "BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS";
static const char __pyx_k_BAMBOO_RELAY_MAINNET_FEE_RECIPIE[] = "BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS";
static const char __pyx_k_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE[] = "BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS";
static const char __pyx_k_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE[] = "BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS";
static const char __pyx_k_BambooRelayAPIOrderBookDataSourc[] = "BambooRelayAPIOrderBookDataSource";
static const char __pyx_k_BambooRelayExchange___reduce_cyt[] = "BambooRelayExchange.__reduce_cython__";
static const char __pyx_k_BambooRelayExchange___setstate_c[] = "BambooRelayExchange.__setstate_cython__";
static const char __pyx_k_BambooRelayExchange__api_request[] = "BambooRelayExchange._api_request";
static const char __pyx_k_BambooRelayExchange__approval_tx[] = "BambooRelayExchange._approval_tx_polling_loop";
static const char __pyx_k_BambooRelayExchange__format_trad[] = "BambooRelayExchange._format_trading_rules";
static const char __pyx_k_BambooRelayExchange__get_order_u[] = "BambooRelayExchange._get_order_updates";
static const char __pyx_k_BambooRelayExchange__status_poll[] = "BambooRelayExchange._status_polling_loop";
static const char __pyx_k_BambooRelayExchange__stop_networ[] = "BambooRelayExchange._stop_network";
static const char __pyx_k_BambooRelayExchange__update_avai[] = "BambooRelayExchange._update_available_balances";
static const char __pyx_k_BambooRelayExchange__update_bala[] = "BambooRelayExchange._update_balances";
static const char __pyx_k_BambooRelayExchange__update_limi[] = "BambooRelayExchange._update_limit_order_status";
static const char __pyx_k_BambooRelayExchange__update_mark[] = "BambooRelayExchange._update_market_order_status";
static const char __pyx_k_BambooRelayExchange__update_sing[] = "BambooRelayExchange._update_single_limit_order";
static const char __pyx_k_BambooRelayExchange__update_trad[] = "BambooRelayExchange._update_trading_rules";
static const char __pyx_k_BambooRelayExchange_cancel_order[] = "BambooRelayExchange.cancel_order";
static const char __pyx_k_BambooRelayExchange_check_networ[] = "BambooRelayExchange.check_network";
static const char __pyx_k_BambooRelayExchange_execute_trad[] = "BambooRelayExchange.execute_trade";
static const char __pyx_k_BambooRelayExchange_get_active_e[] = "BambooRelayExchange.get_active_exchange_markets";
static const char __pyx_k_BambooRelayExchange_get_order_bo[] = "BambooRelayExchange.get_order_book";
static const char __pyx_k_BambooRelayExchange_get_order_ha[] = "BambooRelayExchange.get_order_hash_hex";
static const char __pyx_k_BambooRelayExchange_list_account[] = "BambooRelayExchange.list_account_orders";
static const char __pyx_k_BambooRelayExchange_restore_trac[] = "BambooRelayExchange.restore_tracking_states";
static const char __pyx_k_BambooRelayExchange_start_networ[] = "BambooRelayExchange.start_network";
static const char __pyx_k_BambooRelayExchange_stop_network[] = "BambooRelayExchange.stop_network";
static const char __pyx_k_BambooRelayExchange_submit_limit[] = "BambooRelayExchange.submit_limit_order";
static const char __pyx_k_BambooRelayExchange_submit_marke[] = "BambooRelayExchange.submit_market_order";
static const char __pyx_k_Could_not_get_token_approval_sta[] = "Could not get token approval status. Check Ethereum wallet and network connection.";
static const char __pyx_k_Failed_to_cancel_order_on_Bamboo[] = "Failed to cancel order on Bamboo Relay. Check Ethereum wallet and network connection.";
static const char __pyx_k_Failed_to_cancel_orders_on_Bambo[] = "Failed to cancel orders on Bamboo Relay. Coordinator rejected cancellation request.";
static const char __pyx_k_Incorrect_values_for_market_orde[] = "Incorrect values for market order, price ";
static const char __pyx_k_Limit_orders_require_a_price_Abo[] = "Limit orders require a price. Aborting.";
static const char __pyx_k_Limit_orders_require_an_expirati[] = "Limit orders require an expiration timestamp 'expiration_ts'. Aborting.";
static const char __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT[] = "MARKET_BUY_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T[] = "MARKET_BUY_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG[] = "MARKET_ORDER_CANCELLED_EVENT_TAG";
static const char __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN[] = "MARKET_SELL_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_No_valid_orders_found_for_amount[] = "No valid orders found for amount ";
static const char __pyx_k_Tuple_Decimal_Decimal_str_int_bo[] = "Tuple[Decimal, Decimal, str, int, bool]";
static const char __pyx_k_UPDATE_OPEN_LIMIT_ORDERS_INTERVA[] = "UPDATE_OPEN_LIMIT_ORDERS_INTERVAL";
static const char __pyx_k_Unexpected_error_cancelling_orde[] = "Unexpected error cancelling orders.";
static const char __pyx_k_ZERO_EX_KOVAN_COORDINATOR_ADDRES[] = "ZERO_EX_KOVAN_COORDINATOR_ADDRESS";
static const char __pyx_k_ZERO_EX_KOVAN_COORDINATOR_REGIST[] = "ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS";
static const char __pyx_k_ZERO_EX_MAINNET_COORDINATOR_ADDR[] = "ZERO_EX_MAINNET_COORDINATOR_ADDRESS";
static const char __pyx_k_ZERO_EX_MAINNET_COORDINATOR_REGI[] = "ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS";
static const char __pyx_k_ZERO_EX_MAINNET_EXCHANGE_ADDRESS[] = "ZERO_EX_MAINNET_EXCHANGE_ADDRESS";
static const char __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_ADDR[] = "ZERO_EX_RINKEBY_COORDINATOR_ADDRESS";
static const char __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_REGI[] = "ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS";
static const char __pyx_k_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS[] = "ZERO_EX_RINKEBY_EXCHANGE_ADDRESS";
static const char __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_ADDR[] = "ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS";
static const char __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_REGI[] = "ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS";
static const char __pyx_k_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS[] = "ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS";
static const char __pyx_k_ZERO_EX_TEST_COORDINATOR_ADDRESS[] = "ZERO_EX_TEST_COORDINATOR_ADDRESS";
static const char __pyx_k_ZERO_EX_TEST_COORDINATOR_REGISTR[] = "ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS";
static const char __pyx_k_has_failed_according_to_transact[] = "has failed according to transaction hash ";
static const char __pyx_k_have_been_hard_cancelled_accordi[] = "have been hard cancelled according to transaction hash ";
static const char __pyx_k_have_been_soft_cancelled_accordi[] = "have been soft cancelled according to the Coordinator server.";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange";
static const char __pyx_k_hummingbot_core_data_type_cancel[] = "hummingbot.core.data_type.cancellation_result";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_utils_async_util[] = "hummingbot.core.utils.async_utils";
static const char __pyx_k_hummingbot_core_utils_estimate_f[] = "hummingbot.core.utils.estimate_fee";
static const char __pyx_k_hummingbot_core_utils_tracking_n[] = "hummingbot.core.utils.tracking_nonce";
static const char __pyx_k_hummingbot_wallet_ethereum_ether[] = "hummingbot.wallet.ethereum.ethereum_chain";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_order_remaining_base_token_amoun[] = "order_remaining_base_token_amount";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_Unexpected_error_while_fetching_2[] = "Unexpected error while fetching approval transactions.";
static const char __pyx_k_hummingbot_wallet_ethereum_zero_2[] = "hummingbot.wallet.ethereum.zero_ex.zero_ex_exchange_v3";
static const char __pyx_k_hummingbot_wallet_ethereum_zero_3[] = "hummingbot.wallet.ethereum.zero_ex.zero_ex_coordinator_v3";
static const char __pyx_k_Failed_to_cancel_orders_on_Bambo_2[] = "Failed to cancel orders on Bamboo Relay. Check Ethereum wallet and network connection.";
static const char __pyx_k_Unexpected_error_cancelling_orde_2[] = "Unexpected error cancelling order.";
static const char __pyx_k_hummingbot_connector_exchange_ba_2[] = "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_api_order_book_data_source";
static const char __pyx_k_hummingbot_connector_exchange_ba_3[] = "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_order_book_tracker";
static const char __pyx_k_hummingbot_connector_exchange_ba_4[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_connector_exchange_ba_5[] = "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_constants";
static const char __pyx_k_hummingbot_connector_exchange_ba_6[] = "hummingbot\\connector\\exchange\\bamboo_relay\\bamboo_relay_exchange.pyx";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_0;
static PyObject *__pyx_kp_u_0x;
static PyObject *__pyx_kp_u_0x000000000000000000000000000000;
static PyObject *__pyx_kp_u_0xf47261b00000000000000000000000;
static PyObject *__pyx_kp_u_1e;
static PyObject *__pyx_kp_u_1e_2;
static PyObject *__pyx_n_s_API_CALL_TIMEOUT;
static PyObject *__pyx_kp_u_API_returned_incorrect_values_fo;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT;
static PyObject *__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE;
static PyObject *__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT;
static PyObject *__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE;
static PyObject *__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE;
static PyObject *__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT;
static PyObject *__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_n_s_BambooRelayAPIOrderBookDataSourc;
static PyObject *__pyx_n_s_BambooRelayExchange;
static PyObject *__pyx_n_s_BambooRelayExchange___reduce_cyt;
static PyObject *__pyx_n_s_BambooRelayExchange___setstate_c;
static PyObject *__pyx_n_s_BambooRelayExchange__api_request;
static PyObject *__pyx_n_s_BambooRelayExchange__approval_tx;
static PyObject *__pyx_n_s_BambooRelayExchange__format_trad;
static PyObject *__pyx_n_s_BambooRelayExchange__get_order_u;
static PyObject *__pyx_n_s_BambooRelayExchange__status_poll;
static PyObject *__pyx_n_s_BambooRelayExchange__stop_networ;
static PyObject *__pyx_n_s_BambooRelayExchange__update_avai;
static PyObject *__pyx_n_s_BambooRelayExchange__update_bala;
static PyObject *__pyx_n_s_BambooRelayExchange__update_limi;
static PyObject *__pyx_n_s_BambooRelayExchange__update_mark;
static PyObject *__pyx_n_s_BambooRelayExchange__update_sing;
static PyObject *__pyx_n_s_BambooRelayExchange__update_trad;
static PyObject *__pyx_n_s_BambooRelayExchange_buy;
static PyObject *__pyx_n_s_BambooRelayExchange_cancel;
static PyObject *__pyx_n_s_BambooRelayExchange_cancel_all;
static PyObject *__pyx_n_s_BambooRelayExchange_cancel_order;
static PyObject *__pyx_n_s_BambooRelayExchange_check_networ;
static PyObject *__pyx_n_s_BambooRelayExchange_execute_trad;
static PyObject *__pyx_n_s_BambooRelayExchange_get_account;
static PyObject *__pyx_n_s_BambooRelayExchange_get_active_e;
static PyObject *__pyx_n_s_BambooRelayExchange_get_fee;
static PyObject *__pyx_n_s_BambooRelayExchange_get_order_bo;
static PyObject *__pyx_n_s_BambooRelayExchange_get_order_ha;
static PyObject *__pyx_n_s_BambooRelayExchange_get_orders;
static PyObject *__pyx_n_s_BambooRelayExchange_get_price;
static PyObject *__pyx_n_s_BambooRelayExchange_get_tx_hash;
static PyObject *__pyx_n_s_BambooRelayExchange_get_zero_ex;
static PyObject *__pyx_n_s_BambooRelayExchange_list_account;
static PyObject *__pyx_n_s_BambooRelayExchange_list_market;
static PyObject *__pyx_n_s_BambooRelayExchange_logger;
static PyObject *__pyx_n_s_BambooRelayExchange_reset_state;
static PyObject *__pyx_n_s_BambooRelayExchange_restore_trac;
static PyObject *__pyx_n_s_BambooRelayExchange_sell;
static PyObject *__pyx_n_s_BambooRelayExchange_start_networ;
static PyObject *__pyx_n_s_BambooRelayExchange_stop_network;
static PyObject *__pyx_n_s_BambooRelayExchange_submit_limit;
static PyObject *__pyx_n_s_BambooRelayExchange_submit_marke;
static PyObject *__pyx_n_s_BambooRelayExchange_unwrap_eth;
static PyObject *__pyx_n_s_BambooRelayExchange_wrap_eth;
static PyObject *__pyx_n_s_BambooRelayOrderBookTracker;
static PyObject *__pyx_n_s_BambooRelayTransactionTracker;
static PyObject *__pyx_n_s_BambooRelayTransactionTracker_2;
static PyObject *__pyx_n_s_BambooRelayTransactionTracker_3;
static PyObject *__pyx_n_s_BuyOrderCompleted;
static PyObject *__pyx_n_s_BuyOrderCompletedEvent;
static PyObject *__pyx_n_s_BuyOrderCreated;
static PyObject *__pyx_n_s_BuyOrderCreatedEvent;
static PyObject *__pyx_n_u_CANCELED;
static PyObject *__pyx_n_s_CANCEL_EXPIRY_TIME;
static PyObject *__pyx_n_u_COMPLETED;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_n_s_CancellationResult;
static PyObject *__pyx_n_s_CancelledError;
static PyObject *__pyx_kp_u_Check_transaction_hash;
static PyObject *__pyx_n_s_ClientSession;
static PyObject *__pyx_kp_u_Could_not_get_token_approval_sta;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_kp_s_Dict_str_Any;
static PyObject *__pyx_kp_s_Dict_str_Dict_str_Any;
static PyObject *__pyx_kp_s_Dict_str_any;
static PyObject *__pyx_n_u_ETH;
static PyObject *__pyx_kp_u_Error_fetching_data_from;
static PyObject *__pyx_kp_u_Error_parsing_the_trading_pair;
static PyObject *__pyx_kp_u_Error_restoring_tracking_states;
static PyObject *__pyx_kp_u_Error_submitting;
static PyObject *__pyx_n_s_EthereumChain;
static PyObject *__pyx_n_s_Event;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_n_u_FILLED;
static PyObject *__pyx_kp_u_Failed_to_cancel_order;
static PyObject *__pyx_kp_u_Failed_to_cancel_order_on_Bamboo;
static PyObject *__pyx_kp_u_Failed_to_cancel_orders_on_Bambo;
static PyObject *__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2;
static PyObject *__pyx_kp_u_Failed_to_fetch_account_updates;
static PyObject *__pyx_kp_u_Failed_to_submit;
static PyObject *__pyx_kp_u_Filled;
static PyObject *__pyx_n_u_GET;
static PyObject *__pyx_n_s_HTTPProvider;
static PyObject *__pyx_kp_u_HTTP_status_is;
static PyObject *__pyx_n_s_HummingbotLogger;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Incorrect_values_for_market_orde;
static PyObject *__pyx_kp_u_Invalid_trade_type_Aborting;
static PyObject *__pyx_n_s_KOVAN;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_kp_u_Limit_orders_require_a_price_Abo;
static PyObject *__pyx_kp_u_Limit_orders_require_an_expirati;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_BambooRelayInFlightOrder;
static PyObject *__pyx_kp_s_List_CancellationResult;
static PyObject *__pyx_kp_s_List_Dict_str_Any;
static PyObject *__pyx_kp_s_List_TradingRule;
static PyObject *__pyx_kp_s_List_str;
static PyObject *__pyx_n_s_MAIN_NET;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT;
static PyObject *__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T;
static PyObject *__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN;
static PyObject *__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT;
static PyObject *__pyx_n_s_MarketEvent;
static PyObject *__pyx_n_s_MarketOrderFailureEvent;
static PyObject *__pyx_n_s_NOT_CONNECTED;
static PyObject *__pyx_n_u_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_order_book_exists_for;
static PyObject *__pyx_kp_u_No_valid_orders_found_for_amount;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_ORDER_CREATION_BACKOFF_TIME;
static PyObject *__pyx_n_s_ORDER_EXPIRY_TIME;
static PyObject *__pyx_n_s_Optional;
static PyObject *__pyx_kp_s_Optional_Dict_str_Any;
static PyObject *__pyx_kp_s_Optional_Dict_str_str;
static PyObject *__pyx_n_s_Order;
static PyObject *__pyx_n_s_OrderBook;
static PyObject *__pyx_n_s_OrderCancelled;
static PyObject *__pyx_n_s_OrderCancelledEvent;
static PyObject *__pyx_n_s_OrderExpired;
static PyObject *__pyx_n_s_OrderExpiredEvent;
static PyObject *__pyx_n_s_OrderFailure;
static PyObject *__pyx_n_s_OrderFilled;
static PyObject *__pyx_n_s_OrderFilledEvent;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_kp_u_Order_not_found_in_tracked_orde;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME;
static PyObject *__pyx_n_s_RINKEBY;
static PyObject *__pyx_n_s_ROPSTEN;
static PyObject *__pyx_n_s_ROUND_FLOOR;
static PyObject *__pyx_n_s_ReceivedAsset;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_s_SellOrderCompleted;
static PyObject *__pyx_n_s_SellOrderCompletedEvent;
static PyObject *__pyx_n_s_SellOrderCreated;
static PyObject *__pyx_n_s_SellOrderCreatedEvent;
static PyObject *__pyx_kp_u_Server_Error_Bad_Gateway;
static PyObject *__pyx_kp_u_Skipping;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_kp_u_The_limit_buy_order;
static PyObject *__pyx_kp_u_The_limit_order;
static PyObject *__pyx_kp_u_The_limit_orders;
static PyObject *__pyx_kp_u_The_limit_sell_order;
static PyObject *__pyx_kp_u_The_market_buy_order;
static PyObject *__pyx_kp_u_The_market_order;
static PyObject *__pyx_kp_u_The_market_sell_order;
static PyObject *__pyx_n_s_TradeFee;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_TransactionNotFound;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo;
static PyObject *__pyx_kp_s_Tuple_str_ZeroExOrder;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL;
static PyObject *__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA;
static PyObject *__pyx_n_s_UPDATE_RULES_INTERVAL;
static PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde;
static PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde_2;
static PyObject *__pyx_kp_u_Unexpected_error_while_fetching;
static PyObject *__pyx_kp_u_Unexpected_error_while_fetching_2;
static PyObject *__pyx_kp_u_Unrecognized_transaction_status;
static PyObject *__pyx_kp_u_User_Agent;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Web3;
static PyObject *__pyx_n_s_Web3Wallet;
static PyObject *__pyx_n_s_ZEROEX_TEST;
static PyObject *__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES;
static PyObject *__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST;
static PyObject *__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY;
static PyObject *__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS;
static PyObject *__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR;
static PyObject *__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI;
static PyObject *__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY;
static PyObject *__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS;
static PyObject *__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR;
static PyObject *__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI;
static PyObject *__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY;
static PyObject *__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS;
static PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR;
static PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI;
static PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY;
static PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS;
static PyObject *__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS;
static PyObject *__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR;
static PyObject *__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY;
static PyObject *__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS;
static PyObject *__pyx_n_s_ZeroExCoordinator;
static PyObject *__pyx_n_s_ZeroExExchange;
static PyObject *__pyx_n_s_ZeroExFillEvent;
static PyObject *__pyx_n_s_ZeroExOrder;
static PyObject *__pyx_n_s__125;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__41;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_n_s__52;
static PyObject *__pyx_kp_u_according_to_order_status_API;
static PyObject *__pyx_kp_u_according_to_the_RPC_transactio;
static PyObject *__pyx_n_u_account_available_balance;
static PyObject *__pyx_n_u_account_balance;
static PyObject *__pyx_n_s_account_order;
static PyObject *__pyx_n_s_account_orders_list;
static PyObject *__pyx_n_s_account_orders_map;
static PyObject *__pyx_kp_u_accounts;
static PyObject *__pyx_n_s_active_asks;
static PyObject *__pyx_n_s_active_bids;
static PyObject *__pyx_n_s_address;
static PyObject *__pyx_n_s_aenter;
static PyObject *__pyx_n_s_aexit;
static PyObject *__pyx_n_s_aiohttp;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_amount_to_fill;
static PyObject *__pyx_kp_u_and_price;
static PyObject *__pyx_n_s_apiOrder;
static PyObject *__pyx_n_s_api_request;
static PyObject *__pyx_n_s_app_warning_msg;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_approval_tx_polling_loop;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_async_timeout;
static PyObject *__pyx_n_s_asyncio;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_asyncio_tasks;
static PyObject *__pyx_n_s_avg_price;
static PyObject *__pyx_n_s_await;
static PyObject *__pyx_n_s_balance;
static PyObject *__pyx_n_u_bamboo_relay;
static PyObject *__pyx_n_u_baseTokenDecimals;
static PyObject *__pyx_n_s_base_amount_with_decimals;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_asset_decimals;
static PyObject *__pyx_n_s_base_asset_increment;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_s_base_token_asset_data;
static PyObject *__pyx_n_s_batch_fill_orders;
static PyObject *__pyx_n_s_batch_soft_cancel_orders;
static PyObject *__pyx_n_u_blockNumber;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_brm_logger;
static PyObject *__pyx_kp_u_buy;
static PyObject *__pyx_n_s_buy_2;
static PyObject *__pyx_n_s_c_did_timeout_tx;
static PyObject *__pyx_n_s_calculated_price;
static PyObject *__pyx_n_s_cancel;
static PyObject *__pyx_n_s_cancel_all;
static PyObject *__pyx_n_s_cancel_order;
static PyObject *__pyx_n_s_cancel_orders_up_to;
static PyObject *__pyx_n_s_capitalize;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_n_u_chainId;
static PyObject *__pyx_n_s_chain_id;
static PyObject *__pyx_n_s_check_and_fix_approval_amounts;
static PyObject *__pyx_n_s_check_network;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_client;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_kp_u_could_not_be_found_according_to;
static PyObject *__pyx_n_s_currency;
static PyObject *__pyx_n_s_current_backend;
static PyObject *__pyx_n_s_current_timestamp;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_deepcopy;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_erc20_tokens;
static PyObject *__pyx_n_s_err_msg;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_estimate_fee;
static PyObject *__pyx_n_s_eth;
static PyObject *__pyx_n_s_eth_utils;
static PyObject *__pyx_n_s_ethereum_rpc_url;
static PyObject *__pyx_n_s_ex;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_u_exchangeAddress;
static PyObject *__pyx_n_s_exchange_address;
static PyObject *__pyx_n_s_exchange_order_id;
static PyObject *__pyx_n_s_execute_trade;
static PyObject *__pyx_n_s_executed_amount_quote;
static PyObject *__pyx_n_u_expirationTimeSeconds;
static PyObject *__pyx_kp_u_expiration_time;
static PyObject *__pyx_n_u_expiration_ts;
static PyObject *__pyx_n_s_expires;
static PyObject *__pyx_n_u_feeRecipientAddress;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_fill_base_token_amount;
static PyObject *__pyx_n_s_fill_event;
static PyObject *__pyx_n_s_fill_order;
static PyObject *__pyx_n_u_filledBaseTokenAmount;
static PyObject *__pyx_n_u_filledQuoteTokenAmount;
static PyObject *__pyx_n_u_fills;
static PyObject *__pyx_n_s_fix_signature;
static PyObject *__pyx_n_s_fixed_signature;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_kp_u_for_more_details;
static PyObject *__pyx_n_s_format_trading_rules;
static PyObject *__pyx_n_s_from_json;
static PyObject *__pyx_n_u_gasUsed;
static PyObject *__pyx_n_s_gas_used;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_generate_order_hash_hex;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_u_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_getTransactionReceipt;
static PyObject *__pyx_n_s_get_account_orders;
static PyObject *__pyx_n_s_get_active_exchange_markets;
static PyObject *__pyx_n_s_get_active_order_tracker;
static PyObject *__pyx_n_s_get_all_balances;
static PyObject *__pyx_n_s_get_event_loop;
static PyObject *__pyx_n_s_get_fee;
static PyObject *__pyx_n_s_get_order_book;
static PyObject *__pyx_n_s_get_order_hash_hex;
static PyObject *__pyx_n_s_get_order_updates;
static PyObject *__pyx_n_s_get_orders;
static PyObject *__pyx_n_s_get_price;
static PyObject *__pyx_n_s_get_tracking_nonce;
static PyObject *__pyx_n_s_get_tx_hash_receipt;
static PyObject *__pyx_n_s_get_zero_ex_signature;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_has_been_cancelled;
static PyObject *__pyx_kp_u_has_been_hard_cancelled_accordi;
static PyObject *__pyx_kp_u_has_been_soft_cancelled_accordi;
static PyObject *__pyx_kp_u_has_cancelled_according_to_orde;
static PyObject *__pyx_kp_u_has_completed_according_to_orde;
static PyObject *__pyx_kp_u_has_completed_according_to_the;
static PyObject *__pyx_kp_u_has_completed_according_to_tran;
static PyObject *__pyx_n_s_has_coordinated_order;
static PyObject *__pyx_kp_u_has_expired_according_to_order;
static PyObject *__pyx_kp_u_has_failed_according_to_order_s;
static PyObject *__pyx_kp_u_has_failed_according_to_transact;
static PyObject *__pyx_kp_u_has_had_it_s_available_amount_r;
static PyObject *__pyx_n_s_hash;
static PyObject *__pyx_n_s_hash_index;
static PyObject *__pyx_n_s_hashes;
static PyObject *__pyx_kp_u_have_been_hard_cancelled_accordi;
static PyObject *__pyx_kp_u_have_been_soft_cancelled_accordi;
static PyObject *__pyx_n_s_headers;
static PyObject *__pyx_n_s_hexstr;
static PyObject *__pyx_n_s_http_method;
static PyObject *__pyx_n_u_hummingbot;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_2;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_3;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_4;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_5;
static PyObject *__pyx_kp_s_hummingbot_connector_exchange_ba_6;
static PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
static PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
static PyObject *__pyx_n_s_hummingbot_core_utils_tracking_n;
static PyObject *__pyx_n_s_hummingbot_logger;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_ether;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_web3;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero_2;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero_3;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_u_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_flight_limit_orders;
static PyObject *__pyx_n_s_in_flight_market_orders;
static PyObject *__pyx_n_s_incomplete_order_ids;
static PyObject *__pyx_n_s_incomplete_orders;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_u_isCoordinated;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_cancelled;
static PyObject *__pyx_n_s_is_coordinated;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_is_done;
static PyObject *__pyx_n_s_is_expired;
static PyObject *__pyx_n_s_is_failure;
static PyObject *__pyx_n_s_is_finite;
static PyObject *__pyx_kp_u_is_greater_than_requested_amoun;
static PyObject *__pyx_kp_u_is_greater_than_the_maximum_ord;
static PyObject *__pyx_kp_u_is_lower_than_the_minimum_order;
static PyObject *__pyx_n_s_is_nan;
static PyObject *__pyx_n_s_is_set;
static PyObject *__pyx_kp_u_is_worse_than_requested_price;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_jsdict_order_to_struct;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_kp_u_kovan_0x;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_latest_salt;
static PyObject *__pyx_n_u_limit_orders;
static PyObject *__pyx_n_s_list_account_orders;
static PyObject *__pyx_n_s_list_market;
static PyObject *__pyx_n_s_locked_balances;
static PyObject *__pyx_n_s_log10;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_u_main_0x;
static PyObject *__pyx_n_u_makerAddress;
static PyObject *__pyx_n_u_makerAssetAmount;
static PyObject *__pyx_n_u_makerAssetData;
static PyObject *__pyx_n_u_makerFee;
static PyObject *__pyx_n_u_makerFeeAssetData;
static PyObject *__pyx_n_s_maker_asset_amount;
static PyObject *__pyx_n_s_maker_asset_data;
static PyObject *__pyx_n_s_maker_asset_filled_amount;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_u_market_orders;
static PyObject *__pyx_n_s_markets;
static PyObject *__pyx_kp_u_markets_perPage_1000_include_ba;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_u_maxOrderSize;
static PyObject *__pyx_n_s_max_base_amount_with_decimals;
static PyObject *__pyx_n_s_max_order_size;
static PyObject *__pyx_n_s_max_price_significant_digits;
static PyObject *__pyx_n_u_minOrderSize;
static PyObject *__pyx_n_s_min_base_amount_increment;
static PyObject *__pyx_n_s_min_order_size;
static PyObject *__pyx_n_s_min_price_increment;
static PyObject *__pyx_n_s_min_quote_amount_increment;
static PyObject *__pyx_kp_u_must_be_greater_than_current_ti;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_network;
static PyObject *__pyx_n_s_network_status;
static PyObject *__pyx_n_s_null_address;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_kp_u_of_the_limit_order;
static PyObject *__pyx_n_s_oid;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_u_orderHash;
static PyObject *__pyx_kp_u_order_amount;
static PyObject *__pyx_n_s_order_books;
static PyObject *__pyx_n_u_order_books_initialized;
static PyObject *__pyx_n_s_order_filled_base_token_amount;
static PyObject *__pyx_n_s_order_filled_quote_token_amount;
static PyObject *__pyx_n_s_order_hash;
static PyObject *__pyx_n_s_order_hash_hex;
static PyObject *__pyx_n_s_order_hashes;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_ids;
static PyObject *__pyx_n_s_order_price;
static PyObject *__pyx_n_s_order_remaining_base_token_amoun;
static PyObject *__pyx_n_s_order_side;
static PyObject *__pyx_n_s_order_state;
static PyObject *__pyx_n_s_order_struct;
static PyObject *__pyx_n_s_order_timestamp_diff;
static PyObject *__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth;
static PyObject *__pyx_kp_u_order_to_Bamboo_Relay_for;
static PyObject *__pyx_n_s_order_type;
static PyObject *__pyx_n_s_order_update;
static PyObject *__pyx_n_s_order_updates;
static PyObject *__pyx_kp_u_orders;
static PyObject *__pyx_n_s_orders_2;
static PyObject *__pyx_kp_u_orders_hashes;
static PyObject *__pyx_kp_u_out_of;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_n_s_pair_split;
static PyObject *__pyx_n_s_poll_interval;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_n_u_post;
static PyObject *__pyx_n_s_pre_emptive_soft_cancels;
static PyObject *__pyx_n_s_previous_amount_available;
static PyObject *__pyx_n_s_previous_is_cancelled;
static PyObject *__pyx_n_s_previous_is_done;
static PyObject *__pyx_n_s_previous_is_expired;
static PyObject *__pyx_n_s_previous_is_failure;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_protocol_fee;
static PyObject *__pyx_n_s_protocol_fee_amount;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q_amt;
static PyObject *__pyx_n_s_q_price;
static PyObject *__pyx_n_u_quoteIncrement;
static PyObject *__pyx_n_u_quoteTokenDecimals;
static PyObject *__pyx_n_s_quote_amount;
static PyObject *__pyx_n_s_quote_amount_with_decimals;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_asset_decimals;
static PyObject *__pyx_n_s_quote_asset_increment;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_quote_token_asset_data;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_receipt;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_u_remainingBaseTokenAmount;
static PyObject *__pyx_n_u_remainingQuoteTokenAmount;
static PyObject *__pyx_n_s_remaining_base_token_amount;
static PyObject *__pyx_n_s_remaining_quote_token_amount;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_0x_prefix;
static PyObject *__pyx_n_s_request;
static PyObject *__pyx_n_s_reset_state;
static PyObject *__pyx_n_s_response;
static PyObject *__pyx_n_s_response_data;
static PyObject *__pyx_n_s_response_json;
static PyObject *__pyx_n_s_response_text;
static PyObject *__pyx_n_s_restore_tracking_states;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_s_retval;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_kp_u_rinkeby_0x;
static PyObject *__pyx_kp_u_ropsten_0x;
static PyObject *__pyx_n_s_rounding;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_s_decimal_NaN;
static PyObject *__pyx_n_s_safe_ensure_future;
static PyObject *__pyx_n_s_safe_gather;
static PyObject *__pyx_n_u_salt;
static PyObject *__pyx_n_s_saved_states;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_kp_u_sell;
static PyObject *__pyx_n_s_sell_2;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_u_senderAddress;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sign_hash;
static PyObject *__pyx_n_s_signature;
static PyObject *__pyx_n_u_signature;
static PyObject *__pyx_n_s_signatures;
static PyObject *__pyx_n_s_signed_limit_order;
static PyObject *__pyx_n_s_signed_market_order;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_soft_cancel_order;
static PyObject *__pyx_n_s_soft_cancel_result;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_spender;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_network;
static PyObject *__pyx_n_u_state;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_u_status;
static PyObject *__pyx_n_s_status_dict;
static PyObject *__pyx_n_s_status_polling_loop;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stop_network;
static PyObject *__pyx_n_s_stop_network_2;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_submit_limit_order;
static PyObject *__pyx_n_s_submit_market_order;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_u_takerAddress;
static PyObject *__pyx_n_u_takerAssetAmount;
static PyObject *__pyx_n_u_takerAssetData;
static PyObject *__pyx_n_u_takerFee;
static PyObject *__pyx_n_u_takerFeeAssetData;
static PyObject *__pyx_n_s_taker_asset_amount;
static PyObject *__pyx_n_s_taker_asset_data;
static PyObject *__pyx_n_s_taker_asset_fill_amount;
static PyObject *__pyx_n_s_taker_asset_fill_amounts;
static PyObject *__pyx_n_s_taker_asset_filled_amount;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_testrpc_0x;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_n_s_timeout_seconds;
static PyObject *__pyx_n_s_toChecksumAddress;
static PyObject *__pyx_n_s_toHex;
static PyObject *__pyx_n_s_to_integral_exact;
static PyObject *__pyx_n_s_to_json;
static PyObject *__pyx_n_s_to_limit_order;
static PyObject *__pyx_n_u_token_approval;
static PyObject *__pyx_kp_u_tokens;
static PyObject *__pyx_n_s_tokens_2;
static PyObject *__pyx_n_s_total_balances;
static PyObject *__pyx_n_s_total_base_token_amount;
static PyObject *__pyx_n_s_total_quote_token_amount;
static PyObject *__pyx_n_s_tracked_limit_order;
static PyObject *__pyx_n_s_tracked_limit_orders;
static PyObject *__pyx_n_s_tracked_market_order;
static PyObject *__pyx_n_s_tracked_market_orders;
static PyObject *__pyx_n_s_tracked_order;
static PyObject *__pyx_n_s_trade_type;
static PyObject *__pyx_n_s_trade_type_desc;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_trading_pair_rules;
static PyObject *__pyx_n_s_trading_pairs;
static PyObject *__pyx_n_s_trading_required;
static PyObject *__pyx_n_s_trading_rule;
static PyObject *__pyx_n_u_trading_rule_initialized;
static PyObject *__pyx_n_s_trading_rules;
static PyObject *__pyx_n_s_trading_rules_list;
static PyObject *__pyx_n_u_transactionHash;
static PyObject *__pyx_n_s_tx_hash;
static PyObject *__pyx_n_s_tx_hash_receipt;
static PyObject *__pyx_n_s_tx_hashes;
static PyObject *__pyx_n_s_type_str;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_unsigned_limit_order;
static PyObject *__pyx_n_s_unsigned_order;
static PyObject *__pyx_n_s_unwatch_order_hash;
static PyObject *__pyx_n_s_unwrap_eth;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_available_balances;
static PyObject *__pyx_n_s_update_balances;
static PyObject *__pyx_n_s_update_limit_order_status;
static PyObject *__pyx_n_s_update_market_order_status;
static PyObject *__pyx_n_s_update_single_limit_order;
static PyObject *__pyx_n_s_update_trading_rules;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_use_coordinator;
static PyObject *__pyx_n_s_valid_orders;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_n_s_wallet;
static PyObject *__pyx_n_s_watch_order_hash;
static PyObject *__pyx_n_s_web3;
static PyObject *__pyx_n_s_web3_exceptions;
static PyObject *__pyx_kp_u_will_be_pre_emptively_soft_canc;
static PyObject *__pyx_n_s_wrap_eth;
static PyObject *__pyx_n_u_zeroExOrder;
static PyObject *__pyx_n_s_zero_ex_order;
static PyObject *__pyx_n_s_zeroex_fill_watcher;
static PyObject *__pyx_n_s_zip;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_wallet, PyObject *__pyx_v_ethereum_rpc_url, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_use_coordinator, PyObject *__pyx_v_pre_emptive_soft_cancels, PyObject *__pyx_v_trading_required); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4reset_state(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_saved_states); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_8get_active_exchange_markets(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11_status_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_14_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16_update_available_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_18list_market(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_21_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_24_format_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_markets); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_26get_account_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_29get_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_hashes); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_get_order_updates(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_tracked_limit_orders); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_35_update_single_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_fill_event); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_37_update_limit_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_40_update_market_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_43_approval_tx_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_46_api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_url, PyObject *__pyx_v_data, PyObject *__pyx_v_headers); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_49get_order_hash_hex(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_unsigned_order); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_51get_zero_ex_signature(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_hash_hex); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_53submit_market_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_56submit_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, CYTHON_UNUSED PyObject *__pyx_v_is_coordinated, PyObject *__pyx_v_amount, PyObject *__pyx_v_price, PyObject *__pyx_v_expires); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_59cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_timeout_seconds); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_62execute_trade(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_price, PyObject *__pyx_v_expires); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_65cancel_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_68get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_70get_tx_hash_receipt(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_tx_hash); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_72list_account_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_75wrap_eth(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_amount); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_77unwrap_eth(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_amount); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_79start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_82_stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_84stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_87check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_90get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_92buy(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_94sell(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_96cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_98get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_100get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyUnicode_Type_capitalize = {0, 0, 0, 0, 0};
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_6_0;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_float_1e18;
static PyObject *__pyx_float_30_0;
static PyObject *__pyx_float_60_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_120;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_201;
static PyObject *__pyx_int_502;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_k__31;
static PyObject *__pyx_k__32;
static PyObject *__pyx_k__33;
static PyObject *__pyx_k__34;
static PyObject *__pyx_k__35;
static PyObject *__pyx_k__36;
static PyObject *__pyx_k__45;
static PyObject *__pyx_k__46;
static PyObject *__pyx_k__47;
static PyObject *__pyx_k__48;
static PyObject *__pyx_k__49;
static PyObject *__pyx_k__108;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network;
  PyObject *__pyx_kp_u_0;
  PyObject *__pyx_kp_u_0x;
  PyObject *__pyx_kp_u_0x000000000000000000000000000000;
  PyObject *__pyx_kp_u_0xf47261b00000000000000000000000;
  PyObject *__pyx_kp_u_1e;
  PyObject *__pyx_kp_u_1e_2;
  PyObject *__pyx_n_s_API_CALL_TIMEOUT;
  PyObject *__pyx_kp_u_API_returned_incorrect_values_fo;
  PyObject *__pyx_n_s_Any;
  PyObject *__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT;
  PyObject *__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE;
  PyObject *__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT;
  PyObject *__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE;
  PyObject *__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE;
  PyObject *__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT;
  PyObject *__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT;
  PyObject *__pyx_n_s_BUY;
  PyObject *__pyx_n_s_BambooRelayAPIOrderBookDataSourc;
  PyObject *__pyx_n_s_BambooRelayExchange;
  PyObject *__pyx_n_s_BambooRelayExchange___reduce_cyt;
  PyObject *__pyx_n_s_BambooRelayExchange___setstate_c;
  PyObject *__pyx_n_s_BambooRelayExchange__api_request;
  PyObject *__pyx_n_s_BambooRelayExchange__approval_tx;
  PyObject *__pyx_n_s_BambooRelayExchange__format_trad;
  PyObject *__pyx_n_s_BambooRelayExchange__get_order_u;
  PyObject *__pyx_n_s_BambooRelayExchange__status_poll;
  PyObject *__pyx_n_s_BambooRelayExchange__stop_networ;
  PyObject *__pyx_n_s_BambooRelayExchange__update_avai;
  PyObject *__pyx_n_s_BambooRelayExchange__update_bala;
  PyObject *__pyx_n_s_BambooRelayExchange__update_limi;
  PyObject *__pyx_n_s_BambooRelayExchange__update_mark;
  PyObject *__pyx_n_s_BambooRelayExchange__update_sing;
  PyObject *__pyx_n_s_BambooRelayExchange__update_trad;
  PyObject *__pyx_n_s_BambooRelayExchange_buy;
  PyObject *__pyx_n_s_BambooRelayExchange_cancel;
  PyObject *__pyx_n_s_BambooRelayExchange_cancel_all;
  PyObject *__pyx_n_s_BambooRelayExchange_cancel_order;
  PyObject *__pyx_n_s_BambooRelayExchange_check_networ;
  PyObject *__pyx_n_s_BambooRelayExchange_execute_trad;
  PyObject *__pyx_n_s_BambooRelayExchange_get_account;
  PyObject *__pyx_n_s_BambooRelayExchange_get_active_e;
  PyObject *__pyx_n_s_BambooRelayExchange_get_fee;
  PyObject *__pyx_n_s_BambooRelayExchange_get_order_bo;
  PyObject *__pyx_n_s_BambooRelayExchange_get_order_ha;
  PyObject *__pyx_n_s_BambooRelayExchange_get_orders;
  PyObject *__pyx_n_s_BambooRelayExchange_get_price;
  PyObject *__pyx_n_s_BambooRelayExchange_get_tx_hash;
  PyObject *__pyx_n_s_BambooRelayExchange_get_zero_ex;
  PyObject *__pyx_n_s_BambooRelayExchange_list_account;
  PyObject *__pyx_n_s_BambooRelayExchange_list_market;
  PyObject *__pyx_n_s_BambooRelayExchange_logger;
  PyObject *__pyx_n_s_BambooRelayExchange_reset_state;
  PyObject *__pyx_n_s_BambooRelayExchange_restore_trac;
  PyObject *__pyx_n_s_BambooRelayExchange_sell;
  PyObject *__pyx_n_s_BambooRelayExchange_start_networ;
  PyObject *__pyx_n_s_BambooRelayExchange_stop_network;
  PyObject *__pyx_n_s_BambooRelayExchange_submit_limit;
  PyObject *__pyx_n_s_BambooRelayExchange_submit_marke;
  PyObject *__pyx_n_s_BambooRelayExchange_unwrap_eth;
  PyObject *__pyx_n_s_BambooRelayExchange_wrap_eth;
  PyObject *__pyx_n_s_BambooRelayOrderBookTracker;
  PyObject *__pyx_n_s_BambooRelayTransactionTracker;
  PyObject *__pyx_n_s_BambooRelayTransactionTracker_2;
  PyObject *__pyx_n_s_BambooRelayTransactionTracker_3;
  PyObject *__pyx_n_s_BuyOrderCompleted;
  PyObject *__pyx_n_s_BuyOrderCompletedEvent;
  PyObject *__pyx_n_s_BuyOrderCreated;
  PyObject *__pyx_n_s_BuyOrderCreatedEvent;
  PyObject *__pyx_n_u_CANCELED;
  PyObject *__pyx_n_s_CANCEL_EXPIRY_TIME;
  PyObject *__pyx_n_u_COMPLETED;
  PyObject *__pyx_n_s_CONNECTED;
  PyObject *__pyx_n_s_CancellationResult;
  PyObject *__pyx_n_s_CancelledError;
  PyObject *__pyx_kp_u_Check_transaction_hash;
  PyObject *__pyx_n_s_ClientSession;
  PyObject *__pyx_kp_u_Could_not_get_token_approval_sta;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_n_s_Dict;
  PyObject *__pyx_kp_s_Dict_str_Any;
  PyObject *__pyx_kp_s_Dict_str_Dict_str_Any;
  PyObject *__pyx_kp_s_Dict_str_any;
  PyObject *__pyx_n_u_ETH;
  PyObject *__pyx_kp_u_Error_fetching_data_from;
  PyObject *__pyx_kp_u_Error_parsing_the_trading_pair;
  PyObject *__pyx_kp_u_Error_restoring_tracking_states;
  PyObject *__pyx_kp_u_Error_submitting;
  PyObject *__pyx_n_s_EthereumChain;
  PyObject *__pyx_n_s_Event;
  PyObject *__pyx_n_s_ExchangeBase;
  PyObject *__pyx_n_u_FILLED;
  PyObject *__pyx_kp_u_Failed_to_cancel_order;
  PyObject *__pyx_kp_u_Failed_to_cancel_order_on_Bamboo;
  PyObject *__pyx_kp_u_Failed_to_cancel_orders_on_Bambo;
  PyObject *__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2;
  PyObject *__pyx_kp_u_Failed_to_fetch_account_updates;
  PyObject *__pyx_kp_u_Failed_to_submit;
  PyObject *__pyx_kp_u_Filled;
  PyObject *__pyx_n_u_GET;
  PyObject *__pyx_n_s_HTTPProvider;
  PyObject *__pyx_kp_u_HTTP_status_is;
  PyObject *__pyx_n_s_HummingbotLogger;
  PyObject *__pyx_n_s_IOError;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_u_Incorrect_values_for_market_orde;
  PyObject *__pyx_kp_u_Invalid_trade_type_Aborting;
  PyObject *__pyx_n_s_KOVAN;
  PyObject *__pyx_n_s_LIMIT;
  PyObject *__pyx_n_s_LimitOrder;
  PyObject *__pyx_kp_u_Limit_orders_require_a_price_Abo;
  PyObject *__pyx_kp_u_Limit_orders_require_an_expirati;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_kp_s_List_BambooRelayInFlightOrder;
  PyObject *__pyx_kp_s_List_CancellationResult;
  PyObject *__pyx_kp_s_List_Dict_str_Any;
  PyObject *__pyx_kp_s_List_TradingRule;
  PyObject *__pyx_kp_s_List_str;
  PyObject *__pyx_n_s_MAIN_NET;
  PyObject *__pyx_n_s_MARKET;
  PyObject *__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT;
  PyObject *__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T;
  PyObject *__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN;
  PyObject *__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT;
  PyObject *__pyx_n_s_MarketEvent;
  PyObject *__pyx_n_s_MarketOrderFailureEvent;
  PyObject *__pyx_n_s_NOT_CONNECTED;
  PyObject *__pyx_n_u_NaN;
  PyObject *__pyx_n_s_NetworkStatus;
  PyObject *__pyx_kp_u_No_order_book_exists_for;
  PyObject *__pyx_kp_u_No_valid_orders_found_for_amount;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_ORDER_CREATION_BACKOFF_TIME;
  PyObject *__pyx_n_s_ORDER_EXPIRY_TIME;
  PyObject *__pyx_n_s_Optional;
  PyObject *__pyx_kp_s_Optional_Dict_str_Any;
  PyObject *__pyx_kp_s_Optional_Dict_str_str;
  PyObject *__pyx_n_s_Order;
  PyObject *__pyx_n_s_OrderBook;
  PyObject *__pyx_n_s_OrderCancelled;
  PyObject *__pyx_n_s_OrderCancelledEvent;
  PyObject *__pyx_n_s_OrderExpired;
  PyObject *__pyx_n_s_OrderExpiredEvent;
  PyObject *__pyx_n_s_OrderFailure;
  PyObject *__pyx_n_s_OrderFilled;
  PyObject *__pyx_n_s_OrderFilledEvent;
  PyObject *__pyx_n_s_OrderType;
  PyObject *__pyx_kp_u_Order_not_found_in_tracked_orde;
  PyObject *__pyx_n_s_OrderedDict;
  PyObject *__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME;
  PyObject *__pyx_n_s_RINKEBY;
  PyObject *__pyx_n_s_ROPSTEN;
  PyObject *__pyx_n_s_ROUND_FLOOR;
  PyObject *__pyx_n_s_ReceivedAsset;
  PyObject *__pyx_n_s_SELL;
  PyObject *__pyx_n_s_SellOrderCompleted;
  PyObject *__pyx_n_s_SellOrderCompletedEvent;
  PyObject *__pyx_n_s_SellOrderCreated;
  PyObject *__pyx_n_s_SellOrderCreatedEvent;
  PyObject *__pyx_kp_u_Server_Error_Bad_Gateway;
  PyObject *__pyx_kp_u_Skipping;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_kp_u_The_limit_buy_order;
  PyObject *__pyx_kp_u_The_limit_order;
  PyObject *__pyx_kp_u_The_limit_orders;
  PyObject *__pyx_kp_u_The_limit_sell_order;
  PyObject *__pyx_kp_u_The_market_buy_order;
  PyObject *__pyx_kp_u_The_market_order;
  PyObject *__pyx_kp_u_The_market_sell_order;
  PyObject *__pyx_n_s_TradeFee;
  PyObject *__pyx_n_s_TradeType;
  PyObject *__pyx_n_s_TransactionNotFound;
  PyObject *__pyx_n_s_Tuple;
  PyObject *__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo;
  PyObject *__pyx_kp_s_Tuple_str_ZeroExOrder;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL;
  PyObject *__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA;
  PyObject *__pyx_n_s_UPDATE_RULES_INTERVAL;
  PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde;
  PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde_2;
  PyObject *__pyx_kp_u_Unexpected_error_while_fetching;
  PyObject *__pyx_kp_u_Unexpected_error_while_fetching_2;
  PyObject *__pyx_kp_u_Unrecognized_transaction_status;
  PyObject *__pyx_kp_u_User_Agent;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_Web3;
  PyObject *__pyx_n_s_Web3Wallet;
  PyObject *__pyx_n_s_ZEROEX_TEST;
  PyObject *__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES;
  PyObject *__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST;
  PyObject *__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY;
  PyObject *__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS;
  PyObject *__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR;
  PyObject *__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI;
  PyObject *__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY;
  PyObject *__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS;
  PyObject *__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR;
  PyObject *__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI;
  PyObject *__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY;
  PyObject *__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS;
  PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR;
  PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI;
  PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY;
  PyObject *__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS;
  PyObject *__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS;
  PyObject *__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR;
  PyObject *__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY;
  PyObject *__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS;
  PyObject *__pyx_n_s_ZeroExCoordinator;
  PyObject *__pyx_n_s_ZeroExExchange;
  PyObject *__pyx_n_s_ZeroExFillEvent;
  PyObject *__pyx_n_s_ZeroExOrder;
  PyObject *__pyx_n_s__125;
  PyObject *__pyx_kp_u__13;
  PyObject *__pyx_kp_u__15;
  PyObject *__pyx_kp_u__20;
  PyObject *__pyx_kp_u__26;
  PyObject *__pyx_kp_u__41;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_n_s__52;
  PyObject *__pyx_kp_u_according_to_order_status_API;
  PyObject *__pyx_kp_u_according_to_the_RPC_transactio;
  PyObject *__pyx_n_u_account_available_balance;
  PyObject *__pyx_n_u_account_balance;
  PyObject *__pyx_n_s_account_order;
  PyObject *__pyx_n_s_account_orders_list;
  PyObject *__pyx_n_s_account_orders_map;
  PyObject *__pyx_kp_u_accounts;
  PyObject *__pyx_n_s_active_asks;
  PyObject *__pyx_n_s_active_bids;
  PyObject *__pyx_n_s_address;
  PyObject *__pyx_n_s_aenter;
  PyObject *__pyx_n_s_aexit;
  PyObject *__pyx_n_s_aiohttp;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_amount;
  PyObject *__pyx_n_s_amount_to_fill;
  PyObject *__pyx_kp_u_and_price;
  PyObject *__pyx_n_s_apiOrder;
  PyObject *__pyx_n_s_api_request;
  PyObject *__pyx_n_s_app_warning_msg;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_approval_tx_polling_loop;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_async_timeout;
  PyObject *__pyx_n_s_asyncio;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_asyncio_tasks;
  PyObject *__pyx_n_s_avg_price;
  PyObject *__pyx_n_s_await;
  PyObject *__pyx_n_s_balance;
  PyObject *__pyx_n_u_bamboo_relay;
  PyObject *__pyx_n_u_baseTokenDecimals;
  PyObject *__pyx_n_s_base_amount_with_decimals;
  PyObject *__pyx_n_s_base_asset;
  PyObject *__pyx_n_s_base_asset_decimals;
  PyObject *__pyx_n_s_base_asset_increment;
  PyObject *__pyx_n_s_base_currency;
  PyObject *__pyx_n_s_base_token_asset_data;
  PyObject *__pyx_n_s_batch_fill_orders;
  PyObject *__pyx_n_s_batch_soft_cancel_orders;
  PyObject *__pyx_n_u_blockNumber;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_n_s_brm_logger;
  PyObject *__pyx_kp_u_buy;
  PyObject *__pyx_n_s_buy_2;
  PyObject *__pyx_n_s_c_did_timeout_tx;
  PyObject *__pyx_n_s_calculated_price;
  PyObject *__pyx_n_s_cancel;
  PyObject *__pyx_n_s_cancel_all;
  PyObject *__pyx_n_s_cancel_order;
  PyObject *__pyx_n_s_cancel_orders_up_to;
  PyObject *__pyx_n_s_capitalize;
  PyObject *__pyx_n_s_ceil;
  PyObject *__pyx_n_s_chain;
  PyObject *__pyx_n_u_chainId;
  PyObject *__pyx_n_s_chain_id;
  PyObject *__pyx_n_s_check_and_fix_approval_amounts;
  PyObject *__pyx_n_s_check_network;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_clear;
  PyObject *__pyx_n_s_client;
  PyObject *__pyx_n_s_client_order_id;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_kp_u_could_not_be_found_according_to;
  PyObject *__pyx_n_s_currency;
  PyObject *__pyx_n_s_current_backend;
  PyObject *__pyx_n_s_current_timestamp;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_deepcopy;
  PyObject *__pyx_n_s_deque;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_erc20_tokens;
  PyObject *__pyx_n_s_err_msg;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_estimate_fee;
  PyObject *__pyx_n_s_eth;
  PyObject *__pyx_n_s_eth_utils;
  PyObject *__pyx_n_s_ethereum_rpc_url;
  PyObject *__pyx_n_s_ex;
  PyObject *__pyx_n_s_exc_info;
  PyObject *__pyx_n_u_exchangeAddress;
  PyObject *__pyx_n_s_exchange_address;
  PyObject *__pyx_n_s_exchange_order_id;
  PyObject *__pyx_n_s_execute_trade;
  PyObject *__pyx_n_s_executed_amount_quote;
  PyObject *__pyx_n_u_expirationTimeSeconds;
  PyObject *__pyx_kp_u_expiration_time;
  PyObject *__pyx_n_u_expiration_ts;
  PyObject *__pyx_n_s_expires;
  PyObject *__pyx_n_u_feeRecipientAddress;
  PyObject *__pyx_n_s_fill;
  PyObject *__pyx_n_s_fill_base_token_amount;
  PyObject *__pyx_n_s_fill_event;
  PyObject *__pyx_n_s_fill_order;
  PyObject *__pyx_n_u_filledBaseTokenAmount;
  PyObject *__pyx_n_u_filledQuoteTokenAmount;
  PyObject *__pyx_n_u_fills;
  PyObject *__pyx_n_s_fix_signature;
  PyObject *__pyx_n_s_fixed_signature;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_floor;
  PyObject *__pyx_kp_u_for_more_details;
  PyObject *__pyx_n_s_format_trading_rules;
  PyObject *__pyx_n_s_from_json;
  PyObject *__pyx_n_u_gasUsed;
  PyObject *__pyx_n_s_gas_used;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_generate_order_hash_hex;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_u_get;
  PyObject *__pyx_n_s_getLogger;
  PyObject *__pyx_n_s_getTransactionReceipt;
  PyObject *__pyx_n_s_get_account_orders;
  PyObject *__pyx_n_s_get_active_exchange_markets;
  PyObject *__pyx_n_s_get_active_order_tracker;
  PyObject *__pyx_n_s_get_all_balances;
  PyObject *__pyx_n_s_get_event_loop;
  PyObject *__pyx_n_s_get_fee;
  PyObject *__pyx_n_s_get_order_book;
  PyObject *__pyx_n_s_get_order_hash_hex;
  PyObject *__pyx_n_s_get_order_updates;
  PyObject *__pyx_n_s_get_orders;
  PyObject *__pyx_n_s_get_price;
  PyObject *__pyx_n_s_get_tracking_nonce;
  PyObject *__pyx_n_s_get_tx_hash_receipt;
  PyObject *__pyx_n_s_get_zero_ex_signature;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_has_been_cancelled;
  PyObject *__pyx_kp_u_has_been_hard_cancelled_accordi;
  PyObject *__pyx_kp_u_has_been_soft_cancelled_accordi;
  PyObject *__pyx_kp_u_has_cancelled_according_to_orde;
  PyObject *__pyx_kp_u_has_completed_according_to_orde;
  PyObject *__pyx_kp_u_has_completed_according_to_the;
  PyObject *__pyx_kp_u_has_completed_according_to_tran;
  PyObject *__pyx_n_s_has_coordinated_order;
  PyObject *__pyx_kp_u_has_expired_according_to_order;
  PyObject *__pyx_kp_u_has_failed_according_to_order_s;
  PyObject *__pyx_kp_u_has_failed_according_to_transact;
  PyObject *__pyx_kp_u_has_had_it_s_available_amount_r;
  PyObject *__pyx_n_s_hash;
  PyObject *__pyx_n_s_hash_index;
  PyObject *__pyx_n_s_hashes;
  PyObject *__pyx_kp_u_have_been_hard_cancelled_accordi;
  PyObject *__pyx_kp_u_have_been_soft_cancelled_accordi;
  PyObject *__pyx_n_s_headers;
  PyObject *__pyx_n_s_hexstr;
  PyObject *__pyx_n_s_http_method;
  PyObject *__pyx_n_u_hummingbot;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_2;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_3;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_4;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba_5;
  PyObject *__pyx_kp_s_hummingbot_connector_exchange_ba_6;
  PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
  PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
  PyObject *__pyx_n_s_hummingbot_core_event_events;
  PyObject *__pyx_n_s_hummingbot_core_network_iterator;
  PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
  PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
  PyObject *__pyx_n_s_hummingbot_core_utils_tracking_n;
  PyObject *__pyx_n_s_hummingbot_logger;
  PyObject *__pyx_n_s_hummingbot_wallet_ethereum_ether;
  PyObject *__pyx_n_s_hummingbot_wallet_ethereum_web3;
  PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero;
  PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero_2;
  PyObject *__pyx_n_s_hummingbot_wallet_ethereum_zero_3;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_u_id;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_in_flight_limit_orders;
  PyObject *__pyx_n_s_in_flight_market_orders;
  PyObject *__pyx_n_s_incomplete_order_ids;
  PyObject *__pyx_n_s_incomplete_orders;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_inspect;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_u_isCoordinated;
  PyObject *__pyx_n_s_is_buy;
  PyObject *__pyx_n_s_is_cancelled;
  PyObject *__pyx_n_s_is_coordinated;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_done;
  PyObject *__pyx_n_s_is_expired;
  PyObject *__pyx_n_s_is_failure;
  PyObject *__pyx_n_s_is_finite;
  PyObject *__pyx_kp_u_is_greater_than_requested_amoun;
  PyObject *__pyx_kp_u_is_greater_than_the_maximum_ord;
  PyObject *__pyx_kp_u_is_lower_than_the_minimum_order;
  PyObject *__pyx_n_s_is_nan;
  PyObject *__pyx_n_s_is_set;
  PyObject *__pyx_kp_u_is_worse_than_requested_price;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isnan;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_jsdict_order_to_struct;
  PyObject *__pyx_n_s_json;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_kp_u_kovan_0x;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_latest_salt;
  PyObject *__pyx_n_u_limit_orders;
  PyObject *__pyx_n_s_list_account_orders;
  PyObject *__pyx_n_s_list_market;
  PyObject *__pyx_n_s_locked_balances;
  PyObject *__pyx_n_s_log10;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_n_s_lower;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_kp_u_main_0x;
  PyObject *__pyx_n_u_makerAddress;
  PyObject *__pyx_n_u_makerAssetAmount;
  PyObject *__pyx_n_u_makerAssetData;
  PyObject *__pyx_n_u_makerFee;
  PyObject *__pyx_n_u_makerFeeAssetData;
  PyObject *__pyx_n_s_maker_asset_amount;
  PyObject *__pyx_n_s_maker_asset_data;
  PyObject *__pyx_n_s_maker_asset_filled_amount;
  PyObject *__pyx_n_s_market;
  PyObject *__pyx_n_u_market_orders;
  PyObject *__pyx_n_s_markets;
  PyObject *__pyx_kp_u_markets_perPage_1000_include_ba;
  PyObject *__pyx_n_s_math;
  PyObject *__pyx_n_u_maxOrderSize;
  PyObject *__pyx_n_s_max_base_amount_with_decimals;
  PyObject *__pyx_n_s_max_order_size;
  PyObject *__pyx_n_s_max_price_significant_digits;
  PyObject *__pyx_n_u_minOrderSize;
  PyObject *__pyx_n_s_min_base_amount_increment;
  PyObject *__pyx_n_s_min_order_size;
  PyObject *__pyx_n_s_min_price_increment;
  PyObject *__pyx_n_s_min_quote_amount_increment;
  PyObject *__pyx_kp_u_must_be_greater_than_current_ti;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_network;
  PyObject *__pyx_n_s_network_status;
  PyObject *__pyx_n_s_null_address;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_o;
  PyObject *__pyx_kp_u_of_the_limit_order;
  PyObject *__pyx_n_s_oid;
  PyObject *__pyx_n_s_order;
  PyObject *__pyx_n_u_orderHash;
  PyObject *__pyx_kp_u_order_amount;
  PyObject *__pyx_n_s_order_books;
  PyObject *__pyx_n_u_order_books_initialized;
  PyObject *__pyx_n_s_order_filled_base_token_amount;
  PyObject *__pyx_n_s_order_filled_quote_token_amount;
  PyObject *__pyx_n_s_order_hash;
  PyObject *__pyx_n_s_order_hash_hex;
  PyObject *__pyx_n_s_order_hashes;
  PyObject *__pyx_n_s_order_id;
  PyObject *__pyx_n_s_order_ids;
  PyObject *__pyx_n_s_order_price;
  PyObject *__pyx_n_s_order_remaining_base_token_amoun;
  PyObject *__pyx_n_s_order_side;
  PyObject *__pyx_n_s_order_state;
  PyObject *__pyx_n_s_order_struct;
  PyObject *__pyx_n_s_order_timestamp_diff;
  PyObject *__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth;
  PyObject *__pyx_kp_u_order_to_Bamboo_Relay_for;
  PyObject *__pyx_n_s_order_type;
  PyObject *__pyx_n_s_order_update;
  PyObject *__pyx_n_s_order_updates;
  PyObject *__pyx_kp_u_orders;
  PyObject *__pyx_n_s_orders_2;
  PyObject *__pyx_kp_u_orders_hashes;
  PyObject *__pyx_kp_u_out_of;
  PyObject *__pyx_n_s_owner;
  PyObject *__pyx_n_s_pair_split;
  PyObject *__pyx_n_s_poll_interval;
  PyObject *__pyx_n_s_popleft;
  PyObject *__pyx_n_u_post;
  PyObject *__pyx_n_s_pre_emptive_soft_cancels;
  PyObject *__pyx_n_s_previous_amount_available;
  PyObject *__pyx_n_s_previous_is_cancelled;
  PyObject *__pyx_n_s_previous_is_done;
  PyObject *__pyx_n_s_previous_is_expired;
  PyObject *__pyx_n_s_previous_is_failure;
  PyObject *__pyx_n_s_price;
  PyObject *__pyx_n_s_protocol_fee;
  PyObject *__pyx_n_s_protocol_fee_amount;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_q_amt;
  PyObject *__pyx_n_s_q_price;
  PyObject *__pyx_n_u_quoteIncrement;
  PyObject *__pyx_n_u_quoteTokenDecimals;
  PyObject *__pyx_n_s_quote_amount;
  PyObject *__pyx_n_s_quote_amount_with_decimals;
  PyObject *__pyx_n_s_quote_asset;
  PyObject *__pyx_n_s_quote_asset_decimals;
  PyObject *__pyx_n_s_quote_asset_increment;
  PyObject *__pyx_n_s_quote_currency;
  PyObject *__pyx_n_s_quote_token_asset_data;
  PyObject *__pyx_n_s_ready;
  PyObject *__pyx_n_s_receipt;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_u_remainingBaseTokenAmount;
  PyObject *__pyx_n_u_remainingQuoteTokenAmount;
  PyObject *__pyx_n_s_remaining_base_token_amount;
  PyObject *__pyx_n_s_remaining_quote_token_amount;
  PyObject *__pyx_n_s_remove;
  PyObject *__pyx_n_s_remove_0x_prefix;
  PyObject *__pyx_n_s_request;
  PyObject *__pyx_n_s_reset_state;
  PyObject *__pyx_n_s_response;
  PyObject *__pyx_n_s_response_data;
  PyObject *__pyx_n_s_response_json;
  PyObject *__pyx_n_s_response_text;
  PyObject *__pyx_n_s_restore_tracking_states;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_retval;
  PyObject *__pyx_n_s_reverse;
  PyObject *__pyx_kp_u_rinkeby_0x;
  PyObject *__pyx_kp_u_ropsten_0x;
  PyObject *__pyx_n_s_rounding;
  PyObject *__pyx_n_s_s_decimal_0;
  PyObject *__pyx_n_s_s_decimal_NaN;
  PyObject *__pyx_n_s_safe_ensure_future;
  PyObject *__pyx_n_s_safe_gather;
  PyObject *__pyx_n_u_salt;
  PyObject *__pyx_n_s_saved_states;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__events_cannot_be_converted;
  PyObject *__pyx_kp_u_sell;
  PyObject *__pyx_n_s_sell_2;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_u_senderAddress;
  PyObject *__pyx_n_s_set;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_sign_hash;
  PyObject *__pyx_n_s_signature;
  PyObject *__pyx_n_u_signature;
  PyObject *__pyx_n_s_signatures;
  PyObject *__pyx_n_s_signed_limit_order;
  PyObject *__pyx_n_s_signed_market_order;
  PyObject *__pyx_n_s_sleep;
  PyObject *__pyx_n_s_soft_cancel_order;
  PyObject *__pyx_n_s_soft_cancel_result;
  PyObject *__pyx_n_s_sorted;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_spender;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_start_network;
  PyObject *__pyx_n_u_state;
  PyObject *__pyx_n_s_status;
  PyObject *__pyx_n_u_status;
  PyObject *__pyx_n_s_status_dict;
  PyObject *__pyx_n_s_status_polling_loop;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_stop_network;
  PyObject *__pyx_n_s_stop_network_2;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_submit_limit_order;
  PyObject *__pyx_n_s_submit_market_order;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_u_takerAddress;
  PyObject *__pyx_n_u_takerAssetAmount;
  PyObject *__pyx_n_u_takerAssetData;
  PyObject *__pyx_n_u_takerFee;
  PyObject *__pyx_n_u_takerFeeAssetData;
  PyObject *__pyx_n_s_taker_asset_amount;
  PyObject *__pyx_n_s_taker_asset_data;
  PyObject *__pyx_n_s_taker_asset_fill_amount;
  PyObject *__pyx_n_s_taker_asset_fill_amounts;
  PyObject *__pyx_n_s_taker_asset_filled_amount;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_kp_u_testrpc_0x;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_s_timeout;
  PyObject *__pyx_n_s_timeout_seconds;
  PyObject *__pyx_n_s_toChecksumAddress;
  PyObject *__pyx_n_s_toHex;
  PyObject *__pyx_n_s_to_integral_exact;
  PyObject *__pyx_n_s_to_json;
  PyObject *__pyx_n_s_to_limit_order;
  PyObject *__pyx_n_u_token_approval;
  PyObject *__pyx_kp_u_tokens;
  PyObject *__pyx_n_s_tokens_2;
  PyObject *__pyx_n_s_total_balances;
  PyObject *__pyx_n_s_total_base_token_amount;
  PyObject *__pyx_n_s_total_quote_token_amount;
  PyObject *__pyx_n_s_tracked_limit_order;
  PyObject *__pyx_n_s_tracked_limit_orders;
  PyObject *__pyx_n_s_tracked_market_order;
  PyObject *__pyx_n_s_tracked_market_orders;
  PyObject *__pyx_n_s_tracked_order;
  PyObject *__pyx_n_s_trade_type;
  PyObject *__pyx_n_s_trade_type_desc;
  PyObject *__pyx_n_s_trading_pair;
  PyObject *__pyx_n_s_trading_pair_rules;
  PyObject *__pyx_n_s_trading_pairs;
  PyObject *__pyx_n_s_trading_required;
  PyObject *__pyx_n_s_trading_rule;
  PyObject *__pyx_n_u_trading_rule_initialized;
  PyObject *__pyx_n_s_trading_rules;
  PyObject *__pyx_n_s_trading_rules_list;
  PyObject *__pyx_n_u_transactionHash;
  PyObject *__pyx_n_s_tx_hash;
  PyObject *__pyx_n_s_tx_hash_receipt;
  PyObject *__pyx_n_s_tx_hashes;
  PyObject *__pyx_n_s_type_str;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_unsigned_limit_order;
  PyObject *__pyx_n_s_unsigned_order;
  PyObject *__pyx_n_s_unwatch_order_hash;
  PyObject *__pyx_n_s_unwrap_eth;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_update_available_balances;
  PyObject *__pyx_n_s_update_balances;
  PyObject *__pyx_n_s_update_limit_order_status;
  PyObject *__pyx_n_s_update_market_order_status;
  PyObject *__pyx_n_s_update_single_limit_order;
  PyObject *__pyx_n_s_update_trading_rules;
  PyObject *__pyx_n_s_url;
  PyObject *__pyx_n_s_use_coordinator;
  PyObject *__pyx_n_s_valid_orders;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_wait;
  PyObject *__pyx_n_s_wallet;
  PyObject *__pyx_n_s_watch_order_hash;
  PyObject *__pyx_n_s_web3;
  PyObject *__pyx_n_s_web3_exceptions;
  PyObject *__pyx_kp_u_will_be_pre_emptively_soft_canc;
  PyObject *__pyx_n_s_wrap_eth;
  PyObject *__pyx_n_u_zeroExOrder;
  PyObject *__pyx_n_s_zero_ex_order;
  PyObject *__pyx_n_s_zeroex_fill_watcher;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_6_0;
  PyObject *__pyx_float_10_0;
  PyObject *__pyx_float_1e18;
  PyObject *__pyx_float_30_0;
  PyObject *__pyx_float_60_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_120;
  PyObject *__pyx_int_200;
  PyObject *__pyx_int_201;
  PyObject *__pyx_int_502;
  PyObject *__pyx_k__31;
  PyObject *__pyx_k__32;
  PyObject *__pyx_k__33;
  PyObject *__pyx_k__34;
  PyObject *__pyx_k__35;
  PyObject *__pyx_k__36;
  PyObject *__pyx_k__45;
  PyObject *__pyx_k__46;
  PyObject *__pyx_k__47;
  PyObject *__pyx_k__48;
  PyObject *__pyx_k__49;
  PyObject *__pyx_k__108;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_tuple__99;
  PyObject *__pyx_codeobj__2;
  PyObject *__pyx_codeobj__3;
  PyObject *__pyx_codeobj__6;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__117;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__121;
  PyObject *__pyx_tuple__123;
  PyObject *__pyx_codeobj__11;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__124;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0x);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0x000000000000000000000000000000);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0xf47261b00000000000000000000000);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1e_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_API_CALL_TIMEOUT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_API_returned_incorrect_values_fo);
  Py_CLEAR(clear_module_state->__pyx_n_s_Any);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT);
  Py_CLEAR(clear_module_state->__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayAPIOrderBookDataSourc);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__api_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__approval_tx);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__format_trad);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__get_order_u);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__status_poll);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__stop_networ);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_avai);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_bala);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_limi);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_mark);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_sing);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange__update_trad);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_check_networ);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_execute_trad);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_account);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_active_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_order_bo);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_order_ha);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_tx_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_get_zero_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_list_account);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_list_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_reset_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_restore_trac);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_start_networ);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_stop_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_submit_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_submit_marke);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_unwrap_eth);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayExchange_wrap_eth);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayOrderBookTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayTransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayTransactionTracker_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_BambooRelayTransactionTracker_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompletedEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreatedEvent);
  Py_CLEAR(clear_module_state->__pyx_n_u_CANCELED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CANCEL_EXPIRY_TIME);
  Py_CLEAR(clear_module_state->__pyx_n_u_COMPLETED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancellationResult);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancelledError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Check_transaction_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClientSession);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Could_not_get_token_approval_sta);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dict);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_any);
  Py_CLEAR(clear_module_state->__pyx_n_u_ETH);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_fetching_data_from);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_parsing_the_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_restoring_tracking_states);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_submitting);
  Py_CLEAR(clear_module_state->__pyx_n_s_EthereumChain);
  Py_CLEAR(clear_module_state->__pyx_n_s_Event);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_n_u_FILLED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_order_on_Bamboo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_fetch_account_updates);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_submit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Filled);
  Py_CLEAR(clear_module_state->__pyx_n_u_GET);
  Py_CLEAR(clear_module_state->__pyx_n_s_HTTPProvider);
  Py_CLEAR(clear_module_state->__pyx_kp_u_HTTP_status_is);
  Py_CLEAR(clear_module_state->__pyx_n_s_HummingbotLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_IOError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Incorrect_values_for_market_orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_trade_type_Aborting);
  Py_CLEAR(clear_module_state->__pyx_n_s_KOVAN);
  Py_CLEAR(clear_module_state->__pyx_n_s_LIMIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Limit_orders_require_a_price_Abo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Limit_orders_require_an_expirati);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_BambooRelayInFlightOrder);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_CancellationResult);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_TradingRule);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_MAIN_NET);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketOrderFailureEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_NOT_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_n_u_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_NetworkStatus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_order_book_exists_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_valid_orders_found_for_amount);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_CREATION_BACKOFF_TIME);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_EXPIRY_TIME);
  Py_CLEAR(clear_module_state->__pyx_n_s_Optional);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Optional_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Optional_Dict_str_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_Order);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelledEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpired);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpiredEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailure);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderType);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Order_not_found_in_tracked_orde);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderedDict);
  Py_CLEAR(clear_module_state->__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME);
  Py_CLEAR(clear_module_state->__pyx_n_s_RINKEBY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ROPSTEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_ROUND_FLOOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReceivedAsset);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompletedEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreatedEvent);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Server_Error_Bad_Gateway);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Skipping);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_limit_buy_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_limit_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_limit_sell_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_market_buy_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_market_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_market_sell_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeFee);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionNotFound);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tuple);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Tuple_str_ZeroExOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA);
  Py_CLEAR(clear_module_state->__pyx_n_s_UPDATE_RULES_INTERVAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_while_fetching);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_while_fetching_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unrecognized_transaction_status);
  Py_CLEAR(clear_module_state->__pyx_kp_u_User_Agent);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Web3);
  Py_CLEAR(clear_module_state->__pyx_n_s_Web3Wallet);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZEROEX_TEST);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZeroExCoordinator);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZeroExExchange);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZeroExFillEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZeroExOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s__125);
  Py_CLEAR(clear_module_state->__pyx_kp_u__13);
  Py_CLEAR(clear_module_state->__pyx_kp_u__15);
  Py_CLEAR(clear_module_state->__pyx_kp_u__20);
  Py_CLEAR(clear_module_state->__pyx_kp_u__26);
  Py_CLEAR(clear_module_state->__pyx_kp_u__41);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_n_s__52);
  Py_CLEAR(clear_module_state->__pyx_kp_u_according_to_order_status_API);
  Py_CLEAR(clear_module_state->__pyx_kp_u_according_to_the_RPC_transactio);
  Py_CLEAR(clear_module_state->__pyx_n_u_account_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_u_account_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_account_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_account_orders_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_account_orders_map);
  Py_CLEAR(clear_module_state->__pyx_kp_u_accounts);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_asks);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_bids);
  Py_CLEAR(clear_module_state->__pyx_n_s_address);
  Py_CLEAR(clear_module_state->__pyx_n_s_aenter);
  Py_CLEAR(clear_module_state->__pyx_n_s_aexit);
  Py_CLEAR(clear_module_state->__pyx_n_s_aiohttp);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount_to_fill);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_apiOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_api_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_app_warning_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_approval_tx_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_async_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_tasks);
  Py_CLEAR(clear_module_state->__pyx_n_s_avg_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_await);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance);
  Py_CLEAR(clear_module_state->__pyx_n_u_bamboo_relay);
  Py_CLEAR(clear_module_state->__pyx_n_u_baseTokenDecimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_amount_with_decimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset_decimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_token_asset_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_batch_fill_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_batch_soft_cancel_orders);
  Py_CLEAR(clear_module_state->__pyx_n_u_blockNumber);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_n_s_brm_logger);
  Py_CLEAR(clear_module_state->__pyx_kp_u_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_did_timeout_tx);
  Py_CLEAR(clear_module_state->__pyx_n_s_calculated_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_orders_up_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_capitalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_ceil);
  Py_CLEAR(clear_module_state->__pyx_n_s_chain);
  Py_CLEAR(clear_module_state->__pyx_n_u_chainId);
  Py_CLEAR(clear_module_state->__pyx_n_s_chain_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_and_fix_approval_amounts);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_client);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_could_not_be_found_according_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_backend);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_deepcopy);
  Py_CLEAR(clear_module_state->__pyx_n_s_deque);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_erc20_tokens);
  Py_CLEAR(clear_module_state->__pyx_n_s_err_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_estimate_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_eth);
  Py_CLEAR(clear_module_state->__pyx_n_s_eth_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_ethereum_rpc_url);
  Py_CLEAR(clear_module_state->__pyx_n_s_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_info);
  Py_CLEAR(clear_module_state->__pyx_n_u_exchangeAddress);
  Py_CLEAR(clear_module_state->__pyx_n_s_exchange_address);
  Py_CLEAR(clear_module_state->__pyx_n_s_exchange_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_trade);
  Py_CLEAR(clear_module_state->__pyx_n_s_executed_amount_quote);
  Py_CLEAR(clear_module_state->__pyx_n_u_expirationTimeSeconds);
  Py_CLEAR(clear_module_state->__pyx_kp_u_expiration_time);
  Py_CLEAR(clear_module_state->__pyx_n_u_expiration_ts);
  Py_CLEAR(clear_module_state->__pyx_n_s_expires);
  Py_CLEAR(clear_module_state->__pyx_n_u_feeRecipientAddress);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_base_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_event);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_order);
  Py_CLEAR(clear_module_state->__pyx_n_u_filledBaseTokenAmount);
  Py_CLEAR(clear_module_state->__pyx_n_u_filledQuoteTokenAmount);
  Py_CLEAR(clear_module_state->__pyx_n_u_fills);
  Py_CLEAR(clear_module_state->__pyx_n_s_fix_signature);
  Py_CLEAR(clear_module_state->__pyx_n_s_fixed_signature);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_floor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_for_more_details);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_json);
  Py_CLEAR(clear_module_state->__pyx_n_u_gasUsed);
  Py_CLEAR(clear_module_state->__pyx_n_s_gas_used);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_generate_order_hash_hex);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_u_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_getTransactionReceipt);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_account_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_active_order_tracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_all_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_event_loop);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_order_book);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_order_hash_hex);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_order_updates);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_tracking_nonce);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_tx_hash_receipt);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_zero_ex_signature);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_been_cancelled);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_been_hard_cancelled_accordi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_been_soft_cancelled_accordi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_cancelled_according_to_orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_tran);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_coordinated_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_expired_according_to_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_failed_according_to_order_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_failed_according_to_transact);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_had_it_s_available_amount_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_hash_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_hashes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_have_been_hard_cancelled_accordi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_have_been_soft_cancelled_accordi);
  Py_CLEAR(clear_module_state->__pyx_n_s_headers);
  Py_CLEAR(clear_module_state->__pyx_n_s_hexstr);
  Py_CLEAR(clear_module_state->__pyx_n_s_http_method);
  Py_CLEAR(clear_module_state->__pyx_n_u_hummingbot);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_5);
  Py_CLEAR(clear_module_state->__pyx_kp_s_hummingbot_connector_exchange_ba_6);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_async_util);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_estimate_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_tracking_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_wallet_ethereum_ether);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_wallet_ethereum_web3);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_u_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_flight_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_flight_market_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_incomplete_order_ids);
  Py_CLEAR(clear_module_state->__pyx_n_s_incomplete_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_inspect);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_u_isCoordinated);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_cancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coordinated);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_done);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_expired);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_failure);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_finite);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_greater_than_requested_amoun);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_greater_than_the_maximum_ord);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_lower_than_the_minimum_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_nan);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_set);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_worse_than_requested_price);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isnan);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_jsdict_order_to_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_kp_u_kovan_0x);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_latest_salt);
  Py_CLEAR(clear_module_state->__pyx_n_u_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_account_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_locked_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_log10);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_n_s_lower);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_kp_u_main_0x);
  Py_CLEAR(clear_module_state->__pyx_n_u_makerAddress);
  Py_CLEAR(clear_module_state->__pyx_n_u_makerAssetAmount);
  Py_CLEAR(clear_module_state->__pyx_n_u_makerAssetData);
  Py_CLEAR(clear_module_state->__pyx_n_u_makerFee);
  Py_CLEAR(clear_module_state->__pyx_n_u_makerFeeAssetData);
  Py_CLEAR(clear_module_state->__pyx_n_s_maker_asset_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_maker_asset_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_maker_asset_filled_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_market);
  Py_CLEAR(clear_module_state->__pyx_n_u_market_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_markets_perPage_1000_include_ba);
  Py_CLEAR(clear_module_state->__pyx_n_s_math);
  Py_CLEAR(clear_module_state->__pyx_n_u_maxOrderSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_base_amount_with_decimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_order_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_price_significant_digits);
  Py_CLEAR(clear_module_state->__pyx_n_u_minOrderSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_base_amount_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_order_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_price_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_quote_amount_increment);
  Py_CLEAR(clear_module_state->__pyx_kp_u_must_be_greater_than_current_ti);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_null_address);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_of_the_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_oid);
  Py_CLEAR(clear_module_state->__pyx_n_s_order);
  Py_CLEAR(clear_module_state->__pyx_n_u_orderHash);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_books);
  Py_CLEAR(clear_module_state->__pyx_n_u_order_books_initialized);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_filled_base_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_filled_quote_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_hash_hex);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_hashes);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_ids);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_remaining_base_token_amoun);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_side);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_timestamp_diff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order_to_Bamboo_Relay_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_updates);
  Py_CLEAR(clear_module_state->__pyx_kp_u_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_orders_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_orders_hashes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_out_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_owner);
  Py_CLEAR(clear_module_state->__pyx_n_s_pair_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_poll_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_popleft);
  Py_CLEAR(clear_module_state->__pyx_n_u_post);
  Py_CLEAR(clear_module_state->__pyx_n_s_pre_emptive_soft_cancels);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_amount_available);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_is_cancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_is_done);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_is_expired);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_is_failure);
  Py_CLEAR(clear_module_state->__pyx_n_s_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_protocol_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_protocol_fee_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_q_amt);
  Py_CLEAR(clear_module_state->__pyx_n_s_q_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_quoteIncrement);
  Py_CLEAR(clear_module_state->__pyx_n_u_quoteTokenDecimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_amount_with_decimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset_decimals);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_token_asset_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_receipt);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_u_remainingBaseTokenAmount);
  Py_CLEAR(clear_module_state->__pyx_n_u_remainingQuoteTokenAmount);
  Py_CLEAR(clear_module_state->__pyx_n_s_remaining_base_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_remaining_quote_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_0x_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_response);
  Py_CLEAR(clear_module_state->__pyx_n_s_response_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_response_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_response_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_tracking_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_retval);
  Py_CLEAR(clear_module_state->__pyx_n_s_reverse);
  Py_CLEAR(clear_module_state->__pyx_kp_u_rinkeby_0x);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ropsten_0x);
  Py_CLEAR(clear_module_state->__pyx_n_s_rounding);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe_ensure_future);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe_gather);
  Py_CLEAR(clear_module_state->__pyx_n_u_salt);
  Py_CLEAR(clear_module_state->__pyx_n_s_saved_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_u_senderAddress);
  Py_CLEAR(clear_module_state->__pyx_n_s_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sign_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_signature);
  Py_CLEAR(clear_module_state->__pyx_n_u_signature);
  Py_CLEAR(clear_module_state->__pyx_n_s_signatures);
  Py_CLEAR(clear_module_state->__pyx_n_s_signed_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_signed_market_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_sleep);
  Py_CLEAR(clear_module_state->__pyx_n_s_soft_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_soft_cancel_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_sorted);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_spender);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_network);
  Py_CLEAR(clear_module_state->__pyx_n_u_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_status);
  Py_CLEAR(clear_module_state->__pyx_n_u_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_network_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_submit_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_submit_market_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_u_takerAddress);
  Py_CLEAR(clear_module_state->__pyx_n_u_takerAssetAmount);
  Py_CLEAR(clear_module_state->__pyx_n_u_takerAssetData);
  Py_CLEAR(clear_module_state->__pyx_n_u_takerFee);
  Py_CLEAR(clear_module_state->__pyx_n_u_takerFeeAssetData);
  Py_CLEAR(clear_module_state->__pyx_n_s_taker_asset_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_taker_asset_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_taker_asset_fill_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_taker_asset_fill_amounts);
  Py_CLEAR(clear_module_state->__pyx_n_s_taker_asset_filled_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_kp_u_testrpc_0x);
  Py_CLEAR(clear_module_state->__pyx_n_s_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeout_seconds);
  Py_CLEAR(clear_module_state->__pyx_n_s_toChecksumAddress);
  Py_CLEAR(clear_module_state->__pyx_n_s_toHex);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_integral_exact);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_u_token_approval);
  Py_CLEAR(clear_module_state->__pyx_kp_u_tokens);
  Py_CLEAR(clear_module_state->__pyx_n_s_tokens_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_base_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_quote_token_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_market_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_market_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_type_desc);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_required);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rule);
  Py_CLEAR(clear_module_state->__pyx_n_u_trading_rule_initialized);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rules_list);
  Py_CLEAR(clear_module_state->__pyx_n_u_transactionHash);
  Py_CLEAR(clear_module_state->__pyx_n_s_tx_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_tx_hash_receipt);
  Py_CLEAR(clear_module_state->__pyx_n_s_tx_hashes);
  Py_CLEAR(clear_module_state->__pyx_n_s_type_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_unsigned_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_unsigned_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_unwatch_order_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_unwrap_eth);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_available_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_limit_order_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_market_order_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_single_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_url);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_coordinator);
  Py_CLEAR(clear_module_state->__pyx_n_s_valid_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_wait);
  Py_CLEAR(clear_module_state->__pyx_n_s_wallet);
  Py_CLEAR(clear_module_state->__pyx_n_s_watch_order_hash);
  Py_CLEAR(clear_module_state->__pyx_n_s_web3);
  Py_CLEAR(clear_module_state->__pyx_n_s_web3_exceptions);
  Py_CLEAR(clear_module_state->__pyx_kp_u_will_be_pre_emptively_soft_canc);
  Py_CLEAR(clear_module_state->__pyx_n_s_wrap_eth);
  Py_CLEAR(clear_module_state->__pyx_n_u_zeroExOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_zero_ex_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeroex_fill_watcher);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_6_0);
  Py_CLEAR(clear_module_state->__pyx_float_10_0);
  Py_CLEAR(clear_module_state->__pyx_float_1e18);
  Py_CLEAR(clear_module_state->__pyx_float_30_0);
  Py_CLEAR(clear_module_state->__pyx_float_60_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_120);
  Py_CLEAR(clear_module_state->__pyx_int_200);
  Py_CLEAR(clear_module_state->__pyx_int_201);
  Py_CLEAR(clear_module_state->__pyx_int_502);
  Py_CLEAR(clear_module_state->__pyx_k__31);
  Py_CLEAR(clear_module_state->__pyx_k__32);
  Py_CLEAR(clear_module_state->__pyx_k__33);
  Py_CLEAR(clear_module_state->__pyx_k__34);
  Py_CLEAR(clear_module_state->__pyx_k__35);
  Py_CLEAR(clear_module_state->__pyx_k__36);
  Py_CLEAR(clear_module_state->__pyx_k__45);
  Py_CLEAR(clear_module_state->__pyx_k__46);
  Py_CLEAR(clear_module_state->__pyx_k__47);
  Py_CLEAR(clear_module_state->__pyx_k__48);
  Py_CLEAR(clear_module_state->__pyx_k__49);
  Py_CLEAR(clear_module_state->__pyx_k__108);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__71);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_tuple__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__2);
  Py_CLEAR(clear_module_state->__pyx_codeobj__3);
  Py_CLEAR(clear_module_state->__pyx_codeobj__6);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__117);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__121);
  Py_CLEAR(clear_module_state->__pyx_tuple__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0x);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0x000000000000000000000000000000);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0xf47261b00000000000000000000000);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1e_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_API_CALL_TIMEOUT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_API_returned_incorrect_values_fo);
  Py_VISIT(traverse_module_state->__pyx_n_s_Any);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT);
  Py_VISIT(traverse_module_state->__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayAPIOrderBookDataSourc);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__api_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__approval_tx);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__format_trad);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__get_order_u);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__status_poll);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__stop_networ);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_avai);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_bala);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_limi);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_mark);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_sing);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange__update_trad);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_check_networ);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_execute_trad);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_account);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_active_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_order_bo);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_order_ha);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_tx_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_get_zero_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_list_account);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_list_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_reset_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_restore_trac);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_start_networ);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_stop_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_submit_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_submit_marke);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_unwrap_eth);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayExchange_wrap_eth);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayOrderBookTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayTransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayTransactionTracker_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_BambooRelayTransactionTracker_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompletedEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreatedEvent);
  Py_VISIT(traverse_module_state->__pyx_n_u_CANCELED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CANCEL_EXPIRY_TIME);
  Py_VISIT(traverse_module_state->__pyx_n_u_COMPLETED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancellationResult);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancelledError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Check_transaction_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClientSession);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Could_not_get_token_approval_sta);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dict);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_any);
  Py_VISIT(traverse_module_state->__pyx_n_u_ETH);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_fetching_data_from);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_parsing_the_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_restoring_tracking_states);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_submitting);
  Py_VISIT(traverse_module_state->__pyx_n_s_EthereumChain);
  Py_VISIT(traverse_module_state->__pyx_n_s_Event);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_n_u_FILLED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_order_on_Bamboo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_fetch_account_updates);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_submit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Filled);
  Py_VISIT(traverse_module_state->__pyx_n_u_GET);
  Py_VISIT(traverse_module_state->__pyx_n_s_HTTPProvider);
  Py_VISIT(traverse_module_state->__pyx_kp_u_HTTP_status_is);
  Py_VISIT(traverse_module_state->__pyx_n_s_HummingbotLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_IOError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Incorrect_values_for_market_orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_trade_type_Aborting);
  Py_VISIT(traverse_module_state->__pyx_n_s_KOVAN);
  Py_VISIT(traverse_module_state->__pyx_n_s_LIMIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Limit_orders_require_a_price_Abo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Limit_orders_require_an_expirati);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_BambooRelayInFlightOrder);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_CancellationResult);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_TradingRule);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_MAIN_NET);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketOrderFailureEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_NOT_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_n_u_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_NetworkStatus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_order_book_exists_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_valid_orders_found_for_amount);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_CREATION_BACKOFF_TIME);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_EXPIRY_TIME);
  Py_VISIT(traverse_module_state->__pyx_n_s_Optional);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Optional_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Optional_Dict_str_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_Order);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelledEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpired);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpiredEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailure);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderType);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Order_not_found_in_tracked_orde);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderedDict);
  Py_VISIT(traverse_module_state->__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME);
  Py_VISIT(traverse_module_state->__pyx_n_s_RINKEBY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ROPSTEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_ROUND_FLOOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReceivedAsset);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompletedEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreatedEvent);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Server_Error_Bad_Gateway);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Skipping);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_limit_buy_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_limit_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_limit_sell_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_market_buy_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_market_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_market_sell_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeFee);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionNotFound);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tuple);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Tuple_str_ZeroExOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA);
  Py_VISIT(traverse_module_state->__pyx_n_s_UPDATE_RULES_INTERVAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_while_fetching);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_while_fetching_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unrecognized_transaction_status);
  Py_VISIT(traverse_module_state->__pyx_kp_u_User_Agent);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Web3);
  Py_VISIT(traverse_module_state->__pyx_n_s_Web3Wallet);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZEROEX_TEST);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZeroExCoordinator);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZeroExExchange);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZeroExFillEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZeroExOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s__125);
  Py_VISIT(traverse_module_state->__pyx_kp_u__13);
  Py_VISIT(traverse_module_state->__pyx_kp_u__15);
  Py_VISIT(traverse_module_state->__pyx_kp_u__20);
  Py_VISIT(traverse_module_state->__pyx_kp_u__26);
  Py_VISIT(traverse_module_state->__pyx_kp_u__41);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_n_s__52);
  Py_VISIT(traverse_module_state->__pyx_kp_u_according_to_order_status_API);
  Py_VISIT(traverse_module_state->__pyx_kp_u_according_to_the_RPC_transactio);
  Py_VISIT(traverse_module_state->__pyx_n_u_account_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_u_account_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_account_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_account_orders_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_account_orders_map);
  Py_VISIT(traverse_module_state->__pyx_kp_u_accounts);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_asks);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_bids);
  Py_VISIT(traverse_module_state->__pyx_n_s_address);
  Py_VISIT(traverse_module_state->__pyx_n_s_aenter);
  Py_VISIT(traverse_module_state->__pyx_n_s_aexit);
  Py_VISIT(traverse_module_state->__pyx_n_s_aiohttp);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount_to_fill);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_apiOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_api_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_app_warning_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_approval_tx_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_async_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_tasks);
  Py_VISIT(traverse_module_state->__pyx_n_s_avg_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_await);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance);
  Py_VISIT(traverse_module_state->__pyx_n_u_bamboo_relay);
  Py_VISIT(traverse_module_state->__pyx_n_u_baseTokenDecimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_amount_with_decimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset_decimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_token_asset_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_batch_fill_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_batch_soft_cancel_orders);
  Py_VISIT(traverse_module_state->__pyx_n_u_blockNumber);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_n_s_brm_logger);
  Py_VISIT(traverse_module_state->__pyx_kp_u_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_did_timeout_tx);
  Py_VISIT(traverse_module_state->__pyx_n_s_calculated_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_orders_up_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_capitalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_ceil);
  Py_VISIT(traverse_module_state->__pyx_n_s_chain);
  Py_VISIT(traverse_module_state->__pyx_n_u_chainId);
  Py_VISIT(traverse_module_state->__pyx_n_s_chain_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_and_fix_approval_amounts);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_client);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_could_not_be_found_according_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_backend);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_deepcopy);
  Py_VISIT(traverse_module_state->__pyx_n_s_deque);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_erc20_tokens);
  Py_VISIT(traverse_module_state->__pyx_n_s_err_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_estimate_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_eth);
  Py_VISIT(traverse_module_state->__pyx_n_s_eth_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_ethereum_rpc_url);
  Py_VISIT(traverse_module_state->__pyx_n_s_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_info);
  Py_VISIT(traverse_module_state->__pyx_n_u_exchangeAddress);
  Py_VISIT(traverse_module_state->__pyx_n_s_exchange_address);
  Py_VISIT(traverse_module_state->__pyx_n_s_exchange_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_trade);
  Py_VISIT(traverse_module_state->__pyx_n_s_executed_amount_quote);
  Py_VISIT(traverse_module_state->__pyx_n_u_expirationTimeSeconds);
  Py_VISIT(traverse_module_state->__pyx_kp_u_expiration_time);
  Py_VISIT(traverse_module_state->__pyx_n_u_expiration_ts);
  Py_VISIT(traverse_module_state->__pyx_n_s_expires);
  Py_VISIT(traverse_module_state->__pyx_n_u_feeRecipientAddress);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_base_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_event);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_order);
  Py_VISIT(traverse_module_state->__pyx_n_u_filledBaseTokenAmount);
  Py_VISIT(traverse_module_state->__pyx_n_u_filledQuoteTokenAmount);
  Py_VISIT(traverse_module_state->__pyx_n_u_fills);
  Py_VISIT(traverse_module_state->__pyx_n_s_fix_signature);
  Py_VISIT(traverse_module_state->__pyx_n_s_fixed_signature);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_floor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_for_more_details);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_json);
  Py_VISIT(traverse_module_state->__pyx_n_u_gasUsed);
  Py_VISIT(traverse_module_state->__pyx_n_s_gas_used);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_generate_order_hash_hex);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_u_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_getTransactionReceipt);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_account_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_active_order_tracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_all_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_event_loop);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_order_book);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_order_hash_hex);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_order_updates);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_tracking_nonce);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_tx_hash_receipt);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_zero_ex_signature);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_been_cancelled);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_been_hard_cancelled_accordi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_been_soft_cancelled_accordi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_cancelled_according_to_orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_tran);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_coordinated_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_expired_according_to_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_failed_according_to_order_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_failed_according_to_transact);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_had_it_s_available_amount_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_hash_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_hashes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_have_been_hard_cancelled_accordi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_have_been_soft_cancelled_accordi);
  Py_VISIT(traverse_module_state->__pyx_n_s_headers);
  Py_VISIT(traverse_module_state->__pyx_n_s_hexstr);
  Py_VISIT(traverse_module_state->__pyx_n_s_http_method);
  Py_VISIT(traverse_module_state->__pyx_n_u_hummingbot);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba_5);
  Py_VISIT(traverse_module_state->__pyx_kp_s_hummingbot_connector_exchange_ba_6);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_async_util);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_estimate_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_tracking_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_wallet_ethereum_ether);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_wallet_ethereum_web3);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_wallet_ethereum_zero_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_u_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_flight_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_flight_market_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_incomplete_order_ids);
  Py_VISIT(traverse_module_state->__pyx_n_s_incomplete_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_inspect);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_u_isCoordinated);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_cancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coordinated);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_done);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_expired);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_failure);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_finite);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_greater_than_requested_amoun);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_greater_than_the_maximum_ord);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_lower_than_the_minimum_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_nan);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_set);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_worse_than_requested_price);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isnan);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_jsdict_order_to_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_kp_u_kovan_0x);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_latest_salt);
  Py_VISIT(traverse_module_state->__pyx_n_u_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_account_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_locked_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_log10);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_n_s_lower);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_kp_u_main_0x);
  Py_VISIT(traverse_module_state->__pyx_n_u_makerAddress);
  Py_VISIT(traverse_module_state->__pyx_n_u_makerAssetAmount);
  Py_VISIT(traverse_module_state->__pyx_n_u_makerAssetData);
  Py_VISIT(traverse_module_state->__pyx_n_u_makerFee);
  Py_VISIT(traverse_module_state->__pyx_n_u_makerFeeAssetData);
  Py_VISIT(traverse_module_state->__pyx_n_s_maker_asset_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_maker_asset_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_maker_asset_filled_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_market);
  Py_VISIT(traverse_module_state->__pyx_n_u_market_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_markets_perPage_1000_include_ba);
  Py_VISIT(traverse_module_state->__pyx_n_s_math);
  Py_VISIT(traverse_module_state->__pyx_n_u_maxOrderSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_base_amount_with_decimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_order_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_price_significant_digits);
  Py_VISIT(traverse_module_state->__pyx_n_u_minOrderSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_base_amount_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_order_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_price_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_quote_amount_increment);
  Py_VISIT(traverse_module_state->__pyx_kp_u_must_be_greater_than_current_ti);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_null_address);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_of_the_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_oid);
  Py_VISIT(traverse_module_state->__pyx_n_s_order);
  Py_VISIT(traverse_module_state->__pyx_n_u_orderHash);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_books);
  Py_VISIT(traverse_module_state->__pyx_n_u_order_books_initialized);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_filled_base_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_filled_quote_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_hash_hex);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_hashes);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_ids);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_remaining_base_token_amoun);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_side);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_timestamp_diff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order_to_Bamboo_Relay_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_updates);
  Py_VISIT(traverse_module_state->__pyx_kp_u_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_orders_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_orders_hashes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_out_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_owner);
  Py_VISIT(traverse_module_state->__pyx_n_s_pair_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_poll_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_popleft);
  Py_VISIT(traverse_module_state->__pyx_n_u_post);
  Py_VISIT(traverse_module_state->__pyx_n_s_pre_emptive_soft_cancels);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_amount_available);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_is_cancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_is_done);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_is_expired);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_is_failure);
  Py_VISIT(traverse_module_state->__pyx_n_s_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_protocol_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_protocol_fee_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_q_amt);
  Py_VISIT(traverse_module_state->__pyx_n_s_q_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_quoteIncrement);
  Py_VISIT(traverse_module_state->__pyx_n_u_quoteTokenDecimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_amount_with_decimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset_decimals);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_token_asset_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_receipt);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_u_remainingBaseTokenAmount);
  Py_VISIT(traverse_module_state->__pyx_n_u_remainingQuoteTokenAmount);
  Py_VISIT(traverse_module_state->__pyx_n_s_remaining_base_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_remaining_quote_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_0x_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_response);
  Py_VISIT(traverse_module_state->__pyx_n_s_response_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_response_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_response_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_tracking_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_retval);
  Py_VISIT(traverse_module_state->__pyx_n_s_reverse);
  Py_VISIT(traverse_module_state->__pyx_kp_u_rinkeby_0x);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ropsten_0x);
  Py_VISIT(traverse_module_state->__pyx_n_s_rounding);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe_ensure_future);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe_gather);
  Py_VISIT(traverse_module_state->__pyx_n_u_salt);
  Py_VISIT(traverse_module_state->__pyx_n_s_saved_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_u_senderAddress);
  Py_VISIT(traverse_module_state->__pyx_n_s_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sign_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_signature);
  Py_VISIT(traverse_module_state->__pyx_n_u_signature);
  Py_VISIT(traverse_module_state->__pyx_n_s_signatures);
  Py_VISIT(traverse_module_state->__pyx_n_s_signed_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_signed_market_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_sleep);
  Py_VISIT(traverse_module_state->__pyx_n_s_soft_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_soft_cancel_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_sorted);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_spender);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_network);
  Py_VISIT(traverse_module_state->__pyx_n_u_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_status);
  Py_VISIT(traverse_module_state->__pyx_n_u_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_network_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_submit_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_submit_market_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_u_takerAddress);
  Py_VISIT(traverse_module_state->__pyx_n_u_takerAssetAmount);
  Py_VISIT(traverse_module_state->__pyx_n_u_takerAssetData);
  Py_VISIT(traverse_module_state->__pyx_n_u_takerFee);
  Py_VISIT(traverse_module_state->__pyx_n_u_takerFeeAssetData);
  Py_VISIT(traverse_module_state->__pyx_n_s_taker_asset_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_taker_asset_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_taker_asset_fill_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_taker_asset_fill_amounts);
  Py_VISIT(traverse_module_state->__pyx_n_s_taker_asset_filled_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_kp_u_testrpc_0x);
  Py_VISIT(traverse_module_state->__pyx_n_s_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeout_seconds);
  Py_VISIT(traverse_module_state->__pyx_n_s_toChecksumAddress);
  Py_VISIT(traverse_module_state->__pyx_n_s_toHex);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_integral_exact);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_u_token_approval);
  Py_VISIT(traverse_module_state->__pyx_kp_u_tokens);
  Py_VISIT(traverse_module_state->__pyx_n_s_tokens_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_base_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_quote_token_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_market_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_market_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_type_desc);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_required);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rule);
  Py_VISIT(traverse_module_state->__pyx_n_u_trading_rule_initialized);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rules_list);
  Py_VISIT(traverse_module_state->__pyx_n_u_transactionHash);
  Py_VISIT(traverse_module_state->__pyx_n_s_tx_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_tx_hash_receipt);
  Py_VISIT(traverse_module_state->__pyx_n_s_tx_hashes);
  Py_VISIT(traverse_module_state->__pyx_n_s_type_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_unsigned_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_unsigned_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_unwatch_order_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_unwrap_eth);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_available_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_limit_order_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_market_order_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_single_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_url);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_coordinator);
  Py_VISIT(traverse_module_state->__pyx_n_s_valid_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_wait);
  Py_VISIT(traverse_module_state->__pyx_n_s_wallet);
  Py_VISIT(traverse_module_state->__pyx_n_s_watch_order_hash);
  Py_VISIT(traverse_module_state->__pyx_n_s_web3);
  Py_VISIT(traverse_module_state->__pyx_n_s_web3_exceptions);
  Py_VISIT(traverse_module_state->__pyx_kp_u_will_be_pre_emptively_soft_canc);
  Py_VISIT(traverse_module_state->__pyx_n_s_wrap_eth);
  Py_VISIT(traverse_module_state->__pyx_n_u_zeroExOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_zero_ex_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeroex_fill_watcher);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_5);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_6_0);
  Py_VISIT(traverse_module_state->__pyx_float_10_0);
  Py_VISIT(traverse_module_state->__pyx_float_1e18);
  Py_VISIT(traverse_module_state->__pyx_float_30_0);
  Py_VISIT(traverse_module_state->__pyx_float_60_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_120);
  Py_VISIT(traverse_module_state->__pyx_int_200);
  Py_VISIT(traverse_module_state->__pyx_int_201);
  Py_VISIT(traverse_module_state->__pyx_int_502);
  Py_VISIT(traverse_module_state->__pyx_k__31);
  Py_VISIT(traverse_module_state->__pyx_k__32);
  Py_VISIT(traverse_module_state->__pyx_k__33);
  Py_VISIT(traverse_module_state->__pyx_k__34);
  Py_VISIT(traverse_module_state->__pyx_k__35);
  Py_VISIT(traverse_module_state->__pyx_k__36);
  Py_VISIT(traverse_module_state->__pyx_k__45);
  Py_VISIT(traverse_module_state->__pyx_k__46);
  Py_VISIT(traverse_module_state->__pyx_k__47);
  Py_VISIT(traverse_module_state->__pyx_k__48);
  Py_VISIT(traverse_module_state->__pyx_k__49);
  Py_VISIT(traverse_module_state->__pyx_k__108);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__71);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_tuple__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__2);
  Py_VISIT(traverse_module_state->__pyx_codeobj__3);
  Py_VISIT(traverse_module_state->__pyx_codeobj__6);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__117);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__121);
  Py_VISIT(traverse_module_state->__pyx_tuple__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_10hummingbot_4core_6pubsub_PubSub __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub
#define __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener
#define __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter
#define __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook
#define __pyx_ptype_10hummingbot_4core_5clock_Clock __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5clock_Clock
#define __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator
#define __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator
#define __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase
#define __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase
#define __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker
#define __pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder
#define __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network
#define __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network
#define __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network
#define __pyx_kp_u_0 __pyx_mstate_global->__pyx_kp_u_0
#define __pyx_kp_u_0x __pyx_mstate_global->__pyx_kp_u_0x
#define __pyx_kp_u_0x000000000000000000000000000000 __pyx_mstate_global->__pyx_kp_u_0x000000000000000000000000000000
#define __pyx_kp_u_0xf47261b00000000000000000000000 __pyx_mstate_global->__pyx_kp_u_0xf47261b00000000000000000000000
#define __pyx_kp_u_1e __pyx_mstate_global->__pyx_kp_u_1e
#define __pyx_kp_u_1e_2 __pyx_mstate_global->__pyx_kp_u_1e_2
#define __pyx_n_s_API_CALL_TIMEOUT __pyx_mstate_global->__pyx_n_s_API_CALL_TIMEOUT
#define __pyx_kp_u_API_returned_incorrect_values_fo __pyx_mstate_global->__pyx_kp_u_API_returned_incorrect_values_fo
#define __pyx_n_s_Any __pyx_mstate_global->__pyx_n_s_Any
#define __pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT
#define __pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE
#define __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT
#define __pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE
#define __pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE
#define __pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT
#define __pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT __pyx_mstate_global->__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT
#define __pyx_n_s_BUY __pyx_mstate_global->__pyx_n_s_BUY
#define __pyx_n_s_BambooRelayAPIOrderBookDataSourc __pyx_mstate_global->__pyx_n_s_BambooRelayAPIOrderBookDataSourc
#define __pyx_n_s_BambooRelayExchange __pyx_mstate_global->__pyx_n_s_BambooRelayExchange
#define __pyx_n_s_BambooRelayExchange___reduce_cyt __pyx_mstate_global->__pyx_n_s_BambooRelayExchange___reduce_cyt
#define __pyx_n_s_BambooRelayExchange___setstate_c __pyx_mstate_global->__pyx_n_s_BambooRelayExchange___setstate_c
#define __pyx_n_s_BambooRelayExchange__api_request __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__api_request
#define __pyx_n_s_BambooRelayExchange__approval_tx __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__approval_tx
#define __pyx_n_s_BambooRelayExchange__format_trad __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__format_trad
#define __pyx_n_s_BambooRelayExchange__get_order_u __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__get_order_u
#define __pyx_n_s_BambooRelayExchange__status_poll __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__status_poll
#define __pyx_n_s_BambooRelayExchange__stop_networ __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__stop_networ
#define __pyx_n_s_BambooRelayExchange__update_avai __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_avai
#define __pyx_n_s_BambooRelayExchange__update_bala __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_bala
#define __pyx_n_s_BambooRelayExchange__update_limi __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_limi
#define __pyx_n_s_BambooRelayExchange__update_mark __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_mark
#define __pyx_n_s_BambooRelayExchange__update_sing __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_sing
#define __pyx_n_s_BambooRelayExchange__update_trad __pyx_mstate_global->__pyx_n_s_BambooRelayExchange__update_trad
#define __pyx_n_s_BambooRelayExchange_buy __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_buy
#define __pyx_n_s_BambooRelayExchange_cancel __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_cancel
#define __pyx_n_s_BambooRelayExchange_cancel_all __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_cancel_all
#define __pyx_n_s_BambooRelayExchange_cancel_order __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_cancel_order
#define __pyx_n_s_BambooRelayExchange_check_networ __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_check_networ
#define __pyx_n_s_BambooRelayExchange_execute_trad __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_execute_trad
#define __pyx_n_s_BambooRelayExchange_get_account __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_account
#define __pyx_n_s_BambooRelayExchange_get_active_e __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_active_e
#define __pyx_n_s_BambooRelayExchange_get_fee __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_fee
#define __pyx_n_s_BambooRelayExchange_get_order_bo __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_order_bo
#define __pyx_n_s_BambooRelayExchange_get_order_ha __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_order_ha
#define __pyx_n_s_BambooRelayExchange_get_orders __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_orders
#define __pyx_n_s_BambooRelayExchange_get_price __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_price
#define __pyx_n_s_BambooRelayExchange_get_tx_hash __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_tx_hash
#define __pyx_n_s_BambooRelayExchange_get_zero_ex __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_get_zero_ex
#define __pyx_n_s_BambooRelayExchange_list_account __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_list_account
#define __pyx_n_s_BambooRelayExchange_list_market __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_list_market
#define __pyx_n_s_BambooRelayExchange_logger __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_logger
#define __pyx_n_s_BambooRelayExchange_reset_state __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_reset_state
#define __pyx_n_s_BambooRelayExchange_restore_trac __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_restore_trac
#define __pyx_n_s_BambooRelayExchange_sell __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_sell
#define __pyx_n_s_BambooRelayExchange_start_networ __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_start_networ
#define __pyx_n_s_BambooRelayExchange_stop_network __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_stop_network
#define __pyx_n_s_BambooRelayExchange_submit_limit __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_submit_limit
#define __pyx_n_s_BambooRelayExchange_submit_marke __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_submit_marke
#define __pyx_n_s_BambooRelayExchange_unwrap_eth __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_unwrap_eth
#define __pyx_n_s_BambooRelayExchange_wrap_eth __pyx_mstate_global->__pyx_n_s_BambooRelayExchange_wrap_eth
#define __pyx_n_s_BambooRelayOrderBookTracker __pyx_mstate_global->__pyx_n_s_BambooRelayOrderBookTracker
#define __pyx_n_s_BambooRelayTransactionTracker __pyx_mstate_global->__pyx_n_s_BambooRelayTransactionTracker
#define __pyx_n_s_BambooRelayTransactionTracker_2 __pyx_mstate_global->__pyx_n_s_BambooRelayTransactionTracker_2
#define __pyx_n_s_BambooRelayTransactionTracker_3 __pyx_mstate_global->__pyx_n_s_BambooRelayTransactionTracker_3
#define __pyx_n_s_BuyOrderCompleted __pyx_mstate_global->__pyx_n_s_BuyOrderCompleted
#define __pyx_n_s_BuyOrderCompletedEvent __pyx_mstate_global->__pyx_n_s_BuyOrderCompletedEvent
#define __pyx_n_s_BuyOrderCreated __pyx_mstate_global->__pyx_n_s_BuyOrderCreated
#define __pyx_n_s_BuyOrderCreatedEvent __pyx_mstate_global->__pyx_n_s_BuyOrderCreatedEvent
#define __pyx_n_u_CANCELED __pyx_mstate_global->__pyx_n_u_CANCELED
#define __pyx_n_s_CANCEL_EXPIRY_TIME __pyx_mstate_global->__pyx_n_s_CANCEL_EXPIRY_TIME
#define __pyx_n_u_COMPLETED __pyx_mstate_global->__pyx_n_u_COMPLETED
#define __pyx_n_s_CONNECTED __pyx_mstate_global->__pyx_n_s_CONNECTED
#define __pyx_n_s_CancellationResult __pyx_mstate_global->__pyx_n_s_CancellationResult
#define __pyx_n_s_CancelledError __pyx_mstate_global->__pyx_n_s_CancelledError
#define __pyx_kp_u_Check_transaction_hash __pyx_mstate_global->__pyx_kp_u_Check_transaction_hash
#define __pyx_n_s_ClientSession __pyx_mstate_global->__pyx_n_s_ClientSession
#define __pyx_kp_u_Could_not_get_token_approval_sta __pyx_mstate_global->__pyx_kp_u_Could_not_get_token_approval_sta
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_n_s_Dict __pyx_mstate_global->__pyx_n_s_Dict
#define __pyx_kp_s_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_Dict_str_Any
#define __pyx_kp_s_Dict_str_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_Dict_str_Dict_str_Any
#define __pyx_kp_s_Dict_str_any __pyx_mstate_global->__pyx_kp_s_Dict_str_any
#define __pyx_n_u_ETH __pyx_mstate_global->__pyx_n_u_ETH
#define __pyx_kp_u_Error_fetching_data_from __pyx_mstate_global->__pyx_kp_u_Error_fetching_data_from
#define __pyx_kp_u_Error_parsing_the_trading_pair __pyx_mstate_global->__pyx_kp_u_Error_parsing_the_trading_pair
#define __pyx_kp_u_Error_restoring_tracking_states __pyx_mstate_global->__pyx_kp_u_Error_restoring_tracking_states
#define __pyx_kp_u_Error_submitting __pyx_mstate_global->__pyx_kp_u_Error_submitting
#define __pyx_n_s_EthereumChain __pyx_mstate_global->__pyx_n_s_EthereumChain
#define __pyx_n_s_Event __pyx_mstate_global->__pyx_n_s_Event
#define __pyx_n_s_ExchangeBase __pyx_mstate_global->__pyx_n_s_ExchangeBase
#define __pyx_n_u_FILLED __pyx_mstate_global->__pyx_n_u_FILLED
#define __pyx_kp_u_Failed_to_cancel_order __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_order
#define __pyx_kp_u_Failed_to_cancel_order_on_Bamboo __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_order_on_Bamboo
#define __pyx_kp_u_Failed_to_cancel_orders_on_Bambo __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo
#define __pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2 __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2
#define __pyx_kp_u_Failed_to_fetch_account_updates __pyx_mstate_global->__pyx_kp_u_Failed_to_fetch_account_updates
#define __pyx_kp_u_Failed_to_submit __pyx_mstate_global->__pyx_kp_u_Failed_to_submit
#define __pyx_kp_u_Filled __pyx_mstate_global->__pyx_kp_u_Filled
#define __pyx_n_u_GET __pyx_mstate_global->__pyx_n_u_GET
#define __pyx_n_s_HTTPProvider __pyx_mstate_global->__pyx_n_s_HTTPProvider
#define __pyx_kp_u_HTTP_status_is __pyx_mstate_global->__pyx_kp_u_HTTP_status_is
#define __pyx_n_s_HummingbotLogger __pyx_mstate_global->__pyx_n_s_HummingbotLogger
#define __pyx_n_s_IOError __pyx_mstate_global->__pyx_n_s_IOError
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_u_Incorrect_values_for_market_orde __pyx_mstate_global->__pyx_kp_u_Incorrect_values_for_market_orde
#define __pyx_kp_u_Invalid_trade_type_Aborting __pyx_mstate_global->__pyx_kp_u_Invalid_trade_type_Aborting
#define __pyx_n_s_KOVAN __pyx_mstate_global->__pyx_n_s_KOVAN
#define __pyx_n_s_LIMIT __pyx_mstate_global->__pyx_n_s_LIMIT
#define __pyx_n_s_LimitOrder __pyx_mstate_global->__pyx_n_s_LimitOrder
#define __pyx_kp_u_Limit_orders_require_a_price_Abo __pyx_mstate_global->__pyx_kp_u_Limit_orders_require_a_price_Abo
#define __pyx_kp_u_Limit_orders_require_an_expirati __pyx_mstate_global->__pyx_kp_u_Limit_orders_require_an_expirati
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_kp_s_List_BambooRelayInFlightOrder __pyx_mstate_global->__pyx_kp_s_List_BambooRelayInFlightOrder
#define __pyx_kp_s_List_CancellationResult __pyx_mstate_global->__pyx_kp_s_List_CancellationResult
#define __pyx_kp_s_List_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_List_Dict_str_Any
#define __pyx_kp_s_List_TradingRule __pyx_mstate_global->__pyx_kp_s_List_TradingRule
#define __pyx_kp_s_List_str __pyx_mstate_global->__pyx_kp_s_List_str
#define __pyx_n_s_MAIN_NET __pyx_mstate_global->__pyx_n_s_MAIN_NET
#define __pyx_n_s_MARKET __pyx_mstate_global->__pyx_n_s_MARKET
#define __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT __pyx_mstate_global->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT
#define __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T __pyx_mstate_global->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T
#define __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG
#define __pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG
#define __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG
#define __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG
#define __pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG
#define __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN __pyx_mstate_global->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN
#define __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT __pyx_mstate_global->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT
#define __pyx_n_s_MarketEvent __pyx_mstate_global->__pyx_n_s_MarketEvent
#define __pyx_n_s_MarketOrderFailureEvent __pyx_mstate_global->__pyx_n_s_MarketOrderFailureEvent
#define __pyx_n_s_NOT_CONNECTED __pyx_mstate_global->__pyx_n_s_NOT_CONNECTED
#define __pyx_n_u_NaN __pyx_mstate_global->__pyx_n_u_NaN
#define __pyx_n_s_NetworkStatus __pyx_mstate_global->__pyx_n_s_NetworkStatus
#define __pyx_kp_u_No_order_book_exists_for __pyx_mstate_global->__pyx_kp_u_No_order_book_exists_for
#define __pyx_kp_u_No_valid_orders_found_for_amount __pyx_mstate_global->__pyx_kp_u_No_valid_orders_found_for_amount
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_ORDER_CREATION_BACKOFF_TIME __pyx_mstate_global->__pyx_n_s_ORDER_CREATION_BACKOFF_TIME
#define __pyx_n_s_ORDER_EXPIRY_TIME __pyx_mstate_global->__pyx_n_s_ORDER_EXPIRY_TIME
#define __pyx_n_s_Optional __pyx_mstate_global->__pyx_n_s_Optional
#define __pyx_kp_s_Optional_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_Optional_Dict_str_Any
#define __pyx_kp_s_Optional_Dict_str_str __pyx_mstate_global->__pyx_kp_s_Optional_Dict_str_str
#define __pyx_n_s_Order __pyx_mstate_global->__pyx_n_s_Order
#define __pyx_n_s_OrderBook __pyx_mstate_global->__pyx_n_s_OrderBook
#define __pyx_n_s_OrderCancelled __pyx_mstate_global->__pyx_n_s_OrderCancelled
#define __pyx_n_s_OrderCancelledEvent __pyx_mstate_global->__pyx_n_s_OrderCancelledEvent
#define __pyx_n_s_OrderExpired __pyx_mstate_global->__pyx_n_s_OrderExpired
#define __pyx_n_s_OrderExpiredEvent __pyx_mstate_global->__pyx_n_s_OrderExpiredEvent
#define __pyx_n_s_OrderFailure __pyx_mstate_global->__pyx_n_s_OrderFailure
#define __pyx_n_s_OrderFilled __pyx_mstate_global->__pyx_n_s_OrderFilled
#define __pyx_n_s_OrderFilledEvent __pyx_mstate_global->__pyx_n_s_OrderFilledEvent
#define __pyx_n_s_OrderType __pyx_mstate_global->__pyx_n_s_OrderType
#define __pyx_kp_u_Order_not_found_in_tracked_orde __pyx_mstate_global->__pyx_kp_u_Order_not_found_in_tracked_orde
#define __pyx_n_s_OrderedDict __pyx_mstate_global->__pyx_n_s_OrderedDict
#define __pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME __pyx_mstate_global->__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME
#define __pyx_n_s_RINKEBY __pyx_mstate_global->__pyx_n_s_RINKEBY
#define __pyx_n_s_ROPSTEN __pyx_mstate_global->__pyx_n_s_ROPSTEN
#define __pyx_n_s_ROUND_FLOOR __pyx_mstate_global->__pyx_n_s_ROUND_FLOOR
#define __pyx_n_s_ReceivedAsset __pyx_mstate_global->__pyx_n_s_ReceivedAsset
#define __pyx_n_s_SELL __pyx_mstate_global->__pyx_n_s_SELL
#define __pyx_n_s_SellOrderCompleted __pyx_mstate_global->__pyx_n_s_SellOrderCompleted
#define __pyx_n_s_SellOrderCompletedEvent __pyx_mstate_global->__pyx_n_s_SellOrderCompletedEvent
#define __pyx_n_s_SellOrderCreated __pyx_mstate_global->__pyx_n_s_SellOrderCreated
#define __pyx_n_s_SellOrderCreatedEvent __pyx_mstate_global->__pyx_n_s_SellOrderCreatedEvent
#define __pyx_kp_u_Server_Error_Bad_Gateway __pyx_mstate_global->__pyx_kp_u_Server_Error_Bad_Gateway
#define __pyx_kp_u_Skipping __pyx_mstate_global->__pyx_kp_u_Skipping
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_kp_u_The_limit_buy_order __pyx_mstate_global->__pyx_kp_u_The_limit_buy_order
#define __pyx_kp_u_The_limit_order __pyx_mstate_global->__pyx_kp_u_The_limit_order
#define __pyx_kp_u_The_limit_orders __pyx_mstate_global->__pyx_kp_u_The_limit_orders
#define __pyx_kp_u_The_limit_sell_order __pyx_mstate_global->__pyx_kp_u_The_limit_sell_order
#define __pyx_kp_u_The_market_buy_order __pyx_mstate_global->__pyx_kp_u_The_market_buy_order
#define __pyx_kp_u_The_market_order __pyx_mstate_global->__pyx_kp_u_The_market_order
#define __pyx_kp_u_The_market_sell_order __pyx_mstate_global->__pyx_kp_u_The_market_sell_order
#define __pyx_n_s_TradeFee __pyx_mstate_global->__pyx_n_s_TradeFee
#define __pyx_n_s_TradeType __pyx_mstate_global->__pyx_n_s_TradeType
#define __pyx_n_s_TransactionNotFound __pyx_mstate_global->__pyx_n_s_TransactionNotFound
#define __pyx_n_s_Tuple __pyx_mstate_global->__pyx_n_s_Tuple
#define __pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo __pyx_mstate_global->__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo
#define __pyx_kp_s_Tuple_str_ZeroExOrder __pyx_mstate_global->__pyx_kp_s_Tuple_str_ZeroExOrder
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL __pyx_mstate_global->__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL
#define __pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA __pyx_mstate_global->__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA
#define __pyx_n_s_UPDATE_RULES_INTERVAL __pyx_mstate_global->__pyx_n_s_UPDATE_RULES_INTERVAL
#define __pyx_kp_u_Unexpected_error_cancelling_orde __pyx_mstate_global->__pyx_kp_u_Unexpected_error_cancelling_orde
#define __pyx_kp_u_Unexpected_error_cancelling_orde_2 __pyx_mstate_global->__pyx_kp_u_Unexpected_error_cancelling_orde_2
#define __pyx_kp_u_Unexpected_error_while_fetching __pyx_mstate_global->__pyx_kp_u_Unexpected_error_while_fetching
#define __pyx_kp_u_Unexpected_error_while_fetching_2 __pyx_mstate_global->__pyx_kp_u_Unexpected_error_while_fetching_2
#define __pyx_kp_u_Unrecognized_transaction_status __pyx_mstate_global->__pyx_kp_u_Unrecognized_transaction_status
#define __pyx_kp_u_User_Agent __pyx_mstate_global->__pyx_kp_u_User_Agent
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_Web3 __pyx_mstate_global->__pyx_n_s_Web3
#define __pyx_n_s_Web3Wallet __pyx_mstate_global->__pyx_n_s_Web3Wallet
#define __pyx_n_s_ZEROEX_TEST __pyx_mstate_global->__pyx_n_s_ZEROEX_TEST
#define __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES __pyx_mstate_global->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES
#define __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST __pyx_mstate_global->__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST
#define __pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY __pyx_mstate_global->__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY
#define __pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS
#define __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR __pyx_mstate_global->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR
#define __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI __pyx_mstate_global->__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI
#define __pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY __pyx_mstate_global->__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY
#define __pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS
#define __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR __pyx_mstate_global->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR
#define __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI __pyx_mstate_global->__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI
#define __pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY __pyx_mstate_global->__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY
#define __pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS
#define __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR __pyx_mstate_global->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR
#define __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI __pyx_mstate_global->__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI
#define __pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY __pyx_mstate_global->__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY
#define __pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS
#define __pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS
#define __pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR __pyx_mstate_global->__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR
#define __pyx_n_s_ZERO_EX_TEST_ERC20_PROXY __pyx_mstate_global->__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY
#define __pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS __pyx_mstate_global->__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS
#define __pyx_n_s_ZeroExCoordinator __pyx_mstate_global->__pyx_n_s_ZeroExCoordinator
#define __pyx_n_s_ZeroExExchange __pyx_mstate_global->__pyx_n_s_ZeroExExchange
#define __pyx_n_s_ZeroExFillEvent __pyx_mstate_global->__pyx_n_s_ZeroExFillEvent
#define __pyx_n_s_ZeroExOrder __pyx_mstate_global->__pyx_n_s_ZeroExOrder
#define __pyx_n_s__125 __pyx_mstate_global->__pyx_n_s__125
#define __pyx_kp_u__13 __pyx_mstate_global->__pyx_kp_u__13
#define __pyx_kp_u__15 __pyx_mstate_global->__pyx_kp_u__15
#define __pyx_kp_u__20 __pyx_mstate_global->__pyx_kp_u__20
#define __pyx_kp_u__26 __pyx_mstate_global->__pyx_kp_u__26
#define __pyx_kp_u__41 __pyx_mstate_global->__pyx_kp_u__41
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_n_s__52 __pyx_mstate_global->__pyx_n_s__52
#define __pyx_kp_u_according_to_order_status_API __pyx_mstate_global->__pyx_kp_u_according_to_order_status_API
#define __pyx_kp_u_according_to_the_RPC_transactio __pyx_mstate_global->__pyx_kp_u_according_to_the_RPC_transactio
#define __pyx_n_u_account_available_balance __pyx_mstate_global->__pyx_n_u_account_available_balance
#define __pyx_n_u_account_balance __pyx_mstate_global->__pyx_n_u_account_balance
#define __pyx_n_s_account_order __pyx_mstate_global->__pyx_n_s_account_order
#define __pyx_n_s_account_orders_list __pyx_mstate_global->__pyx_n_s_account_orders_list
#define __pyx_n_s_account_orders_map __pyx_mstate_global->__pyx_n_s_account_orders_map
#define __pyx_kp_u_accounts __pyx_mstate_global->__pyx_kp_u_accounts
#define __pyx_n_s_active_asks __pyx_mstate_global->__pyx_n_s_active_asks
#define __pyx_n_s_active_bids __pyx_mstate_global->__pyx_n_s_active_bids
#define __pyx_n_s_address __pyx_mstate_global->__pyx_n_s_address
#define __pyx_n_s_aenter __pyx_mstate_global->__pyx_n_s_aenter
#define __pyx_n_s_aexit __pyx_mstate_global->__pyx_n_s_aexit
#define __pyx_n_s_aiohttp __pyx_mstate_global->__pyx_n_s_aiohttp
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_amount __pyx_mstate_global->__pyx_n_s_amount
#define __pyx_n_s_amount_to_fill __pyx_mstate_global->__pyx_n_s_amount_to_fill
#define __pyx_kp_u_and_price __pyx_mstate_global->__pyx_kp_u_and_price
#define __pyx_n_s_apiOrder __pyx_mstate_global->__pyx_n_s_apiOrder
#define __pyx_n_s_api_request __pyx_mstate_global->__pyx_n_s_api_request
#define __pyx_n_s_app_warning_msg __pyx_mstate_global->__pyx_n_s_app_warning_msg
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_approval_tx_polling_loop __pyx_mstate_global->__pyx_n_s_approval_tx_polling_loop
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_async_timeout __pyx_mstate_global->__pyx_n_s_async_timeout
#define __pyx_n_s_asyncio __pyx_mstate_global->__pyx_n_s_asyncio
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_asyncio_tasks __pyx_mstate_global->__pyx_n_s_asyncio_tasks
#define __pyx_n_s_avg_price __pyx_mstate_global->__pyx_n_s_avg_price
#define __pyx_n_s_await __pyx_mstate_global->__pyx_n_s_await
#define __pyx_n_s_balance __pyx_mstate_global->__pyx_n_s_balance
#define __pyx_n_u_bamboo_relay __pyx_mstate_global->__pyx_n_u_bamboo_relay
#define __pyx_n_u_baseTokenDecimals __pyx_mstate_global->__pyx_n_u_baseTokenDecimals
#define __pyx_n_s_base_amount_with_decimals __pyx_mstate_global->__pyx_n_s_base_amount_with_decimals
#define __pyx_n_s_base_asset __pyx_mstate_global->__pyx_n_s_base_asset
#define __pyx_n_s_base_asset_decimals __pyx_mstate_global->__pyx_n_s_base_asset_decimals
#define __pyx_n_s_base_asset_increment __pyx_mstate_global->__pyx_n_s_base_asset_increment
#define __pyx_n_s_base_currency __pyx_mstate_global->__pyx_n_s_base_currency
#define __pyx_n_s_base_token_asset_data __pyx_mstate_global->__pyx_n_s_base_token_asset_data
#define __pyx_n_s_batch_fill_orders __pyx_mstate_global->__pyx_n_s_batch_fill_orders
#define __pyx_n_s_batch_soft_cancel_orders __pyx_mstate_global->__pyx_n_s_batch_soft_cancel_orders
#define __pyx_n_u_blockNumber __pyx_mstate_global->__pyx_n_u_blockNumber
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_n_s_brm_logger __pyx_mstate_global->__pyx_n_s_brm_logger
#define __pyx_kp_u_buy __pyx_mstate_global->__pyx_kp_u_buy
#define __pyx_n_s_buy_2 __pyx_mstate_global->__pyx_n_s_buy_2
#define __pyx_n_s_c_did_timeout_tx __pyx_mstate_global->__pyx_n_s_c_did_timeout_tx
#define __pyx_n_s_calculated_price __pyx_mstate_global->__pyx_n_s_calculated_price
#define __pyx_n_s_cancel __pyx_mstate_global->__pyx_n_s_cancel
#define __pyx_n_s_cancel_all __pyx_mstate_global->__pyx_n_s_cancel_all
#define __pyx_n_s_cancel_order __pyx_mstate_global->__pyx_n_s_cancel_order
#define __pyx_n_s_cancel_orders_up_to __pyx_mstate_global->__pyx_n_s_cancel_orders_up_to
#define __pyx_n_s_capitalize __pyx_mstate_global->__pyx_n_s_capitalize
#define __pyx_n_s_ceil __pyx_mstate_global->__pyx_n_s_ceil
#define __pyx_n_s_chain __pyx_mstate_global->__pyx_n_s_chain
#define __pyx_n_u_chainId __pyx_mstate_global->__pyx_n_u_chainId
#define __pyx_n_s_chain_id __pyx_mstate_global->__pyx_n_s_chain_id
#define __pyx_n_s_check_and_fix_approval_amounts __pyx_mstate_global->__pyx_n_s_check_and_fix_approval_amounts
#define __pyx_n_s_check_network __pyx_mstate_global->__pyx_n_s_check_network
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_clear __pyx_mstate_global->__pyx_n_s_clear
#define __pyx_n_s_client __pyx_mstate_global->__pyx_n_s_client
#define __pyx_n_s_client_order_id __pyx_mstate_global->__pyx_n_s_client_order_id
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_kp_u_could_not_be_found_according_to __pyx_mstate_global->__pyx_kp_u_could_not_be_found_according_to
#define __pyx_n_s_currency __pyx_mstate_global->__pyx_n_s_currency
#define __pyx_n_s_current_backend __pyx_mstate_global->__pyx_n_s_current_backend
#define __pyx_n_s_current_timestamp __pyx_mstate_global->__pyx_n_s_current_timestamp
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_deepcopy __pyx_mstate_global->__pyx_n_s_deepcopy
#define __pyx_n_s_deque __pyx_mstate_global->__pyx_n_s_deque
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_erc20_tokens __pyx_mstate_global->__pyx_n_s_erc20_tokens
#define __pyx_n_s_err_msg __pyx_mstate_global->__pyx_n_s_err_msg
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_estimate_fee __pyx_mstate_global->__pyx_n_s_estimate_fee
#define __pyx_n_s_eth __pyx_mstate_global->__pyx_n_s_eth
#define __pyx_n_s_eth_utils __pyx_mstate_global->__pyx_n_s_eth_utils
#define __pyx_n_s_ethereum_rpc_url __pyx_mstate_global->__pyx_n_s_ethereum_rpc_url
#define __pyx_n_s_ex __pyx_mstate_global->__pyx_n_s_ex
#define __pyx_n_s_exc_info __pyx_mstate_global->__pyx_n_s_exc_info
#define __pyx_n_u_exchangeAddress __pyx_mstate_global->__pyx_n_u_exchangeAddress
#define __pyx_n_s_exchange_address __pyx_mstate_global->__pyx_n_s_exchange_address
#define __pyx_n_s_exchange_order_id __pyx_mstate_global->__pyx_n_s_exchange_order_id
#define __pyx_n_s_execute_trade __pyx_mstate_global->__pyx_n_s_execute_trade
#define __pyx_n_s_executed_amount_quote __pyx_mstate_global->__pyx_n_s_executed_amount_quote
#define __pyx_n_u_expirationTimeSeconds __pyx_mstate_global->__pyx_n_u_expirationTimeSeconds
#define __pyx_kp_u_expiration_time __pyx_mstate_global->__pyx_kp_u_expiration_time
#define __pyx_n_u_expiration_ts __pyx_mstate_global->__pyx_n_u_expiration_ts
#define __pyx_n_s_expires __pyx_mstate_global->__pyx_n_s_expires
#define __pyx_n_u_feeRecipientAddress __pyx_mstate_global->__pyx_n_u_feeRecipientAddress
#define __pyx_n_s_fill __pyx_mstate_global->__pyx_n_s_fill
#define __pyx_n_s_fill_base_token_amount __pyx_mstate_global->__pyx_n_s_fill_base_token_amount
#define __pyx_n_s_fill_event __pyx_mstate_global->__pyx_n_s_fill_event
#define __pyx_n_s_fill_order __pyx_mstate_global->__pyx_n_s_fill_order
#define __pyx_n_u_filledBaseTokenAmount __pyx_mstate_global->__pyx_n_u_filledBaseTokenAmount
#define __pyx_n_u_filledQuoteTokenAmount __pyx_mstate_global->__pyx_n_u_filledQuoteTokenAmount
#define __pyx_n_u_fills __pyx_mstate_global->__pyx_n_u_fills
#define __pyx_n_s_fix_signature __pyx_mstate_global->__pyx_n_s_fix_signature
#define __pyx_n_s_fixed_signature __pyx_mstate_global->__pyx_n_s_fixed_signature
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_floor __pyx_mstate_global->__pyx_n_s_floor
#define __pyx_kp_u_for_more_details __pyx_mstate_global->__pyx_kp_u_for_more_details
#define __pyx_n_s_format_trading_rules __pyx_mstate_global->__pyx_n_s_format_trading_rules
#define __pyx_n_s_from_json __pyx_mstate_global->__pyx_n_s_from_json
#define __pyx_n_u_gasUsed __pyx_mstate_global->__pyx_n_u_gasUsed
#define __pyx_n_s_gas_used __pyx_mstate_global->__pyx_n_s_gas_used
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_generate_order_hash_hex __pyx_mstate_global->__pyx_n_s_generate_order_hash_hex
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_u_get __pyx_mstate_global->__pyx_n_u_get
#define __pyx_n_s_getLogger __pyx_mstate_global->__pyx_n_s_getLogger
#define __pyx_n_s_getTransactionReceipt __pyx_mstate_global->__pyx_n_s_getTransactionReceipt
#define __pyx_n_s_get_account_orders __pyx_mstate_global->__pyx_n_s_get_account_orders
#define __pyx_n_s_get_active_exchange_markets __pyx_mstate_global->__pyx_n_s_get_active_exchange_markets
#define __pyx_n_s_get_active_order_tracker __pyx_mstate_global->__pyx_n_s_get_active_order_tracker
#define __pyx_n_s_get_all_balances __pyx_mstate_global->__pyx_n_s_get_all_balances
#define __pyx_n_s_get_event_loop __pyx_mstate_global->__pyx_n_s_get_event_loop
#define __pyx_n_s_get_fee __pyx_mstate_global->__pyx_n_s_get_fee
#define __pyx_n_s_get_order_book __pyx_mstate_global->__pyx_n_s_get_order_book
#define __pyx_n_s_get_order_hash_hex __pyx_mstate_global->__pyx_n_s_get_order_hash_hex
#define __pyx_n_s_get_order_updates __pyx_mstate_global->__pyx_n_s_get_order_updates
#define __pyx_n_s_get_orders __pyx_mstate_global->__pyx_n_s_get_orders
#define __pyx_n_s_get_price __pyx_mstate_global->__pyx_n_s_get_price
#define __pyx_n_s_get_tracking_nonce __pyx_mstate_global->__pyx_n_s_get_tracking_nonce
#define __pyx_n_s_get_tx_hash_receipt __pyx_mstate_global->__pyx_n_s_get_tx_hash_receipt
#define __pyx_n_s_get_zero_ex_signature __pyx_mstate_global->__pyx_n_s_get_zero_ex_signature
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_has_been_cancelled __pyx_mstate_global->__pyx_n_s_has_been_cancelled
#define __pyx_kp_u_has_been_hard_cancelled_accordi __pyx_mstate_global->__pyx_kp_u_has_been_hard_cancelled_accordi
#define __pyx_kp_u_has_been_soft_cancelled_accordi __pyx_mstate_global->__pyx_kp_u_has_been_soft_cancelled_accordi
#define __pyx_kp_u_has_cancelled_according_to_orde __pyx_mstate_global->__pyx_kp_u_has_cancelled_according_to_orde
#define __pyx_kp_u_has_completed_according_to_orde __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_orde
#define __pyx_kp_u_has_completed_according_to_the __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_the
#define __pyx_kp_u_has_completed_according_to_tran __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_tran
#define __pyx_n_s_has_coordinated_order __pyx_mstate_global->__pyx_n_s_has_coordinated_order
#define __pyx_kp_u_has_expired_according_to_order __pyx_mstate_global->__pyx_kp_u_has_expired_according_to_order
#define __pyx_kp_u_has_failed_according_to_order_s __pyx_mstate_global->__pyx_kp_u_has_failed_according_to_order_s
#define __pyx_kp_u_has_failed_according_to_transact __pyx_mstate_global->__pyx_kp_u_has_failed_according_to_transact
#define __pyx_kp_u_has_had_it_s_available_amount_r __pyx_mstate_global->__pyx_kp_u_has_had_it_s_available_amount_r
#define __pyx_n_s_hash __pyx_mstate_global->__pyx_n_s_hash
#define __pyx_n_s_hash_index __pyx_mstate_global->__pyx_n_s_hash_index
#define __pyx_n_s_hashes __pyx_mstate_global->__pyx_n_s_hashes
#define __pyx_kp_u_have_been_hard_cancelled_accordi __pyx_mstate_global->__pyx_kp_u_have_been_hard_cancelled_accordi
#define __pyx_kp_u_have_been_soft_cancelled_accordi __pyx_mstate_global->__pyx_kp_u_have_been_soft_cancelled_accordi
#define __pyx_n_s_headers __pyx_mstate_global->__pyx_n_s_headers
#define __pyx_n_s_hexstr __pyx_mstate_global->__pyx_n_s_hexstr
#define __pyx_n_s_http_method __pyx_mstate_global->__pyx_n_s_http_method
#define __pyx_n_u_hummingbot __pyx_mstate_global->__pyx_n_u_hummingbot
#define __pyx_n_s_hummingbot_connector_exchange_ba __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba
#define __pyx_n_s_hummingbot_connector_exchange_ba_2 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba_2
#define __pyx_n_s_hummingbot_connector_exchange_ba_3 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba_3
#define __pyx_n_s_hummingbot_connector_exchange_ba_4 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba_4
#define __pyx_n_s_hummingbot_connector_exchange_ba_5 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba_5
#define __pyx_kp_s_hummingbot_connector_exchange_ba_6 __pyx_mstate_global->__pyx_kp_s_hummingbot_connector_exchange_ba_6
#define __pyx_n_s_hummingbot_core_data_type_cancel __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_cancel
#define __pyx_n_s_hummingbot_core_data_type_limit __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_limit
#define __pyx_n_s_hummingbot_core_event_events __pyx_mstate_global->__pyx_n_s_hummingbot_core_event_events
#define __pyx_n_s_hummingbot_core_network_iterator __pyx_mstate_global->__pyx_n_s_hummingbot_core_network_iterator
#define __pyx_n_s_hummingbot_core_utils_async_util __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_async_util
#define __pyx_n_s_hummingbot_core_utils_estimate_f __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_estimate_f
#define __pyx_n_s_hummingbot_core_utils_tracking_n __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_tracking_n
#define __pyx_n_s_hummingbot_logger __pyx_mstate_global->__pyx_n_s_hummingbot_logger
#define __pyx_n_s_hummingbot_wallet_ethereum_ether __pyx_mstate_global->__pyx_n_s_hummingbot_wallet_ethereum_ether
#define __pyx_n_s_hummingbot_wallet_ethereum_web3 __pyx_mstate_global->__pyx_n_s_hummingbot_wallet_ethereum_web3
#define __pyx_n_s_hummingbot_wallet_ethereum_zero __pyx_mstate_global->__pyx_n_s_hummingbot_wallet_ethereum_zero
#define __pyx_n_s_hummingbot_wallet_ethereum_zero_2 __pyx_mstate_global->__pyx_n_s_hummingbot_wallet_ethereum_zero_2
#define __pyx_n_s_hummingbot_wallet_ethereum_zero_3 __pyx_mstate_global->__pyx_n_s_hummingbot_wallet_ethereum_zero_3
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_u_id __pyx_mstate_global->__pyx_n_u_id
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_in_flight_limit_orders __pyx_mstate_global->__pyx_n_s_in_flight_limit_orders
#define __pyx_n_s_in_flight_market_orders __pyx_mstate_global->__pyx_n_s_in_flight_market_orders
#define __pyx_n_s_incomplete_order_ids __pyx_mstate_global->__pyx_n_s_incomplete_order_ids
#define __pyx_n_s_incomplete_orders __pyx_mstate_global->__pyx_n_s_incomplete_orders
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_inspect __pyx_mstate_global->__pyx_n_s_inspect
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_u_isCoordinated __pyx_mstate_global->__pyx_n_u_isCoordinated
#define __pyx_n_s_is_buy __pyx_mstate_global->__pyx_n_s_is_buy
#define __pyx_n_s_is_cancelled __pyx_mstate_global->__pyx_n_s_is_cancelled
#define __pyx_n_s_is_coordinated __pyx_mstate_global->__pyx_n_s_is_coordinated
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_done __pyx_mstate_global->__pyx_n_s_is_done
#define __pyx_n_s_is_expired __pyx_mstate_global->__pyx_n_s_is_expired
#define __pyx_n_s_is_failure __pyx_mstate_global->__pyx_n_s_is_failure
#define __pyx_n_s_is_finite __pyx_mstate_global->__pyx_n_s_is_finite
#define __pyx_kp_u_is_greater_than_requested_amoun __pyx_mstate_global->__pyx_kp_u_is_greater_than_requested_amoun
#define __pyx_kp_u_is_greater_than_the_maximum_ord __pyx_mstate_global->__pyx_kp_u_is_greater_than_the_maximum_ord
#define __pyx_kp_u_is_lower_than_the_minimum_order __pyx_mstate_global->__pyx_kp_u_is_lower_than_the_minimum_order
#define __pyx_n_s_is_nan __pyx_mstate_global->__pyx_n_s_is_nan
#define __pyx_n_s_is_set __pyx_mstate_global->__pyx_n_s_is_set
#define __pyx_kp_u_is_worse_than_requested_price __pyx_mstate_global->__pyx_kp_u_is_worse_than_requested_price
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isnan __pyx_mstate_global->__pyx_n_s_isnan
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_jsdict_order_to_struct __pyx_mstate_global->__pyx_n_s_jsdict_order_to_struct
#define __pyx_n_s_json __pyx_mstate_global->__pyx_n_s_json
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_kp_u_kovan_0x __pyx_mstate_global->__pyx_kp_u_kovan_0x
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_latest_salt __pyx_mstate_global->__pyx_n_s_latest_salt
#define __pyx_n_u_limit_orders __pyx_mstate_global->__pyx_n_u_limit_orders
#define __pyx_n_s_list_account_orders __pyx_mstate_global->__pyx_n_s_list_account_orders
#define __pyx_n_s_list_market __pyx_mstate_global->__pyx_n_s_list_market
#define __pyx_n_s_locked_balances __pyx_mstate_global->__pyx_n_s_locked_balances
#define __pyx_n_s_log10 __pyx_mstate_global->__pyx_n_s_log10
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_n_s_lower __pyx_mstate_global->__pyx_n_s_lower
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_kp_u_main_0x __pyx_mstate_global->__pyx_kp_u_main_0x
#define __pyx_n_u_makerAddress __pyx_mstate_global->__pyx_n_u_makerAddress
#define __pyx_n_u_makerAssetAmount __pyx_mstate_global->__pyx_n_u_makerAssetAmount
#define __pyx_n_u_makerAssetData __pyx_mstate_global->__pyx_n_u_makerAssetData
#define __pyx_n_u_makerFee __pyx_mstate_global->__pyx_n_u_makerFee
#define __pyx_n_u_makerFeeAssetData __pyx_mstate_global->__pyx_n_u_makerFeeAssetData
#define __pyx_n_s_maker_asset_amount __pyx_mstate_global->__pyx_n_s_maker_asset_amount
#define __pyx_n_s_maker_asset_data __pyx_mstate_global->__pyx_n_s_maker_asset_data
#define __pyx_n_s_maker_asset_filled_amount __pyx_mstate_global->__pyx_n_s_maker_asset_filled_amount
#define __pyx_n_s_market __pyx_mstate_global->__pyx_n_s_market
#define __pyx_n_u_market_orders __pyx_mstate_global->__pyx_n_u_market_orders
#define __pyx_n_s_markets __pyx_mstate_global->__pyx_n_s_markets
#define __pyx_kp_u_markets_perPage_1000_include_ba __pyx_mstate_global->__pyx_kp_u_markets_perPage_1000_include_ba
#define __pyx_n_s_math __pyx_mstate_global->__pyx_n_s_math
#define __pyx_n_u_maxOrderSize __pyx_mstate_global->__pyx_n_u_maxOrderSize
#define __pyx_n_s_max_base_amount_with_decimals __pyx_mstate_global->__pyx_n_s_max_base_amount_with_decimals
#define __pyx_n_s_max_order_size __pyx_mstate_global->__pyx_n_s_max_order_size
#define __pyx_n_s_max_price_significant_digits __pyx_mstate_global->__pyx_n_s_max_price_significant_digits
#define __pyx_n_u_minOrderSize __pyx_mstate_global->__pyx_n_u_minOrderSize
#define __pyx_n_s_min_base_amount_increment __pyx_mstate_global->__pyx_n_s_min_base_amount_increment
#define __pyx_n_s_min_order_size __pyx_mstate_global->__pyx_n_s_min_order_size
#define __pyx_n_s_min_price_increment __pyx_mstate_global->__pyx_n_s_min_price_increment
#define __pyx_n_s_min_quote_amount_increment __pyx_mstate_global->__pyx_n_s_min_quote_amount_increment
#define __pyx_kp_u_must_be_greater_than_current_ti __pyx_mstate_global->__pyx_kp_u_must_be_greater_than_current_ti
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_network __pyx_mstate_global->__pyx_n_s_network
#define __pyx_n_s_network_status __pyx_mstate_global->__pyx_n_s_network_status
#define __pyx_n_s_null_address __pyx_mstate_global->__pyx_n_s_null_address
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_o __pyx_mstate_global->__pyx_n_s_o
#define __pyx_kp_u_of_the_limit_order __pyx_mstate_global->__pyx_kp_u_of_the_limit_order
#define __pyx_n_s_oid __pyx_mstate_global->__pyx_n_s_oid
#define __pyx_n_s_order __pyx_mstate_global->__pyx_n_s_order
#define __pyx_n_u_orderHash __pyx_mstate_global->__pyx_n_u_orderHash
#define __pyx_kp_u_order_amount __pyx_mstate_global->__pyx_kp_u_order_amount
#define __pyx_n_s_order_books __pyx_mstate_global->__pyx_n_s_order_books
#define __pyx_n_u_order_books_initialized __pyx_mstate_global->__pyx_n_u_order_books_initialized
#define __pyx_n_s_order_filled_base_token_amount __pyx_mstate_global->__pyx_n_s_order_filled_base_token_amount
#define __pyx_n_s_order_filled_quote_token_amount __pyx_mstate_global->__pyx_n_s_order_filled_quote_token_amount
#define __pyx_n_s_order_hash __pyx_mstate_global->__pyx_n_s_order_hash
#define __pyx_n_s_order_hash_hex __pyx_mstate_global->__pyx_n_s_order_hash_hex
#define __pyx_n_s_order_hashes __pyx_mstate_global->__pyx_n_s_order_hashes
#define __pyx_n_s_order_id __pyx_mstate_global->__pyx_n_s_order_id
#define __pyx_n_s_order_ids __pyx_mstate_global->__pyx_n_s_order_ids
#define __pyx_n_s_order_price __pyx_mstate_global->__pyx_n_s_order_price
#define __pyx_n_s_order_remaining_base_token_amoun __pyx_mstate_global->__pyx_n_s_order_remaining_base_token_amoun
#define __pyx_n_s_order_side __pyx_mstate_global->__pyx_n_s_order_side
#define __pyx_n_s_order_state __pyx_mstate_global->__pyx_n_s_order_state
#define __pyx_n_s_order_struct __pyx_mstate_global->__pyx_n_s_order_struct
#define __pyx_n_s_order_timestamp_diff __pyx_mstate_global->__pyx_n_s_order_timestamp_diff
#define __pyx_kp_u_order_to_Bamboo_Relay_Check_Eth __pyx_mstate_global->__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth
#define __pyx_kp_u_order_to_Bamboo_Relay_for __pyx_mstate_global->__pyx_kp_u_order_to_Bamboo_Relay_for
#define __pyx_n_s_order_type __pyx_mstate_global->__pyx_n_s_order_type
#define __pyx_n_s_order_update __pyx_mstate_global->__pyx_n_s_order_update
#define __pyx_n_s_order_updates __pyx_mstate_global->__pyx_n_s_order_updates
#define __pyx_kp_u_orders __pyx_mstate_global->__pyx_kp_u_orders
#define __pyx_n_s_orders_2 __pyx_mstate_global->__pyx_n_s_orders_2
#define __pyx_kp_u_orders_hashes __pyx_mstate_global->__pyx_kp_u_orders_hashes
#define __pyx_kp_u_out_of __pyx_mstate_global->__pyx_kp_u_out_of
#define __pyx_n_s_owner __pyx_mstate_global->__pyx_n_s_owner
#define __pyx_n_s_pair_split __pyx_mstate_global->__pyx_n_s_pair_split
#define __pyx_n_s_poll_interval __pyx_mstate_global->__pyx_n_s_poll_interval
#define __pyx_n_s_popleft __pyx_mstate_global->__pyx_n_s_popleft
#define __pyx_n_u_post __pyx_mstate_global->__pyx_n_u_post
#define __pyx_n_s_pre_emptive_soft_cancels __pyx_mstate_global->__pyx_n_s_pre_emptive_soft_cancels
#define __pyx_n_s_previous_amount_available __pyx_mstate_global->__pyx_n_s_previous_amount_available
#define __pyx_n_s_previous_is_cancelled __pyx_mstate_global->__pyx_n_s_previous_is_cancelled
#define __pyx_n_s_previous_is_done __pyx_mstate_global->__pyx_n_s_previous_is_done
#define __pyx_n_s_previous_is_expired __pyx_mstate_global->__pyx_n_s_previous_is_expired
#define __pyx_n_s_previous_is_failure __pyx_mstate_global->__pyx_n_s_previous_is_failure
#define __pyx_n_s_price __pyx_mstate_global->__pyx_n_s_price
#define __pyx_n_s_protocol_fee __pyx_mstate_global->__pyx_n_s_protocol_fee
#define __pyx_n_s_protocol_fee_amount __pyx_mstate_global->__pyx_n_s_protocol_fee_amount
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_q_amt __pyx_mstate_global->__pyx_n_s_q_amt
#define __pyx_n_s_q_price __pyx_mstate_global->__pyx_n_s_q_price
#define __pyx_n_u_quoteIncrement __pyx_mstate_global->__pyx_n_u_quoteIncrement
#define __pyx_n_u_quoteTokenDecimals __pyx_mstate_global->__pyx_n_u_quoteTokenDecimals
#define __pyx_n_s_quote_amount __pyx_mstate_global->__pyx_n_s_quote_amount
#define __pyx_n_s_quote_amount_with_decimals __pyx_mstate_global->__pyx_n_s_quote_amount_with_decimals
#define __pyx_n_s_quote_asset __pyx_mstate_global->__pyx_n_s_quote_asset
#define __pyx_n_s_quote_asset_decimals __pyx_mstate_global->__pyx_n_s_quote_asset_decimals
#define __pyx_n_s_quote_asset_increment __pyx_mstate_global->__pyx_n_s_quote_asset_increment
#define __pyx_n_s_quote_currency __pyx_mstate_global->__pyx_n_s_quote_currency
#define __pyx_n_s_quote_token_asset_data __pyx_mstate_global->__pyx_n_s_quote_token_asset_data
#define __pyx_n_s_ready __pyx_mstate_global->__pyx_n_s_ready
#define __pyx_n_s_receipt __pyx_mstate_global->__pyx_n_s_receipt
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_u_remainingBaseTokenAmount __pyx_mstate_global->__pyx_n_u_remainingBaseTokenAmount
#define __pyx_n_u_remainingQuoteTokenAmount __pyx_mstate_global->__pyx_n_u_remainingQuoteTokenAmount
#define __pyx_n_s_remaining_base_token_amount __pyx_mstate_global->__pyx_n_s_remaining_base_token_amount
#define __pyx_n_s_remaining_quote_token_amount __pyx_mstate_global->__pyx_n_s_remaining_quote_token_amount
#define __pyx_n_s_remove __pyx_mstate_global->__pyx_n_s_remove
#define __pyx_n_s_remove_0x_prefix __pyx_mstate_global->__pyx_n_s_remove_0x_prefix
#define __pyx_n_s_request __pyx_mstate_global->__pyx_n_s_request
#define __pyx_n_s_reset_state __pyx_mstate_global->__pyx_n_s_reset_state
#define __pyx_n_s_response __pyx_mstate_global->__pyx_n_s_response
#define __pyx_n_s_response_data __pyx_mstate_global->__pyx_n_s_response_data
#define __pyx_n_s_response_json __pyx_mstate_global->__pyx_n_s_response_json
#define __pyx_n_s_response_text __pyx_mstate_global->__pyx_n_s_response_text
#define __pyx_n_s_restore_tracking_states __pyx_mstate_global->__pyx_n_s_restore_tracking_states
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_retval __pyx_mstate_global->__pyx_n_s_retval
#define __pyx_n_s_reverse __pyx_mstate_global->__pyx_n_s_reverse
#define __pyx_kp_u_rinkeby_0x __pyx_mstate_global->__pyx_kp_u_rinkeby_0x
#define __pyx_kp_u_ropsten_0x __pyx_mstate_global->__pyx_kp_u_ropsten_0x
#define __pyx_n_s_rounding __pyx_mstate_global->__pyx_n_s_rounding
#define __pyx_n_s_s_decimal_0 __pyx_mstate_global->__pyx_n_s_s_decimal_0
#define __pyx_n_s_s_decimal_NaN __pyx_mstate_global->__pyx_n_s_s_decimal_NaN
#define __pyx_n_s_safe_ensure_future __pyx_mstate_global->__pyx_n_s_safe_ensure_future
#define __pyx_n_s_safe_gather __pyx_mstate_global->__pyx_n_s_safe_gather
#define __pyx_n_u_salt __pyx_mstate_global->__pyx_n_u_salt
#define __pyx_n_s_saved_states __pyx_mstate_global->__pyx_n_s_saved_states
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__events_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__events_cannot_be_converted
#define __pyx_kp_u_sell __pyx_mstate_global->__pyx_kp_u_sell
#define __pyx_n_s_sell_2 __pyx_mstate_global->__pyx_n_s_sell_2
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_u_senderAddress __pyx_mstate_global->__pyx_n_u_senderAddress
#define __pyx_n_s_set __pyx_mstate_global->__pyx_n_s_set
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_sign_hash __pyx_mstate_global->__pyx_n_s_sign_hash
#define __pyx_n_s_signature __pyx_mstate_global->__pyx_n_s_signature
#define __pyx_n_u_signature __pyx_mstate_global->__pyx_n_u_signature
#define __pyx_n_s_signatures __pyx_mstate_global->__pyx_n_s_signatures
#define __pyx_n_s_signed_limit_order __pyx_mstate_global->__pyx_n_s_signed_limit_order
#define __pyx_n_s_signed_market_order __pyx_mstate_global->__pyx_n_s_signed_market_order
#define __pyx_n_s_sleep __pyx_mstate_global->__pyx_n_s_sleep
#define __pyx_n_s_soft_cancel_order __pyx_mstate_global->__pyx_n_s_soft_cancel_order
#define __pyx_n_s_soft_cancel_result __pyx_mstate_global->__pyx_n_s_soft_cancel_result
#define __pyx_n_s_sorted __pyx_mstate_global->__pyx_n_s_sorted
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_spender __pyx_mstate_global->__pyx_n_s_spender
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_start_network __pyx_mstate_global->__pyx_n_s_start_network
#define __pyx_n_u_state __pyx_mstate_global->__pyx_n_u_state
#define __pyx_n_s_status __pyx_mstate_global->__pyx_n_s_status
#define __pyx_n_u_status __pyx_mstate_global->__pyx_n_u_status
#define __pyx_n_s_status_dict __pyx_mstate_global->__pyx_n_s_status_dict
#define __pyx_n_s_status_polling_loop __pyx_mstate_global->__pyx_n_s_status_polling_loop
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_stop_network __pyx_mstate_global->__pyx_n_s_stop_network
#define __pyx_n_s_stop_network_2 __pyx_mstate_global->__pyx_n_s_stop_network_2
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_submit_limit_order __pyx_mstate_global->__pyx_n_s_submit_limit_order
#define __pyx_n_s_submit_market_order __pyx_mstate_global->__pyx_n_s_submit_market_order
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_u_takerAddress __pyx_mstate_global->__pyx_n_u_takerAddress
#define __pyx_n_u_takerAssetAmount __pyx_mstate_global->__pyx_n_u_takerAssetAmount
#define __pyx_n_u_takerAssetData __pyx_mstate_global->__pyx_n_u_takerAssetData
#define __pyx_n_u_takerFee __pyx_mstate_global->__pyx_n_u_takerFee
#define __pyx_n_u_takerFeeAssetData __pyx_mstate_global->__pyx_n_u_takerFeeAssetData
#define __pyx_n_s_taker_asset_amount __pyx_mstate_global->__pyx_n_s_taker_asset_amount
#define __pyx_n_s_taker_asset_data __pyx_mstate_global->__pyx_n_s_taker_asset_data
#define __pyx_n_s_taker_asset_fill_amount __pyx_mstate_global->__pyx_n_s_taker_asset_fill_amount
#define __pyx_n_s_taker_asset_fill_amounts __pyx_mstate_global->__pyx_n_s_taker_asset_fill_amounts
#define __pyx_n_s_taker_asset_filled_amount __pyx_mstate_global->__pyx_n_s_taker_asset_filled_amount
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_kp_u_testrpc_0x __pyx_mstate_global->__pyx_kp_u_testrpc_0x
#define __pyx_n_s_text __pyx_mstate_global->__pyx_n_s_text
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_n_s_timeout __pyx_mstate_global->__pyx_n_s_timeout
#define __pyx_n_s_timeout_seconds __pyx_mstate_global->__pyx_n_s_timeout_seconds
#define __pyx_n_s_toChecksumAddress __pyx_mstate_global->__pyx_n_s_toChecksumAddress
#define __pyx_n_s_toHex __pyx_mstate_global->__pyx_n_s_toHex
#define __pyx_n_s_to_integral_exact __pyx_mstate_global->__pyx_n_s_to_integral_exact
#define __pyx_n_s_to_json __pyx_mstate_global->__pyx_n_s_to_json
#define __pyx_n_s_to_limit_order __pyx_mstate_global->__pyx_n_s_to_limit_order
#define __pyx_n_u_token_approval __pyx_mstate_global->__pyx_n_u_token_approval
#define __pyx_kp_u_tokens __pyx_mstate_global->__pyx_kp_u_tokens
#define __pyx_n_s_tokens_2 __pyx_mstate_global->__pyx_n_s_tokens_2
#define __pyx_n_s_total_balances __pyx_mstate_global->__pyx_n_s_total_balances
#define __pyx_n_s_total_base_token_amount __pyx_mstate_global->__pyx_n_s_total_base_token_amount
#define __pyx_n_s_total_quote_token_amount __pyx_mstate_global->__pyx_n_s_total_quote_token_amount
#define __pyx_n_s_tracked_limit_order __pyx_mstate_global->__pyx_n_s_tracked_limit_order
#define __pyx_n_s_tracked_limit_orders __pyx_mstate_global->__pyx_n_s_tracked_limit_orders
#define __pyx_n_s_tracked_market_order __pyx_mstate_global->__pyx_n_s_tracked_market_order
#define __pyx_n_s_tracked_market_orders __pyx_mstate_global->__pyx_n_s_tracked_market_orders
#define __pyx_n_s_tracked_order __pyx_mstate_global->__pyx_n_s_tracked_order
#define __pyx_n_s_trade_type __pyx_mstate_global->__pyx_n_s_trade_type
#define __pyx_n_s_trade_type_desc __pyx_mstate_global->__pyx_n_s_trade_type_desc
#define __pyx_n_s_trading_pair __pyx_mstate_global->__pyx_n_s_trading_pair
#define __pyx_n_s_trading_pair_rules __pyx_mstate_global->__pyx_n_s_trading_pair_rules
#define __pyx_n_s_trading_pairs __pyx_mstate_global->__pyx_n_s_trading_pairs
#define __pyx_n_s_trading_required __pyx_mstate_global->__pyx_n_s_trading_required
#define __pyx_n_s_trading_rule __pyx_mstate_global->__pyx_n_s_trading_rule
#define __pyx_n_u_trading_rule_initialized __pyx_mstate_global->__pyx_n_u_trading_rule_initialized
#define __pyx_n_s_trading_rules __pyx_mstate_global->__pyx_n_s_trading_rules
#define __pyx_n_s_trading_rules_list __pyx_mstate_global->__pyx_n_s_trading_rules_list
#define __pyx_n_u_transactionHash __pyx_mstate_global->__pyx_n_u_transactionHash
#define __pyx_n_s_tx_hash __pyx_mstate_global->__pyx_n_s_tx_hash
#define __pyx_n_s_tx_hash_receipt __pyx_mstate_global->__pyx_n_s_tx_hash_receipt
#define __pyx_n_s_tx_hashes __pyx_mstate_global->__pyx_n_s_tx_hashes
#define __pyx_n_s_type_str __pyx_mstate_global->__pyx_n_s_type_str
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_unsigned_limit_order __pyx_mstate_global->__pyx_n_s_unsigned_limit_order
#define __pyx_n_s_unsigned_order __pyx_mstate_global->__pyx_n_s_unsigned_order
#define __pyx_n_s_unwatch_order_hash __pyx_mstate_global->__pyx_n_s_unwatch_order_hash
#define __pyx_n_s_unwrap_eth __pyx_mstate_global->__pyx_n_s_unwrap_eth
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_update_available_balances __pyx_mstate_global->__pyx_n_s_update_available_balances
#define __pyx_n_s_update_balances __pyx_mstate_global->__pyx_n_s_update_balances
#define __pyx_n_s_update_limit_order_status __pyx_mstate_global->__pyx_n_s_update_limit_order_status
#define __pyx_n_s_update_market_order_status __pyx_mstate_global->__pyx_n_s_update_market_order_status
#define __pyx_n_s_update_single_limit_order __pyx_mstate_global->__pyx_n_s_update_single_limit_order
#define __pyx_n_s_update_trading_rules __pyx_mstate_global->__pyx_n_s_update_trading_rules
#define __pyx_n_s_url __pyx_mstate_global->__pyx_n_s_url
#define __pyx_n_s_use_coordinator __pyx_mstate_global->__pyx_n_s_use_coordinator
#define __pyx_n_s_valid_orders __pyx_mstate_global->__pyx_n_s_valid_orders
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_wait __pyx_mstate_global->__pyx_n_s_wait
#define __pyx_n_s_wallet __pyx_mstate_global->__pyx_n_s_wallet
#define __pyx_n_s_watch_order_hash __pyx_mstate_global->__pyx_n_s_watch_order_hash
#define __pyx_n_s_web3 __pyx_mstate_global->__pyx_n_s_web3
#define __pyx_n_s_web3_exceptions __pyx_mstate_global->__pyx_n_s_web3_exceptions
#define __pyx_kp_u_will_be_pre_emptively_soft_canc __pyx_mstate_global->__pyx_kp_u_will_be_pre_emptively_soft_canc
#define __pyx_n_s_wrap_eth __pyx_mstate_global->__pyx_n_s_wrap_eth
#define __pyx_n_u_zeroExOrder __pyx_mstate_global->__pyx_n_u_zeroExOrder
#define __pyx_n_s_zero_ex_order __pyx_mstate_global->__pyx_n_s_zero_ex_order
#define __pyx_n_s_zeroex_fill_watcher __pyx_mstate_global->__pyx_n_s_zeroex_fill_watcher
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_5 __pyx_mstate_global->__pyx_float_0_5
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_6_0 __pyx_mstate_global->__pyx_float_6_0
#define __pyx_float_10_0 __pyx_mstate_global->__pyx_float_10_0
#define __pyx_float_1e18 __pyx_mstate_global->__pyx_float_1e18
#define __pyx_float_30_0 __pyx_mstate_global->__pyx_float_30_0
#define __pyx_float_60_0 __pyx_mstate_global->__pyx_float_60_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_120 __pyx_mstate_global->__pyx_int_120
#define __pyx_int_200 __pyx_mstate_global->__pyx_int_200
#define __pyx_int_201 __pyx_mstate_global->__pyx_int_201
#define __pyx_int_502 __pyx_mstate_global->__pyx_int_502
#define __pyx_k__31 __pyx_mstate_global->__pyx_k__31
#define __pyx_k__32 __pyx_mstate_global->__pyx_k__32
#define __pyx_k__33 __pyx_mstate_global->__pyx_k__33
#define __pyx_k__34 __pyx_mstate_global->__pyx_k__34
#define __pyx_k__35 __pyx_mstate_global->__pyx_k__35
#define __pyx_k__36 __pyx_mstate_global->__pyx_k__36
#define __pyx_k__45 __pyx_mstate_global->__pyx_k__45
#define __pyx_k__46 __pyx_mstate_global->__pyx_k__46
#define __pyx_k__47 __pyx_mstate_global->__pyx_k__47
#define __pyx_k__48 __pyx_mstate_global->__pyx_k__48
#define __pyx_k__49 __pyx_mstate_global->__pyx_k__49
#define __pyx_k__108 __pyx_mstate_global->__pyx_k__108
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__71 __pyx_mstate_global->__pyx_tuple__71
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_tuple__99 __pyx_mstate_global->__pyx_tuple__99
#define __pyx_codeobj__2 __pyx_mstate_global->__pyx_codeobj__2
#define __pyx_codeobj__3 __pyx_mstate_global->__pyx_codeobj__3
#define __pyx_codeobj__6 __pyx_mstate_global->__pyx_codeobj__6
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__117 __pyx_mstate_global->__pyx_tuple__117
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__121 __pyx_mstate_global->__pyx_tuple__121
#define __pyx_tuple__123 __pyx_mstate_global->__pyx_tuple__123
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#endif
/* #### Code section: module_code ### */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":108
 *         BambooRelayExchange _owner
 * 
 *     def __init__(self, owner: BambooRelayExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_owner = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_owner)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner), __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, 1, "owner", 0))) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":109
 * 
 *     def __init__(self, owner: BambooRelayExchange):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":110
 *     def __init__(self, owner: BambooRelayExchange):
 *         super().__init__()
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_owner);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_owner);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_owner);
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":108
 *         BambooRelayExchange _owner
 * 
 *     def __init__(self, owner: BambooRelayExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":112
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_timeout_tx", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":113
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_timeout_tx(tx_id)
 * 
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->c_did_timeout_tx(((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self), __pyx_v_tx_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":114
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_owner), __pyx_n_s_c_did_timeout_tx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_tx_id};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":112
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.c_did_timeout_tx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_2__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_4__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":137
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger = {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("logger", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "logger", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":140
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 *         if brm_logger is None:             # <<<<<<<<<<<<<<
 *             brm_logger = logging.getLogger(__name__)
 *         return brm_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_brm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":141
 *         global brm_logger
 *         if brm_logger is None:
 *             brm_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return brm_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_brm_logger, __pyx_t_1) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":140
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 *         if brm_logger is None:             # <<<<<<<<<<<<<<
 *             brm_logger = logging.getLogger(__name__)
 *         return brm_logger
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":142
 *         if brm_logger is None:
 *             brm_logger = logging.getLogger(__name__)
 *         return brm_logger             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_brm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":137
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":144
 *         return brm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  wallet: Web3Wallet,
 *                  ethereum_rpc_url: str,
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_wallet = 0;
  PyObject *__pyx_v_ethereum_rpc_url = 0;
  double __pyx_v_poll_interval;
  PyObject *__pyx_v_trading_pairs = 0;
  PyObject *__pyx_v_use_coordinator = 0;
  PyObject *__pyx_v_pre_emptive_soft_cancels = 0;
  PyObject *__pyx_v_trading_required = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wallet,&__pyx_n_s_ethereum_rpc_url,&__pyx_n_s_poll_interval,&__pyx_n_s_trading_pairs,&__pyx_n_s_use_coordinator,&__pyx_n_s_pre_emptive_soft_cancels,&__pyx_n_s_trading_required,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wallet,&__pyx_n_s_ethereum_rpc_url,&__pyx_n_s_poll_interval,&__pyx_n_s_trading_pairs,&__pyx_n_s_use_coordinator,&__pyx_n_s_pre_emptive_soft_cancels,&__pyx_n_s_trading_required,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":148
 *                  ethereum_rpc_url: str,
 *                  poll_interval: float = 5.0,
 *                  trading_pairs: Optional[List[str]] = None,             # <<<<<<<<<<<<<<
 *                  use_coordinator: Optional[bool] = True,
 *                  pre_emptive_soft_cancels: Optional[bool] = True,
 */
    values[3] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":149
 *                  poll_interval: float = 5.0,
 *                  trading_pairs: Optional[List[str]] = None,
 *                  use_coordinator: Optional[bool] = True,             # <<<<<<<<<<<<<<
 *                  pre_emptive_soft_cancels: Optional[bool] = True,
 *                  trading_required: bool = True):
 */
    values[4] = ((PyObject *)Py_True);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":150
 *                  trading_pairs: Optional[List[str]] = None,
 *                  use_coordinator: Optional[bool] = True,
 *                  pre_emptive_soft_cancels: Optional[bool] = True,             # <<<<<<<<<<<<<<
 *                  trading_required: bool = True):
 *         cdef:
 */
    values[5] = ((PyObject *)Py_True);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":151
 *                  use_coordinator: Optional[bool] = True,
 *                  pre_emptive_soft_cancels: Optional[bool] = True,
 *                  trading_required: bool = True):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str coordinator_address
 */
    values[6] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wallet)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ethereum_rpc_url)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 7, 1); __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_poll_interval);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pairs);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_use_coordinator);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pre_emptive_soft_cancels);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_required);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 144, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_wallet = values[0];
    __pyx_v_ethereum_rpc_url = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_poll_interval = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_poll_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L3_error)
    } else {
      __pyx_v_poll_interval = ((double)5.0);
    }
    __pyx_v_trading_pairs = values[3];
    __pyx_v_use_coordinator = values[4];
    __pyx_v_pre_emptive_soft_cancels = values[5];
    __pyx_v_trading_required = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 7, __pyx_nargs); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ethereum_rpc_url), (&PyUnicode_Type), 1, "ethereum_rpc_url", 1))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_2__init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_wallet, __pyx_v_ethereum_rpc_url, __pyx_v_poll_interval, __pyx_v_trading_pairs, __pyx_v_use_coordinator, __pyx_v_pre_emptive_soft_cancels, __pyx_v_trading_required);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":144
 *         return brm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  wallet: Web3Wallet,
 *                  ethereum_rpc_url: str,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_wallet, PyObject *__pyx_v_ethereum_rpc_url, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_use_coordinator, PyObject *__pyx_v_pre_emptive_soft_cancels, PyObject *__pyx_v_trading_required) {
  PyObject *__pyx_v_coordinator_registry_address = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":156
 *             str coordinator_registry_address
 *             int chain_id
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._trading_required = trading_required
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":157
 *             int chain_id
 *         super().__init__()
 *         self._trading_required = trading_required             # <<<<<<<<<<<<<<
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,
 *                                                                chain=wallet.chain)
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_trading_required); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_v_self->__pyx_base.__pyx_base._trading_required = __pyx_t_5;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":158
 *         super().__init__()
 *         self._trading_required = trading_required
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,             # <<<<<<<<<<<<<<
 *                                                                chain=wallet.chain)
 *         self._ev_loop = asyncio.get_event_loop()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BambooRelayOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pairs, __pyx_v_trading_pairs) < 0) __PYX_ERR(0, 158, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":159
 *         self._trading_required = trading_required
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,
 *                                                                chain=wallet.chain)             # <<<<<<<<<<<<<<
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._poll_notifier = asyncio.Event()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chain, __pyx_t_3) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":158
 *         super().__init__()
 *         self._trading_required = trading_required
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,             # <<<<<<<<<<<<<<
 *                                                                chain=wallet.chain)
 *         self._ev_loop = asyncio.get_event_loop()
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __pyx_v_self->__pyx_base._order_book_tracker = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":160
 *         self._order_book_tracker = BambooRelayOrderBookTracker(trading_pairs=trading_pairs,
 *                                                                chain=wallet.chain)
 *         self._ev_loop = asyncio.get_event_loop()             # <<<<<<<<<<<<<<
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_event_loop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_ev_loop);
  __Pyx_DECREF(__pyx_v_self->_ev_loop);
  __pyx_v_self->_ev_loop = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":161
 *                                                                chain=wallet.chain)
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._last_failed_limit_order_timestamp = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Event); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_poll_notifier);
  __Pyx_DECREF(__pyx_v_self->_poll_notifier);
  __pyx_v_self->_poll_notifier = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":162
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_failed_limit_order_timestamp = 0
 *         self._last_update_limit_order_timestamp = 0
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":163
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0
 *         self._last_failed_limit_order_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_update_limit_order_timestamp = 0
 *         self._last_update_market_order_timestamp = 0
 */
  __pyx_v_self->_last_failed_limit_order_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":164
 *         self._last_timestamp = 0
 *         self._last_failed_limit_order_timestamp = 0
 *         self._last_update_limit_order_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_update_market_order_timestamp = 0
 *         self._last_update_trading_rules_timestamp = 0
 */
  __pyx_v_self->_last_update_limit_order_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":165
 *         self._last_failed_limit_order_timestamp = 0
 *         self._last_update_limit_order_timestamp = 0
 *         self._last_update_market_order_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_update_trading_rules_timestamp = 0
 *         self._last_update_available_balance_timestamp = 0
 */
  __pyx_v_self->_last_update_market_order_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":166
 *         self._last_update_limit_order_timestamp = 0
 *         self._last_update_market_order_timestamp = 0
 *         self._last_update_trading_rules_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_update_available_balance_timestamp = 0
 *         self._poll_interval = poll_interval
 */
  __pyx_v_self->_last_update_trading_rules_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":167
 *         self._last_update_market_order_timestamp = 0
 *         self._last_update_trading_rules_timestamp = 0
 *         self._last_update_available_balance_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._poll_interval = poll_interval
 *         self._in_flight_limit_orders = {}   # limit orders are off chain
 */
  __pyx_v_self->_last_update_available_balance_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":168
 *         self._last_update_trading_rules_timestamp = 0
 *         self._last_update_available_balance_timestamp = 0
 *         self._poll_interval = poll_interval             # <<<<<<<<<<<<<<
 *         self._in_flight_limit_orders = {}   # limit orders are off chain
 *         self._in_flight_market_orders = {}  # market orders are on chain
 */
  __pyx_v_self->_poll_interval = __pyx_v_poll_interval;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":169
 *         self._last_update_available_balance_timestamp = 0
 *         self._poll_interval = poll_interval
 *         self._in_flight_limit_orders = {}   # limit orders are off chain             # <<<<<<<<<<<<<<
 *         self._in_flight_market_orders = {}  # market orders are on chain
 *         self._in_flight_pending_limit_orders = OrderedDict()  # in the case that an order needs to be cancelled before its been accepted
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_limit_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_limit_orders);
  __pyx_v_self->_in_flight_limit_orders = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":170
 *         self._poll_interval = poll_interval
 *         self._in_flight_limit_orders = {}   # limit orders are off chain
 *         self._in_flight_market_orders = {}  # market orders are on chain             # <<<<<<<<<<<<<<
 *         self._in_flight_pending_limit_orders = OrderedDict()  # in the case that an order needs to be cancelled before its been accepted
 *         self._in_flight_cancels = OrderedDict()
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_market_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_market_orders);
  __pyx_v_self->_in_flight_market_orders = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":171
 *         self._in_flight_limit_orders = {}   # limit orders are off chain
 *         self._in_flight_market_orders = {}  # market orders are on chain
 *         self._in_flight_pending_limit_orders = OrderedDict()  # in the case that an order needs to be cancelled before its been accepted             # <<<<<<<<<<<<<<
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_pending_limit_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_pending_limit_orders);
  __pyx_v_self->_in_flight_pending_limit_orders = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":172
 *         self._in_flight_market_orders = {}  # market orders are on chain
 *         self._in_flight_pending_limit_orders = OrderedDict()  # in the case that an order needs to be cancelled before its been accepted
 *         self._in_flight_cancels = OrderedDict()             # <<<<<<<<<<<<<<
 *         self._in_flight_pending_cancels = OrderedDict()
 *         self._filled_order_hashes = []      # To prevent market filling trying to overfill an inflight market order that's pending
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_cancels);
  __Pyx_DECREF(__pyx_v_self->_in_flight_cancels);
  __pyx_v_self->_in_flight_cancels = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":173
 *         self._in_flight_pending_limit_orders = OrderedDict()  # in the case that an order needs to be cancelled before its been accepted
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()             # <<<<<<<<<<<<<<
 *         self._filled_order_hashes = []      # To prevent market filling trying to overfill an inflight market order that's pending
 *         self._order_expiry_queue = deque()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_pending_cancels);
  __Pyx_DECREF(__pyx_v_self->_in_flight_pending_cancels);
  __pyx_v_self->_in_flight_pending_cancels = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":174
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()
 *         self._filled_order_hashes = []      # To prevent market filling trying to overfill an inflight market order that's pending             # <<<<<<<<<<<<<<
 *         self._order_expiry_queue = deque()
 *         self._tx_tracker = BambooRelayTransactionTracker(self)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_filled_order_hashes);
  __Pyx_DECREF(__pyx_v_self->_filled_order_hashes);
  __pyx_v_self->_filled_order_hashes = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":175
 *         self._in_flight_pending_cancels = OrderedDict()
 *         self._filled_order_hashes = []      # To prevent market filling trying to overfill an inflight market order that's pending
 *         self._order_expiry_queue = deque()             # <<<<<<<<<<<<<<
 *         self._tx_tracker = BambooRelayTransactionTracker(self)
 *         self._w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_order_expiry_queue);
  __Pyx_DECREF(__pyx_v_self->_order_expiry_queue);
  __pyx_v_self->_order_expiry_queue = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":176
 *         self._filled_order_hashes = []      # To prevent market filling trying to overfill an inflight market order that's pending
 *         self._order_expiry_queue = deque()
 *         self._tx_tracker = BambooRelayTransactionTracker(self)             # <<<<<<<<<<<<<<
 *         self._w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
 *         self._provider = Web3.HTTPProvider(ethereum_rpc_url)
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_tx_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_tx_tracker);
  __pyx_v_self->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":177
 *         self._order_expiry_queue = deque()
 *         self._tx_tracker = BambooRelayTransactionTracker(self)
 *         self._w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))             # <<<<<<<<<<<<<<
 *         self._provider = Web3.HTTPProvider(ethereum_rpc_url)
 *         self._trading_rules = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Web3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_HTTPProvider); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_ethereum_rpc_url};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_w3);
  __Pyx_DECREF(__pyx_v_self->_w3);
  __pyx_v_self->_w3 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":178
 *         self._tx_tracker = BambooRelayTransactionTracker(self)
 *         self._w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
 *         self._provider = Web3.HTTPProvider(ethereum_rpc_url)             # <<<<<<<<<<<<<<
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_HTTPProvider); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ethereum_rpc_url};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_provider);
  __Pyx_DECREF(__pyx_v_self->_provider);
  __pyx_v_self->_provider = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":179
 *         self._w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
 *         self._provider = Web3.HTTPProvider(ethereum_rpc_url)
 *         self._trading_rules = {}             # <<<<<<<<<<<<<<
 *         self._pending_approval_tx_hashes = set()
 *         self._status_polling_task = None
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules);
  __Pyx_DECREF(__pyx_v_self->_trading_rules);
  __pyx_v_self->_trading_rules = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":180
 *         self._provider = Web3.HTTPProvider(ethereum_rpc_url)
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()             # <<<<<<<<<<<<<<
 *         self._status_polling_task = None
 *         self._approval_tx_polling_task = None
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_pending_approval_tx_hashes);
  __Pyx_DECREF(__pyx_v_self->_pending_approval_tx_hashes);
  __pyx_v_self->_pending_approval_tx_hashes = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":181
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()
 *         self._status_polling_task = None             # <<<<<<<<<<<<<<
 *         self._approval_tx_polling_task = None
 *         self._wallet = wallet
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":182
 *         self._pending_approval_tx_hashes = set()
 *         self._status_polling_task = None
 *         self._approval_tx_polling_task = None             # <<<<<<<<<<<<<<
 *         self._wallet = wallet
 *         self._use_coordinator = use_coordinator
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_approval_tx_polling_task);
  __Pyx_DECREF(__pyx_v_self->_approval_tx_polling_task);
  __pyx_v_self->_approval_tx_polling_task = Py_None;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":183
 *         self._status_polling_task = None
 *         self._approval_tx_polling_task = None
 *         self._wallet = wallet             # <<<<<<<<<<<<<<
 *         self._use_coordinator = use_coordinator
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels
 */
  __Pyx_INCREF(__pyx_v_wallet);
  __Pyx_GIVEREF(__pyx_v_wallet);
  __Pyx_GOTREF(__pyx_v_self->_wallet);
  __Pyx_DECREF(__pyx_v_self->_wallet);
  __pyx_v_self->_wallet = __pyx_v_wallet;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":184
 *         self._approval_tx_polling_task = None
 *         self._wallet = wallet
 *         self._use_coordinator = use_coordinator             # <<<<<<<<<<<<<<
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels
 *         self._latest_salt = -1
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_use_coordinator); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_v_self->_use_coordinator = __pyx_t_5;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":185
 *         self._wallet = wallet
 *         self._use_coordinator = use_coordinator
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels             # <<<<<<<<<<<<<<
 *         self._latest_salt = -1
 *         if wallet.chain is EthereumChain.MAIN_NET:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_pre_emptive_soft_cancels); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_v_self->_pre_emptive_soft_cancels = __pyx_t_5;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":186
 *         self._use_coordinator = use_coordinator
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels
 *         self._latest_salt = -1             # <<<<<<<<<<<<<<
 *         if wallet.chain is EthereumChain.MAIN_NET:
 *             self._chain_id = 1
 */
  __pyx_v_self->_latest_salt = -1L;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":187
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels
 *         self._latest_salt = -1
 *         if wallet.chain is EthereumChain.MAIN_NET:             # <<<<<<<<<<<<<<
 *             self._chain_id = 1
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MAIN_NET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_3 == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = (__pyx_t_5 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":188
 *         self._latest_salt = -1
 *         if wallet.chain is EthereumChain.MAIN_NET:
 *             self._chain_id = 1             # <<<<<<<<<<<<<<
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "main/0x"
 */
    __pyx_v_self->_chain_id = 1;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":189
 *         if wallet.chain is EthereumChain.MAIN_NET:
 *             self._chain_id = 1
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT             # <<<<<<<<<<<<<<
 *             self._api_prefix = "main/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_api_endpoint);
    __Pyx_DECREF(__pyx_v_self->_api_endpoint);
    __pyx_v_self->_api_endpoint = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":190
 *             self._chain_id = 1
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "main/0x"             # <<<<<<<<<<<<<<
 *             self._fee_recipient_address =BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_EXCHANGE_ADDRESS)
 */
    __Pyx_INCREF(__pyx_kp_u_main_0x);
    __Pyx_GIVEREF(__pyx_kp_u_main_0x);
    __Pyx_GOTREF(__pyx_v_self->_api_prefix);
    __Pyx_DECREF(__pyx_v_self->_api_prefix);
    __pyx_v_self->_api_prefix = __pyx_kp_u_main_0x;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":191
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "main/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS             # <<<<<<<<<<<<<<
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_fee_recipient_address);
    __Pyx_DECREF(__pyx_v_self->_fee_recipient_address);
    __pyx_v_self->_fee_recipient_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":192
 *             self._api_prefix = "main/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_EXCHANGE_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_exchange_address);
    __Pyx_DECREF(__pyx_v_self->_exchange_address);
    __pyx_v_self->_exchange_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":193
 *             self._fee_recipient_address =BAMBOO_RELAY_MAINNET_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_ADDRESS)             # <<<<<<<<<<<<<<
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_coordinator_address);
    __Pyx_DECREF(__pyx_v_self->_coordinator_address);
    __pyx_v_self->_coordinator_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":194
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ROPSTEN:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 194, __pyx_L1_error)
    __pyx_v_coordinator_registry_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":195
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)             # <<<<<<<<<<<<<<
 *         elif wallet.chain is EthereumChain.ROPSTEN:
 *             self._chain_id = 3
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_wallet_spender_address);
    __Pyx_DECREF(__pyx_v_self->_wallet_spender_address);
    __pyx_v_self->_wallet_spender_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":187
 *         self._pre_emptive_soft_cancels = pre_emptive_soft_cancels
 *         self._latest_salt = -1
 *         if wallet.chain is EthereumChain.MAIN_NET:             # <<<<<<<<<<<<<<
 *             self._chain_id = 1
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":196
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ROPSTEN:             # <<<<<<<<<<<<<<
 *             self._chain_id = 3
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ROPSTEN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = (__pyx_t_2 == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_8 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":197
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ROPSTEN:
 *             self._chain_id = 3             # <<<<<<<<<<<<<<
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "ropsten/0x"
 */
    __pyx_v_self->_chain_id = 3;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":198
 *         elif wallet.chain is EthereumChain.ROPSTEN:
 *             self._chain_id = 3
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT             # <<<<<<<<<<<<<<
 *             self._api_prefix = "ropsten/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_api_endpoint);
    __Pyx_DECREF(__pyx_v_self->_api_endpoint);
    __pyx_v_self->_api_endpoint = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":199
 *             self._chain_id = 3
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "ropsten/0x"             # <<<<<<<<<<<<<<
 *             self._fee_recipient_address =BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS)
 */
    __Pyx_INCREF(__pyx_kp_u_ropsten_0x);
    __Pyx_GIVEREF(__pyx_kp_u_ropsten_0x);
    __Pyx_GOTREF(__pyx_v_self->_api_prefix);
    __Pyx_DECREF(__pyx_v_self->_api_prefix);
    __pyx_v_self->_api_prefix = __pyx_kp_u_ropsten_0x;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":200
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "ropsten/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS             # <<<<<<<<<<<<<<
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_fee_recipient_address);
    __Pyx_DECREF(__pyx_v_self->_fee_recipient_address);
    __pyx_v_self->_fee_recipient_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":201
 *             self._api_prefix = "ropsten/0x"
 *             self._fee_recipient_address =BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_exchange_address);
    __Pyx_DECREF(__pyx_v_self->_exchange_address);
    __pyx_v_self->_exchange_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":202
 *             self._fee_recipient_address =BAMBOO_RELAY_ROPSTEN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS)             # <<<<<<<<<<<<<<
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_coordinator_address);
    __Pyx_DECREF(__pyx_v_self->_coordinator_address);
    __pyx_v_self->_coordinator_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":203
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.RINKEBY:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 203, __pyx_L1_error)
    __pyx_v_coordinator_registry_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":204
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)             # <<<<<<<<<<<<<<
 *         elif wallet.chain is EthereumChain.RINKEBY:
 *             self._chain_id = 4
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_wallet_spender_address);
    __Pyx_DECREF(__pyx_v_self->_wallet_spender_address);
    __pyx_v_self->_wallet_spender_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":196
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_MAINNET_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ROPSTEN:             # <<<<<<<<<<<<<<
 *             self._chain_id = 3
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":205
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.RINKEBY:             # <<<<<<<<<<<<<<
 *             self._chain_id = 4
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_RINKEBY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_1 == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = (__pyx_t_5 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":206
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.RINKEBY:
 *             self._chain_id = 4             # <<<<<<<<<<<<<<
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "rinkeby/0x"
 */
    __pyx_v_self->_chain_id = 4;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":207
 *         elif wallet.chain is EthereumChain.RINKEBY:
 *             self._chain_id = 4
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT             # <<<<<<<<<<<<<<
 *             self._api_prefix = "rinkeby/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_api_endpoint);
    __Pyx_DECREF(__pyx_v_self->_api_endpoint);
    __pyx_v_self->_api_endpoint = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":208
 *             self._chain_id = 4
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "rinkeby/0x"             # <<<<<<<<<<<<<<
 *             self._fee_recipient_address = BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_EXCHANGE_ADDRESS)
 */
    __Pyx_INCREF(__pyx_kp_u_rinkeby_0x);
    __Pyx_GIVEREF(__pyx_kp_u_rinkeby_0x);
    __Pyx_GOTREF(__pyx_v_self->_api_prefix);
    __Pyx_DECREF(__pyx_v_self->_api_prefix);
    __pyx_v_self->_api_prefix = __pyx_kp_u_rinkeby_0x;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":209
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "rinkeby/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS             # <<<<<<<<<<<<<<
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_fee_recipient_address);
    __Pyx_DECREF(__pyx_v_self->_fee_recipient_address);
    __pyx_v_self->_fee_recipient_address = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":210
 *             self._api_prefix = "rinkeby/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_EXCHANGE_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_exchange_address);
    __Pyx_DECREF(__pyx_v_self->_exchange_address);
    __pyx_v_self->_exchange_address = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":211
 *             self._fee_recipient_address = BAMBOO_RELAY_RINKEBY_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_ADDRESS)             # <<<<<<<<<<<<<<
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_coordinator_address);
    __Pyx_DECREF(__pyx_v_self->_coordinator_address);
    __pyx_v_self->_coordinator_address = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":212
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.KOVAN:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 212, __pyx_L1_error)
    __pyx_v_coordinator_registry_address = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":213
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)             # <<<<<<<<<<<<<<
 *         elif wallet.chain is EthereumChain.KOVAN:
 *             self._chain_id = 42
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_wallet_spender_address);
    __Pyx_DECREF(__pyx_v_self->_wallet_spender_address);
    __pyx_v_self->_wallet_spender_address = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":205
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_ROPSTEN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.RINKEBY:             # <<<<<<<<<<<<<<
 *             self._chain_id = 4
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":214
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.KOVAN:             # <<<<<<<<<<<<<<
 *             self._chain_id = 42
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_KOVAN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_3 == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_8 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":215
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.KOVAN:
 *             self._chain_id = 42             # <<<<<<<<<<<<<<
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "kovan/0x"
 */
    __pyx_v_self->_chain_id = 42;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":216
 *         elif wallet.chain is EthereumChain.KOVAN:
 *             self._chain_id = 42
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT             # <<<<<<<<<<<<<<
 *             self._api_prefix = "kovan/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_api_endpoint);
    __Pyx_DECREF(__pyx_v_self->_api_endpoint);
    __pyx_v_self->_api_endpoint = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":217
 *             self._chain_id = 42
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "kovan/0x"             # <<<<<<<<<<<<<<
 *             self._fee_recipient_address = BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_EXCHANGE_ADDRESS)
 */
    __Pyx_INCREF(__pyx_kp_u_kovan_0x);
    __Pyx_GIVEREF(__pyx_kp_u_kovan_0x);
    __Pyx_GOTREF(__pyx_v_self->_api_prefix);
    __Pyx_DECREF(__pyx_v_self->_api_prefix);
    __pyx_v_self->_api_prefix = __pyx_kp_u_kovan_0x;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":218
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 *             self._api_prefix = "kovan/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS             # <<<<<<<<<<<<<<
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_fee_recipient_address);
    __Pyx_DECREF(__pyx_v_self->_fee_recipient_address);
    __pyx_v_self->_fee_recipient_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":219
 *             self._api_prefix = "kovan/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_EXCHANGE_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_exchange_address);
    __Pyx_DECREF(__pyx_v_self->_exchange_address);
    __pyx_v_self->_exchange_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":220
 *             self._fee_recipient_address = BAMBOO_RELAY_KOVAN_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_ADDRESS)             # <<<<<<<<<<<<<<
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_coordinator_address);
    __Pyx_DECREF(__pyx_v_self->_coordinator_address);
    __pyx_v_self->_coordinator_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":221
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_v_coordinator_registry_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":222
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)             # <<<<<<<<<<<<<<
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:
 *             self._chain_id = 1337
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_wallet_spender_address);
    __Pyx_DECREF(__pyx_v_self->_wallet_spender_address);
    __pyx_v_self->_wallet_spender_address = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":214
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_RINKEBY_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.KOVAN:             # <<<<<<<<<<<<<<
 *             self._chain_id = 42
 *             self._api_endpoint = BAMBOO_RELAY_REST_ENDPOINT
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":223
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:             # <<<<<<<<<<<<<<
 *             self._chain_id = 1337
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_wallet, __pyx_n_s_chain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ZEROEX_TEST); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_2 == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_5 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":224
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:
 *             self._chain_id = 1337             # <<<<<<<<<<<<<<
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT
 *             self._api_prefix = "testrpc/0x"
 */
    __pyx_v_self->_chain_id = 0x539;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":225
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:
 *             self._chain_id = 1337
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT             # <<<<<<<<<<<<<<
 *             self._api_prefix = "testrpc/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_api_endpoint);
    __Pyx_DECREF(__pyx_v_self->_api_endpoint);
    __pyx_v_self->_api_endpoint = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":226
 *             self._chain_id = 1337
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT
 *             self._api_prefix = "testrpc/0x"             # <<<<<<<<<<<<<<
 *             self._fee_recipient_address = BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_TEST_EXCHANGE_ADDRESS)
 */
    __Pyx_INCREF(__pyx_kp_u_testrpc_0x);
    __Pyx_GIVEREF(__pyx_kp_u_testrpc_0x);
    __Pyx_GOTREF(__pyx_v_self->_api_prefix);
    __Pyx_DECREF(__pyx_v_self->_api_prefix);
    __pyx_v_self->_api_prefix = __pyx_kp_u_testrpc_0x;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":227
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT
 *             self._api_prefix = "testrpc/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS             # <<<<<<<<<<<<<<
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_TEST_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_fee_recipient_address);
    __Pyx_DECREF(__pyx_v_self->_fee_recipient_address);
    __pyx_v_self->_fee_recipient_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":228
 *             self._api_prefix = "testrpc/0x"
 *             self._fee_recipient_address = BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_TEST_EXCHANGE_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_exchange_address);
    __Pyx_DECREF(__pyx_v_self->_exchange_address);
    __pyx_v_self->_exchange_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":229
 *             self._fee_recipient_address = BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_TEST_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_ADDRESS)             # <<<<<<<<<<<<<<
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_coordinator_address);
    __Pyx_DECREF(__pyx_v_self->_coordinator_address);
    __pyx_v_self->_coordinator_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":230
 *             self._exchange_address = Web3.toChecksumAddress(ZERO_EX_TEST_EXCHANGE_ADDRESS)
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS)             # <<<<<<<<<<<<<<
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)
 *         self._exchange = ZeroExExchange(self._w3, self._exchange_address, wallet)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 230, __pyx_L1_error)
    __pyx_v_coordinator_registry_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":231
 *             self._coordinator_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_ADDRESS)
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)             # <<<<<<<<<<<<<<
 *         self._exchange = ZeroExExchange(self._w3, self._exchange_address, wallet)
 *         self._coordinator = ZeroExCoordinator(self._provider,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Web3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_toChecksumAddress); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ZERO_EX_TEST_ERC20_PROXY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_wallet_spender_address);
    __Pyx_DECREF(__pyx_v_self->_wallet_spender_address);
    __pyx_v_self->_wallet_spender_address = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":223
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_KOVAN_ERC20_PROXY)
 *         elif wallet.chain is EthereumChain.ZEROEX_TEST:             # <<<<<<<<<<<<<<
 *             self._chain_id = 1337
 *             self._api_endpoint = BAMBOO_RELAY_TEST_ENDPOINT
 */
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":232
 *             coordinator_registry_address = Web3.toChecksumAddress(ZERO_EX_TEST_COORDINATOR_REGISTRY_ADDRESS)
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)
 *         self._exchange = ZeroExExchange(self._w3, self._exchange_address, wallet)             # <<<<<<<<<<<<<<
 *         self._coordinator = ZeroExCoordinator(self._provider,
 *                                               self._w3,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZeroExExchange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_self->_w3, __pyx_v_self->_exchange_address, __pyx_v_wallet};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_exchange);
  __Pyx_DECREF(__pyx_v_self->_exchange);
  __pyx_v_self->_exchange = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":233
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)
 *         self._exchange = ZeroExExchange(self._w3, self._exchange_address, wallet)
 *         self._coordinator = ZeroExCoordinator(self._provider,             # <<<<<<<<<<<<<<
 *                                               self._w3,
 *                                               self._exchange_address,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ZeroExCoordinator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":237
 *                                               self._exchange_address,
 *                                               self._coordinator_address,
 *                                               coordinator_registry_address,             # <<<<<<<<<<<<<<
 *                                               wallet,
 *                                               self._chain_id)
 */
  if (unlikely(!__pyx_v_coordinator_registry_address)) { __Pyx_RaiseUnboundLocalError("coordinator_registry_address"); __PYX_ERR(0, 237, __pyx_L1_error) }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":239
 *                                               coordinator_registry_address,
 *                                               wallet,
 *                                               self._chain_id)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_chain_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[8] = {__pyx_t_7, __pyx_v_self->_provider, __pyx_v_self->_w3, __pyx_v_self->_exchange_address, __pyx_v_self->_coordinator_address, __pyx_v_coordinator_registry_address, __pyx_v_wallet, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 7+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":233
 *             self._wallet_spender_address = Web3.toChecksumAddress(ZERO_EX_TEST_ERC20_PROXY)
 *         self._exchange = ZeroExExchange(self._w3, self._exchange_address, wallet)
 *         self._coordinator = ZeroExCoordinator(self._provider,             # <<<<<<<<<<<<<<
 *                                               self._w3,
 *                                               self._exchange_address,
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_coordinator);
  __Pyx_DECREF(__pyx_v_self->_coordinator);
  __pyx_v_self->_coordinator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":144
 *         return brm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  wallet: Web3Wallet,
 *                  ethereum_rpc_url: str,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coordinator_registry_address);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":259
 *         return all(self.status_dict.values())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self) -> str:
 *         return "bamboo_relay"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":261
 *     @property
 *     def name(self) -> str:
 *         return "bamboo_relay"             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_u_bamboo_relay);
  __pyx_r = __pyx_n_u_bamboo_relay;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":259
 *         return all(self.status_dict.values())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self) -> str:
 *         return "bamboo_relay"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":245
 *         return "bamboo_relay"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":247
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {             # <<<<<<<<<<<<<<
 *             "order_books_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":248
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 *             "order_books_initialized": self._order_book_tracker.ready,             # <<<<<<<<<<<<<<
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 *             "account_available_balance": len(self._account_available_balances) > 0 if self._trading_required else True,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_ready); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_order_books_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":249
 *         return {
 *             "order_books_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *             "account_available_balance": len(self._account_available_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base._account_balances;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 249, __pyx_L1_error)
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 > 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_account_balance, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":250
 *             "order_books_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 *             "account_available_balance": len(self._account_available_balances) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,
 *             "token_approval": len(self._pending_approval_tx_hashes) == 0 if self._trading_required else True
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base._account_available_balances;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 250, __pyx_L1_error)
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 > 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_account_available_balance, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":251
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 *             "account_available_balance": len(self._account_available_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *             "token_approval": len(self._pending_approval_tx_hashes) == 0 if self._trading_required else True
 *         }
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->_trading_rules;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 251, __pyx_L1_error)
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 > 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_trading_rule_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":252
 *             "account_available_balance": len(self._account_available_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,
 *             "token_approval": len(self._pending_approval_tx_hashes) == 0 if self._trading_required else True             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->_pending_approval_tx_hashes;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_token_approval, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":245
 *         return "bamboo_relay"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.status_dict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":255
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":257
 *     @property
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_status_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":255
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.ready.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":263
 *         return "bamboo_relay"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":265
 *     @property
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":263
 *         return "bamboo_relay"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.order_books.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":267
 *         return self._order_book_tracker.order_books
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def wallet(self) -> Web3Wallet:
 *         return self._wallet
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":269
 *     @property
 *     def wallet(self) -> Web3Wallet:
 *         return self._wallet             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_wallet);
  __pyx_r = __pyx_v_self->_wallet;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":267
 *         return self._order_book_tracker.order_books
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def wallet(self) -> Web3Wallet:
 *         return self._wallet
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":271
 *         return self._wallet
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def use_coordinator(self) -> bool:
 *         return self._use_coordinator
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":273
 *     @property
 *     def use_coordinator(self) -> bool:
 *         return self._use_coordinator             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_use_coordinator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":271
 *         return self._wallet
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def use_coordinator(self) -> bool:
 *         return self._use_coordinator
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.use_coordinator.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":275
 *         return self._use_coordinator
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trading_rules(self) -> Dict[str, TradingRule]:
 *         return self._trading_rules
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":277
 *     @property
 *     def trading_rules(self) -> Dict[str, TradingRule]:
 *         return self._trading_rules             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_trading_rules);
  __pyx_r = __pyx_v_self->_trading_rules;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":275
 *         return self._use_coordinator
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trading_rules(self) -> Dict[str, TradingRule]:
 *         return self._trading_rules
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":279
 *         return self._trading_rules
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_limit_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_limit_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":281
 *     @property
 *     def in_flight_limit_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_limit_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_in_flight_limit_orders);
  __pyx_r = __pyx_v_self->_in_flight_limit_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":279
 *         return self._trading_rules
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_limit_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_limit_orders
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":283
 *         return self._in_flight_limit_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_market_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_market_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":285
 *     @property
 *     def in_flight_market_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_market_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_in_flight_market_orders);
  __pyx_r = __pyx_v_self->_in_flight_market_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":283
 *         return self._in_flight_limit_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_market_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return self._in_flight_market_orders
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":287
 *         return self._in_flight_market_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def limit_orders(self) -> List[LimitOrder]:
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_v_retval = 0;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_typed_in_flight_order = 0;
  PyObject *__pyx_v_expiring_order_ids = 0;
  PyObject *__pyx_v_in_flight_order = NULL;
  CYTHON_UNUSED PyObject *__pyx_7genexpr__pyx_v__ = NULL;
  PyObject *__pyx_7genexpr__pyx_v_order_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":290
 *     def limit_orders(self) -> List[LimitOrder]:
 *         cdef:
 *             list retval = []             # <<<<<<<<<<<<<<
 *             BambooRelayInFlightOrder typed_in_flight_order
 *             str base_currency
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retval = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":294
 *             str base_currency
 *             str quote_currency
 *             set expiring_order_ids = set([order_id for _, order_id in self._order_expiry_queue])             # <<<<<<<<<<<<<<
 * 
 *         for in_flight_order in self._in_flight_limit_orders.values():
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_self->_order_expiry_queue)) || PyTuple_CheckExact(__pyx_v_self->_order_expiry_queue)) {
      __pyx_t_2 = __pyx_v_self->_order_expiry_queue; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->_order_expiry_queue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 294, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 294, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 294, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 294, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 294, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 294, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 294, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 294, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 294, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v__, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_order_id, __pyx_t_7);
      __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_order_id))) __PYX_ERR(0, 294, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v__); __pyx_7genexpr__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_order_id); __pyx_7genexpr__pyx_v_order_id = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v__); __pyx_7genexpr__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_order_id); __pyx_7genexpr__pyx_v_order_id = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expiring_order_ids = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":296
 *             set expiring_order_ids = set([order_id for _, order_id in self._order_expiry_queue])
 * 
 *         for in_flight_order in self._in_flight_limit_orders.values():             # <<<<<<<<<<<<<<
 *             typed_in_flight_order = in_flight_order
 *             # Skip orders that are or have been cancelled but are still being tracked
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 296, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_limit_orders, 1, __pyx_n_s_values, (&__pyx_t_10), (&__pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_10, &__pyx_t_3, NULL, &__pyx_t_1, NULL, __pyx_t_11);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_in_flight_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":297
 * 
 *         for in_flight_order in self._in_flight_limit_orders.values():
 *             typed_in_flight_order = in_flight_order             # <<<<<<<<<<<<<<
 *             # Skip orders that are or have been cancelled but are still being tracked
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or
 */
    if (!(likely(((__pyx_v_in_flight_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_in_flight_order, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 297, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_in_flight_order;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_typed_in_flight_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":299
 *             typed_in_flight_order = in_flight_order
 *             # Skip orders that are or have been cancelled but are still being tracked
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = (__pyx_v_typed_in_flight_order->__pyx_base.order_type != __pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_15 = (__pyx_t_14 != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_13 = __pyx_t_15;
      goto __pyx_L14_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":300
 *             # Skip orders that are or have been cancelled but are still being tracked
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 *                     typed_in_flight_order.client_order_id in self._in_flight_pending_cancels or
 */
    __pyx_t_15 = (__Pyx_PySet_ContainsTF(__pyx_v_typed_in_flight_order->__pyx_base.client_order_id, __pyx_v_expiring_order_ids, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 300, __pyx_L1_error)
    __pyx_t_14 = (__pyx_t_15 != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_13 = __pyx_t_14;
      goto __pyx_L14_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":301
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.client_order_id in self._in_flight_pending_cancels or
 *                     typed_in_flight_order.has_been_cancelled):
 */
    __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_v_typed_in_flight_order->__pyx_base.client_order_id, __pyx_v_self->_in_flight_cancels, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 301, __pyx_L1_error)
    __pyx_t_15 = (__pyx_t_14 != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_13 = __pyx_t_15;
      goto __pyx_L14_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":302
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 *                     typed_in_flight_order.client_order_id in self._in_flight_pending_cancels or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.has_been_cancelled):
 *                 continue
 */
    __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_v_typed_in_flight_order->__pyx_base.client_order_id, __pyx_v_self->_in_flight_pending_cancels, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 302, __pyx_L1_error)
    __pyx_t_14 = (__pyx_t_15 != 0);
    if (!__pyx_t_14) {
    } else {
      __pyx_t_13 = __pyx_t_14;
      goto __pyx_L14_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":303
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 *                     typed_in_flight_order.client_order_id in self._in_flight_pending_cancels or
 *                     typed_in_flight_order.has_been_cancelled):             # <<<<<<<<<<<<<<
 *                 continue
 *             retval.append(typed_in_flight_order.to_limit_order())
 */
    __pyx_t_14 = (__pyx_v_typed_in_flight_order->has_been_cancelled != 0);
    __pyx_t_13 = __pyx_t_14;
    __pyx_L14_bool_binop_done:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":299
 *             typed_in_flight_order = in_flight_order
 *             # Skip orders that are or have been cancelled but are still being tracked
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 */
    if (__pyx_t_13) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":304
 *                     typed_in_flight_order.client_order_id in self._in_flight_pending_cancels or
 *                     typed_in_flight_order.has_been_cancelled):
 *                 continue             # <<<<<<<<<<<<<<
 *             retval.append(typed_in_flight_order.to_limit_order())
 *         return retval
 */
      goto __pyx_L11_continue;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":299
 *             typed_in_flight_order = in_flight_order
 *             # Skip orders that are or have been cancelled but are still being tracked
 *             if (typed_in_flight_order.order_type is not OrderType.LIMIT or             # <<<<<<<<<<<<<<
 *                     typed_in_flight_order.client_order_id in expiring_order_ids or
 *                     typed_in_flight_order.client_order_id in self._in_flight_cancels or
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":305
 *                     typed_in_flight_order.has_been_cancelled):
 *                 continue
 *             retval.append(typed_in_flight_order.to_limit_order())             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_typed_in_flight_order), __pyx_n_s_to_limit_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_12 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_7, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_L11_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":306
 *                 continue
 *             retval.append(typed_in_flight_order.to_limit_order())
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":287
 *         return self._in_flight_market_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def limit_orders(self) -> List[LimitOrder]:
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF((PyObject *)__pyx_v_typed_in_flight_order);
  __Pyx_XDECREF(__pyx_v_expiring_order_ids);
  __Pyx_XDECREF(__pyx_v_in_flight_order);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v__);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":308
 *         return retval
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_8genexpr1__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_value = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":310
 *     @property
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {             # <<<<<<<<<<<<<<
 *             "market_orders": {
 *                 key: value.to_json()
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":311
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 *             "market_orders": {             # <<<<<<<<<<<<<<
 *                 key: value.to_json()
 *                 for key, value in self._in_flight_market_orders.items()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { /* enter inner scope */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":313
 *             "market_orders": {
 *                 key: value.to_json()
 *                 for key, value in self._in_flight_market_orders.items()             # <<<<<<<<<<<<<<
 *             },
 *             "limit_orders": {
 */
    __pyx_t_4 = 0;
    if (unlikely(__pyx_v_self->_in_flight_market_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 313, __pyx_L5_error)
    }
    __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_market_orders, 1, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 313, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_key, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":312
 *         return {
 *             "market_orders": {
 *                 key: value.to_json()             # <<<<<<<<<<<<<<
 *                 for key, value in self._in_flight_market_orders.items()
 *             },
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_value, __pyx_n_s_to_json); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_10, };
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 312, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_8genexpr1__pyx_v_key, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 312, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value); __pyx_8genexpr1__pyx_v_value = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value); __pyx_8genexpr1__pyx_v_value = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_market_orders, __pyx_t_2) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":315
 *                 for key, value in self._in_flight_market_orders.items()
 *             },
 *             "limit_orders": {             # <<<<<<<<<<<<<<
 *                 key: value.to_json()
 *                 for key, value in self._in_flight_limit_orders.items()
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":317
 *             "limit_orders": {
 *                 key: value.to_json()
 *                 for key, value in self._in_flight_limit_orders.items()             # <<<<<<<<<<<<<<
 *             }
 *         }
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 317, __pyx_L11_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_limit_orders, 1, __pyx_n_s_items, (&__pyx_t_4), (&__pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_4, &__pyx_t_5, &__pyx_t_8, &__pyx_t_7, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 317, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_key, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":316
 *             },
 *             "limit_orders": {
 *                 key: value.to_json()             # <<<<<<<<<<<<<<
 *                 for key, value in self._in_flight_limit_orders.items()
 *             }
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_value, __pyx_n_s_to_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 316, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_9 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_10, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 316, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(PyDict_SetItem(__pyx_t_2, (PyObject*)__pyx_8genexpr2__pyx_v_key, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 316, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L14_exit_scope;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L1_error;
    __pyx_L14_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_limit_orders, __pyx_t_2) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":308
 *         return retval
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.tracking_states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":321
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":323
 *     @property
 *     def in_flight_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}             # <<<<<<<<<<<<<<
 * 
 *     def reset_state(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_in_flight_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  if (likely(PyDict_CheckExact(__pyx_t_2))) {
    __pyx_t_1 = PyDict_Copy(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg((PyObject*)&PyDict_Type, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_in_flight_market_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  if (unlikely(PyDict_Update(__pyx_t_1, __pyx_t_2) < 0)) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseMappingExpectedError(__pyx_t_2);
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":321
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_orders(self) -> Dict[str, BambooRelayInFlightOrder]:
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.in_flight_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":325
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 * 
 *     def reset_state(self):             # <<<<<<<<<<<<<<
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state = {"reset_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_state (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("reset_state", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "reset_state", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4reset_state(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4reset_state(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_state", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":326
 * 
 *     def reset_state(self):
 *         self._in_flight_market_orders = {}             # <<<<<<<<<<<<<<
 *         self._in_flight_limit_orders = {}
 *         self._in_flight_pending_limit_orders = OrderedDict()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_market_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_market_orders);
  __pyx_v_self->_in_flight_market_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":327
 *     def reset_state(self):
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}             # <<<<<<<<<<<<<<
 *         self._in_flight_pending_limit_orders = OrderedDict()
 *         self._in_flight_cancels = OrderedDict()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_limit_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_limit_orders);
  __pyx_v_self->_in_flight_limit_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":328
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}
 *         self._in_flight_pending_limit_orders = OrderedDict()             # <<<<<<<<<<<<<<
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_pending_limit_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_pending_limit_orders);
  __pyx_v_self->_in_flight_pending_limit_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":329
 *         self._in_flight_limit_orders = {}
 *         self._in_flight_pending_limit_orders = OrderedDict()
 *         self._in_flight_cancels = OrderedDict()             # <<<<<<<<<<<<<<
 *         self._in_flight_pending_cancels = OrderedDict()
 *         self._order_expiry_queue = deque()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_cancels);
  __Pyx_DECREF(__pyx_v_self->_in_flight_cancels);
  __pyx_v_self->_in_flight_cancels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":330
 *         self._in_flight_pending_limit_orders = OrderedDict()
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()             # <<<<<<<<<<<<<<
 *         self._order_expiry_queue = deque()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_pending_cancels);
  __Pyx_DECREF(__pyx_v_self->_in_flight_pending_cancels);
  __pyx_v_self->_in_flight_pending_cancels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":331
 *         self._in_flight_cancels = OrderedDict()
 *         self._in_flight_pending_cancels = OrderedDict()
 *         self._order_expiry_queue = deque()             # <<<<<<<<<<<<<<
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_order_expiry_queue);
  __Pyx_DECREF(__pyx_v_self->_order_expiry_queue);
  __pyx_v_self->_order_expiry_queue = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":325
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 * 
 *     def reset_state(self):             # <<<<<<<<<<<<<<
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.reset_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":333
 *         self._order_expiry_queue = deque()
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         # ignore saved orders that may not reflect current version schema
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states = {"restore_tracking_states", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_saved_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_tracking_states (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saved_states,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saved_states,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_saved_states)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore_tracking_states") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_saved_states = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_tracking_states", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6restore_tracking_states(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_saved_states);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_saved_states) {
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_value = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_tracking_states", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":335
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         # ignore saved orders that may not reflect current version schema
 *         try:             # <<<<<<<<<<<<<<
 *             self._in_flight_market_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":336
 *         # ignore saved orders that may not reflect current version schema
 *         try:
 *             self._in_flight_market_orders.update({             # <<<<<<<<<<<<<<
 *                 key: BambooRelayInFlightOrder.from_json(value)
 *                 for key, value in saved_states["market_orders"].items()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_in_flight_market_orders, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      { /* enter inner scope */
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":338
 *             self._in_flight_market_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)
 *                 for key, value in saved_states["market_orders"].items()             # <<<<<<<<<<<<<<
 *             })
 *             self._in_flight_limit_orders.update({
 */
        __pyx_t_8 = 0;
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_saved_states, __pyx_n_u_market_orders); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 338, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(__pyx_t_11 == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
          __PYX_ERR(0, 338, __pyx_L11_error)
        }
        __pyx_t_12 = __Pyx_dict_iterator(__pyx_t_11, 0, __pyx_n_s_items, (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 338, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_12;
        __pyx_t_12 = 0;
        while (1) {
          __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_9, &__pyx_t_8, &__pyx_t_12, &__pyx_t_11, NULL, __pyx_t_10);
          if (unlikely(__pyx_t_13 == 0)) break;
          if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 338, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_key, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_value, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":337
 *         try:
 *             self._in_flight_market_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)             # <<<<<<<<<<<<<<
 *                 for key, value in saved_states["market_orders"].items()
 *             })
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder), __pyx_n_s_from_json); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 337, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_14 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_8genexpr3__pyx_v_value};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 337, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          if (unlikely(PyDict_SetItem(__pyx_t_6, (PyObject*)__pyx_8genexpr3__pyx_v_key, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 337, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_key); __pyx_8genexpr3__pyx_v_key = 0;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_value); __pyx_8genexpr3__pyx_v_value = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_key); __pyx_8genexpr3__pyx_v_key = 0;
        __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_value); __pyx_8genexpr3__pyx_v_value = 0;
        goto __pyx_L3_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */
      __pyx_t_7 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":340
 *                 for key, value in saved_states["market_orders"].items()
 *             })
 *             self._in_flight_limit_orders.update({             # <<<<<<<<<<<<<<
 *                 key: BambooRelayInFlightOrder.from_json(value)
 *                 for key, value in saved_states["limit_orders"].items()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_in_flight_limit_orders, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      { /* enter inner scope */
        __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 340, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":342
 *             self._in_flight_limit_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)
 *                 for key, value in saved_states["limit_orders"].items()             # <<<<<<<<<<<<<<
 *             })
 * 
 */
        __pyx_t_9 = 0;
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_saved_states, __pyx_n_u_limit_orders); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 342, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(__pyx_t_11 == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
          __PYX_ERR(0, 342, __pyx_L17_error)
        }
        __pyx_t_12 = __Pyx_dict_iterator(__pyx_t_11, 0, __pyx_n_s_items, (&__pyx_t_8), (&__pyx_t_10)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 342, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_12;
        __pyx_t_12 = 0;
        while (1) {
          __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_9, &__pyx_t_12, &__pyx_t_11, NULL, __pyx_t_10);
          if (unlikely(__pyx_t_13 == 0)) break;
          if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 342, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_key, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_value, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":341
 *             })
 *             self._in_flight_limit_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)             # <<<<<<<<<<<<<<
 *                 for key, value in saved_states["limit_orders"].items()
 *             })
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder), __pyx_n_s_from_json); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 341, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_14 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_8genexpr4__pyx_v_value};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 341, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          if (unlikely(PyDict_SetItem(__pyx_t_6, (PyObject*)__pyx_8genexpr4__pyx_v_key, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 341, __pyx_L17_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_key); __pyx_8genexpr4__pyx_v_key = 0;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_value); __pyx_8genexpr4__pyx_v_value = 0;
        goto __pyx_L20_exit_scope;
        __pyx_L17_error:;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_key); __pyx_8genexpr4__pyx_v_key = 0;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_value); __pyx_8genexpr4__pyx_v_value = 0;
        goto __pyx_L3_error;
        __pyx_L20_exit_scope:;
      } /* exit inner scope */
      __pyx_t_7 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":346
 * 
 *             # if completed/cancelled orders are restored they should become untracked
 *             if len(self._in_flight_limit_orders) >= 0:             # <<<<<<<<<<<<<<
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or
 */
      __pyx_t_4 = __pyx_v_self->_in_flight_limit_orders;
      __Pyx_INCREF(__pyx_t_4);
      if (unlikely(__pyx_t_4 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 346, __pyx_L3_error)
      }
      __pyx_t_8 = PyDict_Size(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 346, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_15 = ((__pyx_t_8 >= 0) != 0);
      if (__pyx_t_15) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":347
 *             # if completed/cancelled orders are restored they should become untracked
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 for order in list(self._in_flight_limit_orders.values()):             # <<<<<<<<<<<<<<
 *                     if (order.is_cancelled or
 *                             order.has_been_cancelled or
 */
        if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 347, __pyx_L3_error)
        }
        __pyx_t_4 = __Pyx_PyDict_Values(__pyx_v_self->_in_flight_limit_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 347, __pyx_L3_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":348
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or             # <<<<<<<<<<<<<<
 *                             order.has_been_cancelled or
 *                             order.is_expired or
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 348, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!__pyx_t_16) {
          } else {
            __pyx_t_15 = __pyx_t_16;
            goto __pyx_L25_bool_binop_done;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":349
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or
 *                             order.has_been_cancelled or             # <<<<<<<<<<<<<<
 *                             order.is_expired or
 *                             order.is_failure or
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_has_been_cancelled); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 349, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!__pyx_t_16) {
          } else {
            __pyx_t_15 = __pyx_t_16;
            goto __pyx_L25_bool_binop_done;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":350
 *                     if (order.is_cancelled or
 *                             order.has_been_cancelled or
 *                             order.is_expired or             # <<<<<<<<<<<<<<
 *                             order.is_failure or
 *                             order.is_done or
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_expired); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 350, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!__pyx_t_16) {
          } else {
            __pyx_t_15 = __pyx_t_16;
            goto __pyx_L25_bool_binop_done;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":351
 *                             order.has_been_cancelled or
 *                             order.is_expired or
 *                             order.is_failure or             # <<<<<<<<<<<<<<
 *                             order.is_done or
 *                             order.expires < self._current_timestamp):
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_failure); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 351, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!__pyx_t_16) {
          } else {
            __pyx_t_15 = __pyx_t_16;
            goto __pyx_L25_bool_binop_done;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":352
 *                             order.is_expired or
 *                             order.is_failure or
 *                             order.is_done or             # <<<<<<<<<<<<<<
 *                             order.expires < self._current_timestamp):
 *                         del self._in_flight_limit_orders[order.client_order_id]
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_done); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 352, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!__pyx_t_16) {
          } else {
            __pyx_t_15 = __pyx_t_16;
            goto __pyx_L25_bool_binop_done;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":353
 *                             order.is_failure or
 *                             order.is_done or
 *                             order.expires < self._current_timestamp):             # <<<<<<<<<<<<<<
 *                         del self._in_flight_limit_orders[order.client_order_id]
 *         except Exception:
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_expires); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 353, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(0, 353, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_15 = __pyx_t_16;
          __pyx_L25_bool_binop_done:;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":348
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or             # <<<<<<<<<<<<<<
 *                             order.has_been_cancelled or
 *                             order.is_expired or
 */
          if (__pyx_t_15) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":354
 *                             order.is_done or
 *                             order.expires < self._current_timestamp):
 *                         del self._in_flight_limit_orders[order.client_order_id]             # <<<<<<<<<<<<<<
 *         except Exception:
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 */
            if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 354, __pyx_L3_error)
            }
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 354, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (unlikely((PyDict_DelItem(__pyx_v_self->_in_flight_limit_orders, __pyx_t_7) < 0))) __PYX_ERR(0, 354, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":348
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or             # <<<<<<<<<<<<<<
 *                             order.has_been_cancelled or
 *                             order.is_expired or
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":347
 *             # if completed/cancelled orders are restored they should become untracked
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 for order in list(self._in_flight_limit_orders.values()):             # <<<<<<<<<<<<<<
 *                     if (order.is_cancelled or
 *                             order.has_been_cancelled or
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":346
 * 
 *             # if completed/cancelled orders are restored they should become untracked
 *             if len(self._in_flight_limit_orders) >= 0:             # <<<<<<<<<<<<<<
 *                 for order in list(self._in_flight_limit_orders.values()):
 *                     if (order.is_cancelled or
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":335
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         # ignore saved orders that may not reflect current version schema
 *         try:             # <<<<<<<<<<<<<<
 *             self._in_flight_market_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":355
 *                             order.expires < self._current_timestamp):
 *                         del self._in_flight_limit_orders[order.client_order_id]
 *         except Exception:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_10) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(0, 355, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":356
 *                         del self._in_flight_limit_orders[order.client_order_id]
 *         except Exception:
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     async def get_active_exchange_markets(self):
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 356, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_12, };
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 356, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 356, __pyx_L5_except_error)
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple_, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 356, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":335
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         # ignore saved orders that may not reflect current version schema
 *         try:             # <<<<<<<<<<<<<<
 *             self._in_flight_market_orders.update({
 *                 key: BambooRelayInFlightOrder.from_json(value)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":333
 *         self._order_expiry_queue = deque()
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         # ignore saved orders that may not reflect current version schema
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_value);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":358
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 *     async def get_active_exchange_markets(self):             # <<<<<<<<<<<<<<
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets = {"get_active_exchange_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_active_exchange_markets", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_active_exchange_markets", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_8get_active_exchange_markets(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_8get_active_exchange_markets(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 358, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_10generator, __pyx_codeobj__2, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_active_exchange_markets, __pyx_n_s_BambooRelayExchange_get_active_e, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":359
 * 
 *     async def get_active_exchange_markets(self):
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)             # <<<<<<<<<<<<<<
 * 
 *     async def _status_polling_loop(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BambooRelayAPIOrderBookDataSourc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_active_exchange_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_self->_api_endpoint, __pyx_cur_scope->__pyx_v_self->_api_prefix};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 359, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":358
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 *     async def get_active_exchange_markets(self):             # <<<<<<<<<<<<<<
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":361
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop = {"_status_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_status_polling_loop (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_status_polling_loop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_status_polling_loop", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11_status_polling_loop(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11_status_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_status_polling_loop", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 361, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13generator1, __pyx_codeobj__3, (PyObject *) __pyx_cur_scope, __pyx_n_s_status_polling_loop, __pyx_n_s_BambooRelayExchange__status_poll, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_status_polling_loop", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_await;
    case 3: goto __pyx_L20_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 361, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":362
 * 
 *     async def _status_polling_loop(self):
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 */
  while (1) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":363
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":364
 *         while True:
 *             try:
 *                 self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *                 await self._poll_notifier.wait()
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Event); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __pyx_cur_scope->__pyx_v_self->_poll_notifier = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":365
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()             # <<<<<<<<<<<<<<
 * 
 *                 self._update_balances()
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_poll_notifier, __pyx_n_s_wait); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 365, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 365, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 365, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":367
 *                 await self._poll_notifier.wait()
 * 
 *                 self._update_balances()             # <<<<<<<<<<<<<<
 *                 self._update_available_balances()
 *                 await safe_gather(
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_balances); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":368
 * 
 *                 self._update_balances()
 *                 self._update_available_balances()             # <<<<<<<<<<<<<<
 *                 await safe_gather(
 *                     self._update_trading_rules(),
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_available_balances); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":369
 *                 self._update_balances()
 *                 self._update_available_balances()
 *                 await safe_gather(             # <<<<<<<<<<<<<<
 *                     self._update_trading_rules(),
 *                     self._update_limit_order_status(),
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_safe_gather); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 369, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":370
 *                 self._update_available_balances()
 *                 await safe_gather(
 *                     self._update_trading_rules(),             # <<<<<<<<<<<<<<
 *                     self._update_limit_order_status(),
 *                     self._update_market_order_status()
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_trading_rules); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_9, };
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 370, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":371
 *                 await safe_gather(
 *                     self._update_trading_rules(),
 *                     self._update_limit_order_status(),             # <<<<<<<<<<<<<<
 *                     self._update_market_order_status()
 *                 )
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_limit_order_status); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 371, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":372
 *                     self._update_trading_rules(),
 *                     self._update_limit_order_status(),
 *                     self._update_market_order_status()             # <<<<<<<<<<<<<<
 *                 )
 *             except asyncio.CancelledError:
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_market_order_status); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 372, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_11, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 372, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_10, __pyx_t_5, __pyx_t_8, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L15_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 369, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 369, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":363
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":374
 *                     self._update_market_order_status()
 *                 )
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_9);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_9);
      __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_9 = 0;
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 374, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":375
 *                 )
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network(
 */
        __Pyx_GIVEREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_6, __pyx_t_4);
        __pyx_t_9 = 0; __pyx_t_6 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 375, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":376
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     "Unexpected error while fetching account updates.",
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(0, 376, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":377
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching account updates.",
 *                     exc_info=True,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 377, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_network); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 377, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":379
 *                 self.logger().network(
 *                     "Unexpected error while fetching account updates.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg="Failed to fetch account updates on Bamboo Relay. Check network connection."
 *                 )
 */
        __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 379, __pyx_L8_except_error)
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_fetch_account_updates) < 0) __PYX_ERR(0, 379, __pyx_L8_except_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":377
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching account updates.",
 *                     exc_info=True,
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 377, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":382
 *                     app_warning_msg="Failed to fetch account updates on Bamboo Relay. Check network connection."
 *                 )
 *                 await asyncio.sleep(0.5)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_fee(self,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 382, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 382, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_float_0_5};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 382, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 382, __pyx_L8_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 382, __pyx_L8_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":363
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":361
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":384
 *                 await asyncio.sleep(0.5)
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_trade_type, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price) {
  CYTHON_UNUSED int __pyx_v_base_coordinator_cost;
  CYTHON_UNUSED int __pyx_v_order_gas_cost;
  CYTHON_UNUSED int __pyx_v_is_coordinated;
  PyObject *__pyx_v_is_maker = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_fee", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":392
 *                           object price):
 *         cdef:
 *             int base_coordinator_cost = 116000      # coordinator uses a fixed additional amount of gas             # <<<<<<<<<<<<<<
 *             int order_gas_cost = 150000
 *             double protocol_fee
 */
  __pyx_v_base_coordinator_cost = 0x1C520;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":393
 *         cdef:
 *             int base_coordinator_cost = 116000      # coordinator uses a fixed additional amount of gas
 *             int order_gas_cost = 150000             # <<<<<<<<<<<<<<
 *             double protocol_fee
 *             double transaction_cost_eth
 */
  __pyx_v_order_gas_cost = 0x249F0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":396
 *             double protocol_fee
 *             double transaction_cost_eth
 *             bint is_coordinated = False             # <<<<<<<<<<<<<<
 *             list valid_orders
 * 
 */
  __pyx_v_is_coordinated = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":425
 *                                                         ("ETH", transaction_cost_eth)])
 *         """
 *         is_maker = order_type is OrderType.LIMIT             # <<<<<<<<<<<<<<
 *         return estimate_fee("bamboo_relay", is_maker)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_order_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_is_maker = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":426
 *         """
 *         is_maker = order_type is OrderType.LIMIT
 *         return estimate_fee("bamboo_relay", is_maker)             # <<<<<<<<<<<<<<
 * 
 *     def _update_balances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_n_u_bamboo_relay, __pyx_v_is_maker};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":384
 *                 await asyncio.sleep(0.5)
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_is_maker);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":428
 *         return estimate_fee("bamboo_relay", is_maker)
 * 
 *     def _update_balances(self):             # <<<<<<<<<<<<<<
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances = {"_update_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_balances", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_balances", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_14_update_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_14_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_balances", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":429
 * 
 *     def _update_balances(self):
 *         self._account_balances = self.wallet.get_all_balances().copy()             # <<<<<<<<<<<<<<
 * 
 *     def _update_available_balances(self):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wallet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_all_balances); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_balances = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":428
 *         return estimate_fee("bamboo_relay", is_maker)
 * 
 *     def _update_balances(self):             # <<<<<<<<<<<<<<
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":431
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 *     def _update_available_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances = {"_update_available_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_available_balances (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_available_balances", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_available_balances", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16_update_available_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16_update_available_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  double __pyx_v_current_timestamp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_order = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_currency = 0;
  PyObject *__pyx_v_pair_split = 0;
  PyObject *__pyx_v_locked_balances = 0;
  PyObject *__pyx_v_total_balances = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_balance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_available_balances", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":433
 *     def _update_available_balances(self):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             BambooRelayInFlightOrder order
 *             object amount
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":438
 *             str currency
 *             list pair_split
 *             dict locked_balances = {}             # <<<<<<<<<<<<<<
 * 
 *         # Retrieve account balance from wallet
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_locked_balances = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":441
 * 
 *         # Retrieve account balance from wallet
 *         self._account_balances = self.wallet.get_all_balances().copy()             # <<<<<<<<<<<<<<
 * 
 *         # Calculate available balance
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wallet); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_all_balances); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_2))) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_balances = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":444
 * 
 *         # Calculate available balance
 *         if current_timestamp - self._last_update_available_balance_timestamp > 10.0:             # <<<<<<<<<<<<<<
 * 
 *             if len(self._in_flight_limit_orders) >= 0:
 */
  __pyx_t_7 = (((__pyx_v_current_timestamp - __pyx_v_self->_last_update_available_balance_timestamp) > 10.0) != 0);
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":446
 *         if current_timestamp - self._last_update_available_balance_timestamp > 10.0:
 * 
 *             if len(self._in_flight_limit_orders) >= 0:             # <<<<<<<<<<<<<<
 *                 total_balances = self._account_balances
 * 
 */
    __pyx_t_2 = __pyx_v_self->_in_flight_limit_orders;
    __Pyx_INCREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 446, __pyx_L1_error)
    }
    __pyx_t_8 = PyDict_Size(__pyx_t_2); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = ((__pyx_t_8 >= 0) != 0);
    if (__pyx_t_7) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":447
 * 
 *             if len(self._in_flight_limit_orders) >= 0:
 *                 total_balances = self._account_balances             # <<<<<<<<<<<<<<
 * 
 *                 for order in self._in_flight_limit_orders.values():
 */
      __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base._account_balances;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_total_balances = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":449
 *                 total_balances = self._account_balances
 * 
 *                 for order in self._in_flight_limit_orders.values():             # <<<<<<<<<<<<<<
 *                     # Orders that are done, cancelled or expired don't deduct from the available balance
 *                     if (not order.is_cancelled and
 */
      __pyx_t_8 = 0;
      if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
        __PYX_ERR(0, 449, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_limit_orders, 1, __pyx_n_s_values, (&__pyx_t_9), (&__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_5;
      __pyx_t_5 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_9, &__pyx_t_8, NULL, &__pyx_t_5, NULL, __pyx_t_6);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 449, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 449, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":451
 *                 for order in self._in_flight_limit_orders.values():
 *                     # Orders that are done, cancelled or expired don't deduct from the available balance
 *                     if (not order.is_cancelled and             # <<<<<<<<<<<<<<
 *                             not order.has_been_cancelled and
 *                             not order.is_expired and
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_12 = ((!__pyx_t_11) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_7 = __pyx_t_12;
          goto __pyx_L8_bool_binop_done;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":452
 *                     # Orders that are done, cancelled or expired don't deduct from the available balance
 *                     if (not order.is_cancelled and
 *                             not order.has_been_cancelled and             # <<<<<<<<<<<<<<
 *                             not order.is_expired and
 *                             not order.is_failure and
 */
        __pyx_t_12 = ((!(__pyx_v_order->has_been_cancelled != 0)) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_7 = __pyx_t_12;
          goto __pyx_L8_bool_binop_done;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":453
 *                     if (not order.is_cancelled and
 *                             not order.has_been_cancelled and
 *                             not order.is_expired and             # <<<<<<<<<<<<<<
 *                             not order.is_failure and
 *                             not order.is_done):
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_order), __pyx_n_s_is_expired); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = ((!__pyx_t_12) != 0);
        if (__pyx_t_11) {
        } else {
          __pyx_t_7 = __pyx_t_11;
          goto __pyx_L8_bool_binop_done;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":454
 *                             not order.has_been_cancelled and
 *                             not order.is_expired and
 *                             not order.is_failure and             # <<<<<<<<<<<<<<
 *                             not order.is_done):
 *                         pair_split = order.trading_pair.split("-")
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_order), __pyx_n_s_is_failure); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_12 = ((!__pyx_t_11) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_7 = __pyx_t_12;
          goto __pyx_L8_bool_binop_done;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":455
 *                             not order.is_expired and
 *                             not order.is_failure and
 *                             not order.is_done):             # <<<<<<<<<<<<<<
 *                         pair_split = order.trading_pair.split("-")
 *                         if order.trade_type is TradeType.BUY:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = ((!__pyx_t_12) != 0);
        __pyx_t_7 = __pyx_t_11;
        __pyx_L8_bool_binop_done:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":451
 *                 for order in self._in_flight_limit_orders.values():
 *                     # Orders that are done, cancelled or expired don't deduct from the available balance
 *                     if (not order.is_cancelled and             # <<<<<<<<<<<<<<
 *                             not order.has_been_cancelled and
 *                             not order.is_expired and
 */
        if (__pyx_t_7) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":456
 *                             not order.is_failure and
 *                             not order.is_done):
 *                         pair_split = order.trading_pair.split("-")             # <<<<<<<<<<<<<<
 *                         if order.trade_type is TradeType.BUY:
 *                             currency = pair_split[1]
 */
          if (unlikely(__pyx_v_order->__pyx_base.trading_pair == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
            __PYX_ERR(0, 456, __pyx_L1_error)
          }
          __pyx_t_5 = PyUnicode_Split(__pyx_v_order->__pyx_base.trading_pair, __pyx_kp_u__5, -1L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_pair_split, ((PyObject*)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":457
 *                             not order.is_done):
 *                         pair_split = order.trading_pair.split("-")
 *                         if order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             currency = pair_split[1]
 *                             amount = Decimal(order.amount * order.price)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BUY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_7 = (__pyx_v_order->__pyx_base.trade_type == __pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_11 = (__pyx_t_7 != 0);
          if (__pyx_t_11) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":458
 *                         pair_split = order.trading_pair.split("-")
 *                         if order.trade_type is TradeType.BUY:
 *                             currency = pair_split[1]             # <<<<<<<<<<<<<<
 *                             amount = Decimal(order.amount * order.price)
 *                         else:
 */
            if (unlikely(__pyx_v_pair_split == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 458, __pyx_L1_error)
            }
            __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_pair_split, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 458, __pyx_L1_error)
            __Pyx_XDECREF_SET(__pyx_v_currency, ((PyObject*)__pyx_t_3));
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":459
 *                         if order.trade_type is TradeType.BUY:
 *                             currency = pair_split[1]
 *                             amount = Decimal(order.amount * order.price)             # <<<<<<<<<<<<<<
 *                         else:
 *                             currency = pair_split[0]
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = PyNumber_Multiply(__pyx_v_order->__pyx_base.amount, __pyx_v_order->__pyx_base.price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_13 = NULL;
            __pyx_t_10 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_10 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_4};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_amount, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":457
 *                             not order.is_done):
 *                         pair_split = order.trading_pair.split("-")
 *                         if order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             currency = pair_split[1]
 *                             amount = Decimal(order.amount * order.price)
 */
            goto __pyx_L13;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":461
 *                             amount = Decimal(order.amount * order.price)
 *                         else:
 *                             currency = pair_split[0]             # <<<<<<<<<<<<<<
 *                             amount = Decimal(order.amount)
 *                         locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 */
          /*else*/ {
            if (unlikely(__pyx_v_pair_split == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 461, __pyx_L1_error)
            }
            __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_pair_split, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 461, __pyx_L1_error)
            __Pyx_XDECREF_SET(__pyx_v_currency, ((PyObject*)__pyx_t_3));
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":462
 *                         else:
 *                             currency = pair_split[0]
 *                             amount = Decimal(order.amount)             # <<<<<<<<<<<<<<
 *                         locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 462, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = NULL;
            __pyx_t_10 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_10 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_order->__pyx_base.amount};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_amount, __pyx_t_3);
            __pyx_t_3 = 0;
          }
          __pyx_L13:;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":463
 *                             currency = pair_split[0]
 *                             amount = Decimal(order.amount)
 *                         locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount             # <<<<<<<<<<<<<<
 * 
 *                 for order in self._in_flight_market_orders.values():
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_locked_balances, __pyx_v_currency, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_v_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely((PyDict_SetItem(__pyx_v_locked_balances, __pyx_v_currency, __pyx_t_3) < 0))) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":451
 *                 for order in self._in_flight_limit_orders.values():
 *                     # Orders that are done, cancelled or expired don't deduct from the available balance
 *                     if (not order.is_cancelled and             # <<<<<<<<<<<<<<
 *                             not order.has_been_cancelled and
 *                             not order.is_expired and
 */
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":465
 *                         locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 * 
 *                 for order in self._in_flight_market_orders.values():             # <<<<<<<<<<<<<<
 *                     # Market orders are only tracked for their transaction duration
 *                     pair_split = order.trading_pair.split("-")
 */
      __pyx_t_9 = 0;
      if (unlikely(__pyx_v_self->_in_flight_market_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
        __PYX_ERR(0, 465, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_market_orders, 1, __pyx_n_s_values, (&__pyx_t_8), (&__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_8, &__pyx_t_9, NULL, &__pyx_t_3, NULL, __pyx_t_6);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":467
 *                 for order in self._in_flight_market_orders.values():
 *                     # Market orders are only tracked for their transaction duration
 *                     pair_split = order.trading_pair.split("-")             # <<<<<<<<<<<<<<
 *                     if order.trade_type is TradeType.BUY:
 *                         currency = pair_split[1]
 */
        if (unlikely(__pyx_v_order->__pyx_base.trading_pair == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
          __PYX_ERR(0, 467, __pyx_L1_error)
        }
        __pyx_t_3 = PyUnicode_Split(__pyx_v_order->__pyx_base.trading_pair, __pyx_kp_u__5, -1L); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_pair_split, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":468
 *                     # Market orders are only tracked for their transaction duration
 *                     pair_split = order.trading_pair.split("-")
 *                     if order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         currency = pair_split[1]
 *                         amount = Decimal(order.amount * order.price)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_11 = (__pyx_v_order->__pyx_base.trade_type == __pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_7 = (__pyx_t_11 != 0);
        if (__pyx_t_7) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":469
 *                     pair_split = order.trading_pair.split("-")
 *                     if order.trade_type is TradeType.BUY:
 *                         currency = pair_split[1]             # <<<<<<<<<<<<<<
 *                         amount = Decimal(order.amount * order.price)
 *                     else:
 */
          if (unlikely(__pyx_v_pair_split == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 469, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_pair_split, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_5))) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_currency, ((PyObject*)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":470
 *                     if order.trade_type is TradeType.BUY:
 *                         currency = pair_split[1]
 *                         amount = Decimal(order.amount * order.price)             # <<<<<<<<<<<<<<
 *                     else:
 *                         currency = pair_split[0]
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyNumber_Multiply(__pyx_v_order->__pyx_base.amount, __pyx_v_order->__pyx_base.price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_4};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_XDECREF_SET(__pyx_v_amount, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":468
 *                     # Market orders are only tracked for their transaction duration
 *                     pair_split = order.trading_pair.split("-")
 *                     if order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         currency = pair_split[1]
 *                         amount = Decimal(order.amount * order.price)
 */
          goto __pyx_L16;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":472
 *                         amount = Decimal(order.amount * order.price)
 *                     else:
 *                         currency = pair_split[0]             # <<<<<<<<<<<<<<
 *                         amount = Decimal(order.amount)
 *                     locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 */
        /*else*/ {
          if (unlikely(__pyx_v_pair_split == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 472, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_pair_split, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_5))) __PYX_ERR(0, 472, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_currency, ((PyObject*)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":473
 *                     else:
 *                         currency = pair_split[0]
 *                         amount = Decimal(order.amount)             # <<<<<<<<<<<<<<
 *                     locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_order->__pyx_base.amount};
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 473, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_XDECREF_SET(__pyx_v_amount, __pyx_t_5);
          __pyx_t_5 = 0;
        }
        __pyx_L16:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":474
 *                         currency = pair_split[0]
 *                         amount = Decimal(order.amount)
 *                     locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount             # <<<<<<<<<<<<<<
 * 
 *                 for currency, balance in total_balances.items():
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_PyDict_GetItemDefault(__pyx_v_locked_balances, __pyx_v_currency, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_v_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely((PyDict_SetItem(__pyx_v_locked_balances, __pyx_v_currency, __pyx_t_5) < 0))) __PYX_ERR(0, 474, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":476
 *                     locked_balances[currency] = locked_balances.get(currency, s_decimal_0) + amount
 * 
 *                 for currency, balance in total_balances.items():             # <<<<<<<<<<<<<<
 *                     self._account_available_balances[currency] = \
 *                         Decimal(total_balances[currency]) - locked_balances.get(currency, s_decimal_0)
 */
      __pyx_t_8 = 0;
      if (unlikely(__pyx_v_total_balances == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(0, 476, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_total_balances, 1, __pyx_n_s_items, (&__pyx_t_9), (&__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2);
      __pyx_t_2 = __pyx_t_5;
      __pyx_t_5 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_9, &__pyx_t_8, &__pyx_t_5, &__pyx_t_3, NULL, __pyx_t_6);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 476, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_3);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_5))) __PYX_ERR(0, 476, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_currency, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_balance, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":478
 *                 for currency, balance in total_balances.items():
 *                     self._account_available_balances[currency] = \
 *                         Decimal(total_balances[currency]) - locked_balances.get(currency, s_decimal_0)             # <<<<<<<<<<<<<<
 *             else:
 *                 self._account_available_balances = self._account_balances.copy()
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__pyx_v_total_balances == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 478, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_total_balances, __pyx_v_currency); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_4};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_locked_balances, __pyx_v_currency, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":477
 * 
 *                 for currency, balance in total_balances.items():
 *                     self._account_available_balances[currency] = \             # <<<<<<<<<<<<<<
 *                         Decimal(total_balances[currency]) - locked_balances.get(currency, s_decimal_0)
 *             else:
 */
        if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 477, __pyx_L1_error)
        }
        if (unlikely((PyDict_SetItem(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_v_currency, __pyx_t_5) < 0))) __PYX_ERR(0, 477, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":446
 *         if current_timestamp - self._last_update_available_balance_timestamp > 10.0:
 * 
 *             if len(self._in_flight_limit_orders) >= 0:             # <<<<<<<<<<<<<<
 *                 total_balances = self._account_balances
 * 
 */
      goto __pyx_L4;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":480
 *                         Decimal(total_balances[currency]) - locked_balances.get(currency, s_decimal_0)
 *             else:
 *                 self._account_available_balances = self._account_balances.copy()             # <<<<<<<<<<<<<<
 * 
 *             self._last_update_available_balance_timestamp = current_timestamp
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
        __PYX_ERR(0, 480, __pyx_L1_error)
      }
      __pyx_t_2 = PyDict_Copy(__pyx_v_self->__pyx_base.__pyx_base._account_balances); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
      __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
      __pyx_v_self->__pyx_base.__pyx_base._account_available_balances = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L4:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":482
 *                 self._account_available_balances = self._account_balances.copy()
 * 
 *             self._last_update_available_balance_timestamp = current_timestamp             # <<<<<<<<<<<<<<
 * 
 *     async def list_market(self) -> Dict[str, Any]:
 */
    __pyx_v_self->_last_update_available_balance_timestamp = __pyx_v_current_timestamp;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":444
 * 
 *         # Calculate available balance
 *         if current_timestamp - self._last_update_available_balance_timestamp > 10.0:             # <<<<<<<<<<<<<<
 * 
 *             if len(self._in_flight_limit_orders) >= 0:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":431
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 *     def _update_available_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_available_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_amount);
  __Pyx_XDECREF(__pyx_v_currency);
  __Pyx_XDECREF(__pyx_v_pair_split);
  __Pyx_XDECREF(__pyx_v_locked_balances);
  __Pyx_XDECREF(__pyx_v_total_balances);
  __Pyx_XDECREF(__pyx_v_balance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":484
 *             self._last_update_available_balance_timestamp = current_timestamp
 * 
 *     async def list_market(self) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market = {"list_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_market (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("list_market", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "list_market", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_18list_market(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_18list_market(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_market", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 484, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20generator2, __pyx_codeobj__6, (PyObject *) __pyx_cur_scope, __pyx_n_s_list_market, __pyx_n_s_BambooRelayExchange_list_market, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.list_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_market", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 484, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":485
 * 
 *     async def list_market(self) -> Dict[str, Any]:
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_endpoint); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_markets_perPage_1000_include_ba);
  __pyx_t_2 += 34;
  __Pyx_GIVEREF(__pyx_kp_u_markets_perPage_1000_include_ba);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_markets_perPage_1000_include_ba);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_url = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":486
 *     async def list_market(self) -> Dict[str, Any]:
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 * 
 *     async def _update_trading_rules(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_http_method, __pyx_n_u_get) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_url, __pyx_cur_scope->__pyx_v_url) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_headers, __pyx_t_5) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 486, __pyx_L1_error)
    __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
  } else {
    __pyx_t_5 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":484
 *             self._last_update_available_balance_timestamp = current_timestamp
 * 
 *     async def list_market(self) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("list_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":488
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules = {"_update_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_trading_rules", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_trading_rules", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_21_update_trading_rules(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_21_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 488, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23generator3, __pyx_codeobj__7, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_trading_rules, __pyx_n_s_BambooRelayExchange__update_trad, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":490
 *     async def _update_trading_rules(self):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 * 
 *         if current_timestamp - self._last_update_trading_rules_timestamp > self.UPDATE_RULES_INTERVAL or len(self._trading_rules) < 1:
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":492
 *             double current_timestamp = self._current_timestamp
 * 
 *         if current_timestamp - self._last_update_trading_rules_timestamp > self.UPDATE_RULES_INTERVAL or len(self._trading_rules) < 1:             # <<<<<<<<<<<<<<
 *             markets = await self.list_market()
 *             trading_rules_list = self._format_trading_rules(markets)
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_current_timestamp - __pyx_cur_scope->__pyx_v_self->_last_update_trading_rules_timestamp)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_UPDATE_RULES_INTERVAL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_self->_trading_rules;
  __Pyx_INCREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 492, __pyx_L1_error)
  }
  __pyx_t_7 = PyDict_Size(__pyx_t_5); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = ((__pyx_t_7 < 1) != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":493
 * 
 *         if current_timestamp - self._last_update_trading_rules_timestamp > self.UPDATE_RULES_INTERVAL or len(self._trading_rules) < 1:
 *             markets = await self.list_market()             # <<<<<<<<<<<<<<
 *             trading_rules_list = self._format_trading_rules(markets)
 *             self._trading_rules.clear()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_list_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 493, __pyx_L1_error)
      __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_5 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_markets = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":494
 *         if current_timestamp - self._last_update_trading_rules_timestamp > self.UPDATE_RULES_INTERVAL or len(self._trading_rules) < 1:
 *             markets = await self.list_market()
 *             trading_rules_list = self._format_trading_rules(markets)             # <<<<<<<<<<<<<<
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_format_trading_rules); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_markets};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_trading_rules_list = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":495
 *             markets = await self.list_market()
 *             trading_rules_list = self._format_trading_rules(markets)
 *             self._trading_rules.clear()             # <<<<<<<<<<<<<<
 *             for trading_rule in trading_rules_list:
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
      __PYX_ERR(0, 495, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_self->_trading_rules); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 495, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":496
 *             trading_rules_list = self._format_trading_rules(markets)
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:             # <<<<<<<<<<<<<<
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 *             self._last_update_trading_rules_timestamp = current_timestamp
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_trading_rules_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_trading_rules_list)) {
      __pyx_t_5 = __pyx_cur_scope->__pyx_v_trading_rules_list; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_trading_rules_list); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 496, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 496, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 496, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 496, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_trading_rule);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":497
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule             # <<<<<<<<<<<<<<
 *             self._last_update_trading_rules_timestamp = current_timestamp
 * 
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 497, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_t_4, __pyx_cur_scope->__pyx_v_trading_rule) < 0))) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":496
 *             trading_rules_list = self._format_trading_rules(markets)
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:             # <<<<<<<<<<<<<<
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 *             self._last_update_trading_rules_timestamp = current_timestamp
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":498
 *             for trading_rule in trading_rules_list:
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 *             self._last_update_trading_rules_timestamp = current_timestamp             # <<<<<<<<<<<<<<
 * 
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:
 */
    __pyx_cur_scope->__pyx_v_self->_last_update_trading_rules_timestamp = __pyx_cur_scope->__pyx_v_current_timestamp;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":492
 *             double current_timestamp = self._current_timestamp
 * 
 *         if current_timestamp - self._last_update_trading_rules_timestamp > self.UPDATE_RULES_INTERVAL or len(self._trading_rules) < 1:             # <<<<<<<<<<<<<<
 *             markets = await self.list_market()
 *             trading_rules_list = self._format_trading_rules(markets)
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":488
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":500
 *             self._last_update_trading_rules_timestamp = current_timestamp
 * 
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules = {"_format_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_markets = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_format_trading_rules (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_markets)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_format_trading_rules") < 0)) __PYX_ERR(0, 500, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_markets = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_format_trading_rules", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 500, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_24_format_trading_rules(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_markets);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_24_format_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_markets) {
  PyObject *__pyx_v_retval = 0;
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_v_trading_pair = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_format_trading_rules", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":502
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:
 *         cdef:
 *             list retval = []             # <<<<<<<<<<<<<<
 *         for market in markets:
 *             try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retval = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":503
 *         cdef:
 *             list retval = []
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             try:
 *                 trading_pair = market["id"]
 */
  if (likely(PyList_CheckExact(__pyx_v_markets)) || PyTuple_CheckExact(__pyx_v_markets)) {
    __pyx_t_1 = __pyx_v_markets; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_markets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 503, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 503, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 503, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_market, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":504
 *             list retval = []
 *         for market in markets:
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":505
 *         for market in markets:
 *             try:
 *                 trading_pair = market["id"]             # <<<<<<<<<<<<<<
 *                 retval.append(TradingRule(trading_pair,
 *                                           min_order_size=Decimal(market["minOrderSize"]),
 */
        __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_trading_pair, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":506
 *             try:
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,             # <<<<<<<<<<<<<<
 *                                           min_order_size=Decimal(market["minOrderSize"]),
 *                                           max_order_size=Decimal(market["maxOrderSize"]),
 */
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_trading_pair);
        __Pyx_GIVEREF(__pyx_v_trading_pair);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_trading_pair);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":507
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,
 *                                           min_order_size=Decimal(market["minOrderSize"]),             # <<<<<<<<<<<<<<
 *                                           max_order_size=Decimal(market["maxOrderSize"]),
 *                                           max_price_significant_digits=Decimal(market['quoteIncrement']),
 */
        __pyx_t_8 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_minOrderSize); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 507, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_min_order_size, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":508
 *                 retval.append(TradingRule(trading_pair,
 *                                           min_order_size=Decimal(market["minOrderSize"]),
 *                                           max_order_size=Decimal(market["maxOrderSize"]),             # <<<<<<<<<<<<<<
 *                                           max_price_significant_digits=Decimal(market['quoteIncrement']),
 *                                           min_price_increment=Decimal(f"1e-{market['quoteTokenDecimals']}"),
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 508, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_maxOrderSize); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 508, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 508, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_max_order_size, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":509
 *                                           min_order_size=Decimal(market["minOrderSize"]),
 *                                           max_order_size=Decimal(market["maxOrderSize"]),
 *                                           max_price_significant_digits=Decimal(market['quoteIncrement']),             # <<<<<<<<<<<<<<
 *                                           min_price_increment=Decimal(f"1e-{market['quoteTokenDecimals']}"),
 *                                           min_base_amount_increment=Decimal(f"1e-{market['baseTokenDecimals']}"),
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 509, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_quoteIncrement); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 509, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 509, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_max_price_significant_digits, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":510
 *                                           max_order_size=Decimal(market["maxOrderSize"]),
 *                                           max_price_significant_digits=Decimal(market['quoteIncrement']),
 *                                           min_price_increment=Decimal(f"1e-{market['quoteTokenDecimals']}"),             # <<<<<<<<<<<<<<
 *                                           min_base_amount_increment=Decimal(f"1e-{market['baseTokenDecimals']}"),
 *                                           min_quote_amount_increment=Decimal(f"1e-{market['quoteTokenDecimals']}")))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 510, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_quoteTokenDecimals); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 510, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 510, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 510, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 510, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_min_price_increment, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":511
 *                                           max_price_significant_digits=Decimal(market['quoteIncrement']),
 *                                           min_price_increment=Decimal(f"1e-{market['quoteTokenDecimals']}"),
 *                                           min_base_amount_increment=Decimal(f"1e-{market['baseTokenDecimals']}"),             # <<<<<<<<<<<<<<
 *                                           min_quote_amount_increment=Decimal(f"1e-{market['quoteTokenDecimals']}")))
 *             except Exception:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 511, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_baseTokenDecimals); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 511, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 511, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_min_base_amount_increment, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":512
 *                                           min_price_increment=Decimal(f"1e-{market['quoteTokenDecimals']}"),
 *                                           min_base_amount_increment=Decimal(f"1e-{market['baseTokenDecimals']}"),
 *                                           min_quote_amount_increment=Decimal(f"1e-{market['quoteTokenDecimals']}")))             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().error(f"Error parsing the trading_pair {trading_pair}. Skipping.", exc_info=True)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 512, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market, __pyx_n_u_quoteTokenDecimals); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 512, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 512, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 512, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 512, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_min_quote_amount_increment, __pyx_t_9) < 0) __PYX_ERR(0, 507, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":506
 *             try:
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,             # <<<<<<<<<<<<<<
 *                                           min_order_size=Decimal(market["minOrderSize"]),
 *                                           max_order_size=Decimal(market["maxOrderSize"]),
 */
        __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule), __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 506, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_9); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 506, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":504
 *             list retval = []
 *         for market in markets:
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":513
 *                                           min_base_amount_increment=Decimal(f"1e-{market['baseTokenDecimals']}"),
 *                                           min_quote_amount_increment=Decimal(f"1e-{market['quoteTokenDecimals']}")))
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"Error parsing the trading_pair {trading_pair}. Skipping.", exc_info=True)
 *         return retval
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_4) < 0) __PYX_ERR(0, 513, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":514
 *                                           min_quote_amount_increment=Decimal(f"1e-{market['quoteTokenDecimals']}")))
 *             except Exception:
 *                 self.logger().error(f"Error parsing the trading_pair {trading_pair}. Skipping.", exc_info=True)             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_12, };
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 514, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_15 = 0;
        __pyx_t_16 = 127;
        __Pyx_INCREF(__pyx_kp_u_Error_parsing_the_trading_pair);
        __pyx_t_15 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_Error_parsing_the_trading_pair);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Error_parsing_the_trading_pair);
        if (unlikely(!__pyx_v_trading_pair)) { __Pyx_RaiseUnboundLocalError("trading_pair"); __PYX_ERR(0, 514, __pyx_L7_except_error) }
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_trading_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_16;
        __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u_Skipping);
        __pyx_t_15 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_Skipping);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_Skipping);
        __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 514, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":504
 *             list retval = []
 *         for market in markets:
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market["id"]
 *                 retval.append(TradingRule(trading_pair,
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L12_try_end:;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":503
 *         cdef:
 *             list retval = []
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             try:
 *                 trading_pair = market["id"]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":515
 *             except Exception:
 *                 self.logger().error(f"Error parsing the trading_pair {trading_pair}. Skipping.", exc_info=True)
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":500
 *             self._last_update_trading_rules_timestamp = current_timestamp
 * 
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_28generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":517
 *         return retval
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders = {"get_account_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_account_orders (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_account_orders", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_account_orders", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_26get_account_orders(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_26get_account_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_account_orders", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 517, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_28generator4, __pyx_codeobj__8, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_account_orders, __pyx_n_s_BambooRelayExchange_get_account, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_account_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_28generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_account_orders", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 517, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":518
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:
 *         return await self._api_request(http_method="get",             # <<<<<<<<<<<<<<
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 *                                        headers={"User-Agent": "hummingbot"})
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_http_method, __pyx_n_u_get) < 0) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":519
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",             # <<<<<<<<<<<<<<
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 */
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_accounts);
  __pyx_t_4 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_accounts);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_accounts);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_address); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_lower); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u_orders);
  __pyx_t_4 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_orders);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_orders);
  __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_url, __pyx_t_8) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":520
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 *                                        headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_headers, __pyx_t_8) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":518
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:
 *         return await self._api_request(http_method="get",             # <<<<<<<<<<<<<<
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 *                                        headers={"User-Agent": "hummingbot"})
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 518, __pyx_L1_error)
    __pyx_t_8 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_8);
  } else {
    __pyx_t_8 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_8) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":517
 *         return retval
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("get_account_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_31generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":522
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders = {"get_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_hashes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_hashes,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_hashes,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_hashes)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_orders") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_order_hashes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_orders", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_29get_orders(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_order_hashes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_29get_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_hashes) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_orders", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 522, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_hashes = __pyx_v_order_hashes;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_hashes);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_hashes);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_31generator5, __pyx_codeobj__9, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_orders, __pyx_n_s_BambooRelayExchange_get_orders, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_31generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orders", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 522, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":523
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:
 *         return await self._api_request("post",             # <<<<<<<<<<<<<<
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 *                                        data=order_hashes,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":524
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",             # <<<<<<<<<<<<<<
 *                                        data=order_hashes,
 *                                        headers={"User-Agent": "hummingbot"})
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_endpoint); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_orders_hashes);
  __pyx_t_4 += 14;
  __Pyx_GIVEREF(__pyx_kp_u_orders_hashes);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_orders_hashes);
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_url, __pyx_t_6) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":525
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 *                                        data=order_hashes,             # <<<<<<<<<<<<<<
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_data, __pyx_cur_scope->__pyx_v_order_hashes) < 0) __PYX_ERR(0, 524, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":526
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 *                                        data=order_hashes,
 *                                        headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_headers, __pyx_t_6) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":523
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:
 *         return await self._api_request("post",             # <<<<<<<<<<<<<<
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 *                                        data=order_hashes,
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 523, __pyx_L1_error)
    __pyx_t_6 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_6);
  } else {
    __pyx_t_6 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_6) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":522
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("get_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_34generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":528
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates = {"_get_order_updates", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_tracked_limit_orders = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_order_updates (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tracked_limit_orders,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tracked_limit_orders,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tracked_limit_orders)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_get_order_updates") < 0)) __PYX_ERR(0, 528, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_tracked_limit_orders = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_order_updates", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 528, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._get_order_updates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_get_order_updates(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_tracked_limit_orders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_get_order_updates(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_tracked_limit_orders) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_order_updates", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 528, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_tracked_limit_orders = __pyx_v_tracked_limit_orders;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tracked_limit_orders);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tracked_limit_orders);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_34generator6, __pyx_codeobj__11, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_order_updates, __pyx_n_s_BambooRelayExchange__get_order_u, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._get_order_updates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_34generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_order_updates", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    case 2: goto __pyx_L11_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":531
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 *             list account_orders_list = []             # <<<<<<<<<<<<<<
 *             list order_updates = []
 *             list hashes = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_account_orders_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":532
 *             BambooRelayInFlightOrder tracked_limit_order
 *             list account_orders_list = []
 *             list order_updates = []             # <<<<<<<<<<<<<<
 *             list hashes = []
 *             dict hash_index = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_order_updates = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":533
 *             list account_orders_list = []
 *             list order_updates = []
 *             list hashes = []             # <<<<<<<<<<<<<<
 *             dict hash_index = {}
 *             dict account_orders_map = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_hashes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":534
 *             list order_updates = []
 *             list hashes = []
 *             dict hash_index = {}             # <<<<<<<<<<<<<<
 *             dict account_orders_map = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_hash_index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":535
 *             list hashes = []
 *             dict hash_index = {}
 *             dict account_orders_map = {}             # <<<<<<<<<<<<<<
 * 
 *         # Fetch cached account endpoint
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_account_orders_map = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":538
 * 
 *         # Fetch cached account endpoint
 *         account_orders_list = await self.get_account_orders()             # <<<<<<<<<<<<<<
 *         for account_order in account_orders_list:
 *             account_orders_map[account_order["orderHash"]] = account_order
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_account_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 538, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_account_orders_list);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_account_orders_list, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":539
 *         # Fetch cached account endpoint
 *         account_orders_list = await self.get_account_orders()
 *         for account_order in account_orders_list:             # <<<<<<<<<<<<<<
 *             account_orders_map[account_order["orderHash"]] = account_order
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_account_orders_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_account_orders_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_account_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_account_order, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":540
 *         account_orders_list = await self.get_account_orders()
 *         for account_order in account_orders_list:
 *             account_orders_map[account_order["orderHash"]] = account_order             # <<<<<<<<<<<<<<
 * 
 *         for i, tracked_order in enumerate(tracked_limit_orders):
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_account_order, __pyx_n_u_orderHash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_account_orders_map, __pyx_t_2, __pyx_cur_scope->__pyx_v_account_order) < 0))) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":539
 *         # Fetch cached account endpoint
 *         account_orders_list = await self.get_account_orders()
 *         for account_order in account_orders_list:             # <<<<<<<<<<<<<<
 *             account_orders_map[account_order["orderHash"]] = account_order
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":542
 *             account_orders_map[account_order["orderHash"]] = account_order
 * 
 *         for i, tracked_order in enumerate(tracked_limit_orders):             # <<<<<<<<<<<<<<
 *             order_hash = tracked_order.exchange_order_id
 *             if order_hash not in account_orders_map:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_tracked_limit_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_tracked_limit_orders)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_tracked_limit_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_tracked_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 542, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 542, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":543
 * 
 *         for i, tracked_order in enumerate(tracked_limit_orders):
 *             order_hash = tracked_order.exchange_order_id             # <<<<<<<<<<<<<<
 *             if order_hash not in account_orders_map:
 *                 hashes.append(tracked_order.exchange_order_id)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_hash);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_hash, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":544
 *         for i, tracked_order in enumerate(tracked_limit_orders):
 *             order_hash = tracked_order.exchange_order_id
 *             if order_hash not in account_orders_map:             # <<<<<<<<<<<<<<
 *                 hashes.append(tracked_order.exchange_order_id)
 *                 hash_index[order_hash] = i
 */
    __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_cur_scope->__pyx_v_order_hash, __pyx_cur_scope->__pyx_v_account_orders_map, Py_NE)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 544, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":545
 *             order_hash = tracked_order.exchange_order_id
 *             if order_hash not in account_orders_map:
 *                 hashes.append(tracked_order.exchange_order_id)             # <<<<<<<<<<<<<<
 *                 hash_index[order_hash] = i
 *                 order_updates.append(None)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_hashes, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 545, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":546
 *             if order_hash not in account_orders_map:
 *                 hashes.append(tracked_order.exchange_order_id)
 *                 hash_index[order_hash] = i             # <<<<<<<<<<<<<<
 *                 order_updates.append(None)
 *             else:
 */
      if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_hash_index, __pyx_cur_scope->__pyx_v_order_hash, __pyx_cur_scope->__pyx_v_i) < 0))) __PYX_ERR(0, 546, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":547
 *                 hashes.append(tracked_order.exchange_order_id)
 *                 hash_index[order_hash] = i
 *                 order_updates.append(None)             # <<<<<<<<<<<<<<
 *             else:
 *                 order_updates.append(account_orders_map[order_hash])
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_order_updates, Py_None); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 547, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":544
 *         for i, tracked_order in enumerate(tracked_limit_orders):
 *             order_hash = tracked_order.exchange_order_id
 *             if order_hash not in account_orders_map:             # <<<<<<<<<<<<<<
 *                 hashes.append(tracked_order.exchange_order_id)
 *                 hash_index[order_hash] = i
 */
      goto __pyx_L9;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":549
 *                 order_updates.append(None)
 *             else:
 *                 order_updates.append(account_orders_map[order_hash])             # <<<<<<<<<<<<<<
 * 
 *         if len(hashes):
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_account_orders_map, __pyx_cur_scope->__pyx_v_order_hash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_order_updates, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L9:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":542
 *             account_orders_map[account_order["orderHash"]] = account_order
 * 
 *         for i, tracked_order in enumerate(tracked_limit_orders):             # <<<<<<<<<<<<<<
 *             order_hash = tracked_order.exchange_order_id
 *             if order_hash not in account_orders_map:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":551
 *                 order_updates.append(account_orders_map[order_hash])
 * 
 *         if len(hashes):             # <<<<<<<<<<<<<<
 *             # Grab all of the orders details at once by hash
 *             orders = await self.get_orders(hashes)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_hashes); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 551, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_5 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":553
 *         if len(hashes):
 *             # Grab all of the orders details at once by hash
 *             orders = await self.get_orders(hashes)             # <<<<<<<<<<<<<<
 *             for hash in orders:
 *                 order_updates[hash_index[hash]] = orders[hash]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_hashes};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L11_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 553, __pyx_L1_error)
      __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
    } else {
      __pyx_t_1 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_orders = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":554
 *             # Grab all of the orders details at once by hash
 *             orders = await self.get_orders(hashes)
 *             for hash in orders:             # <<<<<<<<<<<<<<
 *                 order_updates[hash_index[hash]] = orders[hash]
 * 
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_orders)) {
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 554, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 554, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_6(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 554, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_hash);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_hash, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":555
 *             orders = await self.get_orders(hashes)
 *             for hash in orders:
 *                 order_updates[hash_index[hash]] = orders[hash]             # <<<<<<<<<<<<<<
 * 
 *         return order_updates
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_orders, __pyx_cur_scope->__pyx_v_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_hash_index, __pyx_cur_scope->__pyx_v_hash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((PyObject_SetItem(__pyx_cur_scope->__pyx_v_order_updates, __pyx_t_3, __pyx_t_2) < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":554
 *             # Grab all of the orders details at once by hash
 *             orders = await self.get_orders(hashes)
 *             for hash in orders:             # <<<<<<<<<<<<<<
 *                 order_updates[hash_index[hash]] = orders[hash]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":551
 *                 order_updates.append(account_orders_map[order_hash])
 * 
 *         if len(hashes):             # <<<<<<<<<<<<<<
 *             # Grab all of the orders details at once by hash
 *             orders = await self.get_orders(hashes)
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":557
 *                 order_updates[hash_index[hash]] = orders[hash]
 * 
 *         return order_updates             # <<<<<<<<<<<<<<
 * 
 *     # Single order update, i.e. via RPC logs instead of market API
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_order_updates);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":528
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_get_order_updates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":560
 * 
 *     # Single order update, i.e. via RPC logs instead of market API
 *     def _update_single_limit_order(self, fill_event: ZeroExFillEvent):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order = {"_update_single_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fill_event = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_single_limit_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fill_event,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fill_event,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fill_event)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_update_single_limit_order") < 0)) __PYX_ERR(0, 560, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_fill_event = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_update_single_limit_order", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 560, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_single_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_35_update_single_limit_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_fill_event);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_35_update_single_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_fill_event) {
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_order_remaining_base_token_amount = 0;
  PyObject *__pyx_v_order_filled_base_token_amount = 0;
  PyObject *__pyx_v_order_filled_quote_token_amount = 0;
  int __pyx_v_base_asset_decimals;
  int __pyx_v_quote_asset_decimals;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *__pyx_v_tracked_limit_order = 0;
  PyObject *__pyx_v_tracked_limit_orders = NULL;
  PyObject *__pyx_v_previous_is_done = NULL;
  PyObject *__pyx_v_trading_pair_rules = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int64_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_single_limit_order", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":562
 *     def _update_single_limit_order(self, fill_event: ZeroExFillEvent):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             object order_remaining_base_token_amount
 *             object order_filled_base_token_amount
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":570
 *             BambooRelayInFlightOrder tracked_limit_order
 * 
 *         tracked_limit_orders = list(self._in_flight_limit_orders.values())             # <<<<<<<<<<<<<<
 * 
 *         for tracked_limit_order in tracked_limit_orders:
 */
  if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 570, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Values(__pyx_v_self->_in_flight_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tracked_limit_orders = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":572
 *         tracked_limit_orders = list(self._in_flight_limit_orders.values())
 * 
 *         for tracked_limit_order in tracked_limit_orders:             # <<<<<<<<<<<<<<
 *             if tracked_limit_order.exchange_order_id == fill_event.order_hash:
 *                 previous_is_done = tracked_limit_order.is_done
 */
  __pyx_t_3 = __pyx_v_tracked_limit_orders; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 572, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_tracked_limit_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":573
 * 
 *         for tracked_limit_order in tracked_limit_orders:
 *             if tracked_limit_order.exchange_order_id == fill_event.order_hash:             # <<<<<<<<<<<<<<
 *                 previous_is_done = tracked_limit_order.is_done
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_order_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_tracked_limit_order->__pyx_base.exchange_order_id, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":574
 *         for tracked_limit_order in tracked_limit_orders:
 *             if tracked_limit_order.exchange_order_id == fill_event.order_hash:
 *                 previous_is_done = tracked_limit_order.is_done             # <<<<<<<<<<<<<<
 * 
 *                 if not previous_is_done:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_previous_is_done = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":576
 *                 previous_is_done = tracked_limit_order.is_done
 * 
 *                 if not previous_is_done:             # <<<<<<<<<<<<<<
 *                     order_remaining_base_token_amount = tracked_limit_order.available_amount_base
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_previous_is_done); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 576, __pyx_L1_error)
      __pyx_t_6 = ((!__pyx_t_5) != 0);
      if (__pyx_t_6) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":577
 * 
 *                 if not previous_is_done:
 *                     order_remaining_base_token_amount = tracked_limit_order.available_amount_base             # <<<<<<<<<<<<<<
 * 
 *                     trading_pair_rules = self.trading_rules.get(tracked_limit_order.trading_pair)
 */
        __pyx_t_2 = __pyx_v_tracked_limit_order->available_amount_base;
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_order_remaining_base_token_amount = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":579
 *                     order_remaining_base_token_amount = tracked_limit_order.available_amount_base
 * 
 *                     trading_pair_rules = self.trading_rules.get(tracked_limit_order.trading_pair)             # <<<<<<<<<<<<<<
 *                     base_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_base_amount_increment))))
 *                     quote_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_quote_amount_increment))))
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_rules); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 579, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 579, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_tracked_limit_order->__pyx_base.trading_pair};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_v_trading_pair_rules = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":580
 * 
 *                     trading_pair_rules = self.trading_rules.get(tracked_limit_order.trading_pair)
 *                     base_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_base_amount_increment))))             # <<<<<<<<<<<<<<
 *                     quote_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_quote_amount_increment))))
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_math); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_math); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_log10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_trading_pair_rules, __pyx_n_s_min_base_amount_increment); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyNumber_Float(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_12};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 580, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_8};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 580, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Negative(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_base_asset_decimals = __pyx_t_9;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":581
 *                     trading_pair_rules = self.trading_rules.get(tracked_limit_order.trading_pair)
 *                     base_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_base_amount_increment))))
 *                     quote_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_quote_amount_increment))))             # <<<<<<<<<<<<<<
 * 
 *                     order_filled_base_token_amount = s_decimal_0
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_math); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_ceil); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_math); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_log10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_trading_pair_rules, __pyx_n_s_min_quote_amount_increment); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_PyNumber_Float(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __pyx_t_12 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Negative(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_quote_asset_decimals = __pyx_t_9;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":583
 *                     quote_asset_decimals = -int(math.ceil(math.log10(float(trading_pair_rules.min_quote_amount_increment))))
 * 
 *                     order_filled_base_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *                     order_filled_quote_token_amount = s_decimal_0
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_order_filled_base_token_amount = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":584
 * 
 *                     order_filled_base_token_amount = s_decimal_0
 *                     order_filled_quote_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *                     # Each update has a list of fills, we only process these once
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_order_filled_quote_token_amount = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":587
 * 
 *                     # Each update has a list of fills, we only process these once
 *                     if fill_event.tx_hash not in tracked_limit_order.recorded_fills:             # <<<<<<<<<<<<<<
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_tracked_limit_order->recorded_fills, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 587, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = (__pyx_t_6 != 0);
        if (__pyx_t_5) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":588
 *                     # Each update has a list of fills, we only process these once
 *                     if fill_event.tx_hash not in tracked_limit_order.recorded_fills:
 *                         if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 *                             order_filled_quote_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BUY); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_5 = (__pyx_v_tracked_limit_order->__pyx_base.trade_type == __pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_6 = (__pyx_t_5 != 0);
          if (__pyx_t_6) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":589
 *                     if fill_event.tx_hash not in tracked_limit_order.recorded_fills:
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")             # <<<<<<<<<<<<<<
 *                             order_filled_quote_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 *                         else:
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_taker_asset_filled_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_base_asset_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_filled_base_token_amount, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":590
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 *                             order_filled_quote_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")             # <<<<<<<<<<<<<<
 *                         else:
 *                             order_filled_base_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_maker_asset_filled_amount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = __Pyx_PyUnicode_From_int(__pyx_v_quote_asset_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_12};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 590, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_filled_quote_token_amount, __pyx_t_8);
            __pyx_t_8 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":588
 *                     # Each update has a list of fills, we only process these once
 *                     if fill_event.tx_hash not in tracked_limit_order.recorded_fills:
 *                         if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 *                             order_filled_quote_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 */
            goto __pyx_L8;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":592
 *                             order_filled_quote_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 *                         else:
 *                             order_filled_base_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")             # <<<<<<<<<<<<<<
 *                             order_filled_quote_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 * 
 */
          /*else*/ {
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_maker_asset_filled_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_12 = __Pyx_PyUnicode_From_int(__pyx_v_base_asset_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_filled_base_token_amount, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":593
 *                         else:
 *                             order_filled_base_token_amount = fill_event.maker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 *                             order_filled_quote_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")             # <<<<<<<<<<<<<<
 * 
 *                         if order_filled_base_token_amount > 0:
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_taker_asset_filled_amount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 593, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 593, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = __Pyx_PyUnicode_From_int(__pyx_v_quote_asset_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 593, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 593, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_12};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 593, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_filled_quote_token_amount, __pyx_t_8);
            __pyx_t_8 = 0;
          }
          __pyx_L8:;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":595
 *                             order_filled_quote_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 * 
 *                         if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.recorded_fills.append(fill_event.tx_hash)
 * 
 */
          __pyx_t_8 = PyObject_RichCompare(__pyx_v_order_filled_base_token_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 595, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (__pyx_t_6) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":596
 * 
 *                         if order_filled_base_token_amount > 0:
 *                             tracked_limit_order.recorded_fills.append(fill_event.tx_hash)             # <<<<<<<<<<<<<<
 * 
 *                     tracked_limit_order.available_amount_base = order_remaining_base_token_amount - order_filled_base_token_amount
 */
            if (unlikely(__pyx_v_tracked_limit_order->recorded_fills == Py_None)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
              __PYX_ERR(0, 596, __pyx_L1_error)
            }
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_fill_event, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 596, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_tracked_limit_order->recorded_fills, __pyx_t_8); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 596, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":595
 *                             order_filled_quote_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{quote_asset_decimals}")
 * 
 *                         if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.recorded_fills.append(fill_event.tx_hash)
 * 
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":587
 * 
 *                     # Each update has a list of fills, we only process these once
 *                     if fill_event.tx_hash not in tracked_limit_order.recorded_fills:             # <<<<<<<<<<<<<<
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             order_filled_base_token_amount = fill_event.taker_asset_filled_amount / Decimal(f"1e{base_asset_decimals}")
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":598
 *                             tracked_limit_order.recorded_fills.append(fill_event.tx_hash)
 * 
 *                     tracked_limit_order.available_amount_base = order_remaining_base_token_amount - order_filled_base_token_amount             # <<<<<<<<<<<<<<
 * 
 *                     if tracked_limit_order.available_amount_base < 0:
 */
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_order_remaining_base_token_amount, __pyx_v_order_filled_base_token_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_v_tracked_limit_order->available_amount_base);
        __Pyx_DECREF(__pyx_v_tracked_limit_order->available_amount_base);
        __pyx_v_tracked_limit_order->available_amount_base = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":600
 *                     tracked_limit_order.available_amount_base = order_remaining_base_token_amount - order_filled_base_token_amount
 * 
 *                     if tracked_limit_order.available_amount_base < 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.available_amount_base = 0
 * 
 */
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_tracked_limit_order->available_amount_base, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 600, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_6) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":601
 * 
 *                     if tracked_limit_order.available_amount_base < 0:
 *                         tracked_limit_order.available_amount_base = 0             # <<<<<<<<<<<<<<
 * 
 *                     if order_filled_base_token_amount > 0:
 */
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
          __Pyx_GOTREF(__pyx_v_tracked_limit_order->available_amount_base);
          __Pyx_DECREF(__pyx_v_tracked_limit_order->available_amount_base);
          __pyx_v_tracked_limit_order->available_amount_base = __pyx_int_0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":600
 *                     tracked_limit_order.available_amount_base = order_remaining_base_token_amount - order_filled_base_token_amount
 * 
 *                     if tracked_limit_order.available_amount_base < 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.available_amount_base = 0
 * 
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":603
 *                         tracked_limit_order.available_amount_base = 0
 * 
 *                     if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 */
        __pyx_t_8 = PyObject_RichCompare(__pyx_v_order_filled_base_token_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 603, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 603, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_6) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":604
 * 
 *                     if order_filled_base_token_amount > 0:
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 */
          __pyx_t_8 = PyNumber_Add(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_v_order_filled_base_token_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base);
          __Pyx_DECREF(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base);
          __pyx_v_tracked_limit_order->__pyx_base.executed_amount_base = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":605
 *                     if order_filled_base_token_amount > 0:
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")
 */
          __pyx_t_8 = PyNumber_Add(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_v_order_filled_quote_token_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 605, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote);
          __Pyx_DECREF(__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote);
          __pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":606
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")
 *                         self.c_trigger_event(
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_12 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_12, };
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_Filled);
          __pyx_t_14 += 7;
          __Pyx_GIVEREF(__pyx_kp_u_Filled);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Filled);
          __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_order_filled_base_token_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_INCREF(__pyx_kp_u_out_of);
          __pyx_t_14 += 8;
          __Pyx_GIVEREF(__pyx_kp_u_out_of);
          PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_out_of);
          __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_tracked_limit_order->__pyx_base.amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_INCREF(__pyx_kp_u_of_the_limit_order);
          __pyx_t_14 += 20;
          __Pyx_GIVEREF(__pyx_kp_u_of_the_limit_order);
          PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_of_the_limit_order);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":607
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
          __pyx_t_12 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 607, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_INCREF(__pyx_kp_u_according_to_the_RPC_transactio);
          __pyx_t_14 += 39;
          __Pyx_GIVEREF(__pyx_kp_u_according_to_the_RPC_transactio);
          PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_according_to_the_RPC_transactio);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":606
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")
 *                         self.c_trigger_event(
 */
          __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_2, 7, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_12};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 606, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":609
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                             OrderFilledEvent(
 *                                 current_timestamp,
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_8); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":610
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                             OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                                 current_timestamp,
 *                                 tracked_limit_order.client_order_id,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":611
 *                             self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                             OrderFilledEvent(
 *                                 current_timestamp,             # <<<<<<<<<<<<<<
 *                                 tracked_limit_order.client_order_id,
 *                                 tracked_limit_order.trading_pair,
 */
          __pyx_t_12 = PyFloat_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 611, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":615
 *                                 tracked_limit_order.trading_pair,
 *                                 tracked_limit_order.trade_type,
 *                                 OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                                 tracked_limit_order.price,
 *                                 order_filled_base_token_amount,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":618
 *                                 tracked_limit_order.price,
 *                                 order_filled_base_token_amount,
 *                                 TradeFee(0.0),  # no fee for limit order fills             # <<<<<<<<<<<<<<
 *                                 tracked_limit_order.exchange_order_id,  # Use order hash for limit order validation
 *                             )
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_float_0_0};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":619
 *                                 order_filled_base_token_amount,
 *                                 TradeFee(0.0),  # no fee for limit order fills
 *                                 tracked_limit_order.exchange_order_id,  # Use order hash for limit order validation             # <<<<<<<<<<<<<<
 *                             )
 *                         )
 */
          __pyx_t_11 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[10] = {__pyx_t_11, __pyx_t_12, __pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_v_tracked_limit_order->__pyx_base.trading_pair, __pyx_v_tracked_limit_order->__pyx_base.trade_type, __pyx_t_10, __pyx_v_tracked_limit_order->__pyx_base.price, __pyx_v_order_filled_base_token_amount, __pyx_t_2, __pyx_v_tracked_limit_order->__pyx_base.exchange_order_id};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":608
 *                         self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                            f"limit order {tracked_limit_order.client_order_id} according to the RPC transaction logs.")
 *                         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                             self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                             OrderFilledEvent(
 */
          __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_16, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":603
 *                         tracked_limit_order.available_amount_base = 0
 * 
 *                     if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                         tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":622
 *                             )
 *                         )
 *                     if tracked_limit_order.available_amount_base == 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.last_state = "FILLED"
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 60)
 */
        __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_v_tracked_limit_order->available_amount_base, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 622, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (__pyx_t_6) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":623
 *                         )
 *                     if tracked_limit_order.available_amount_base == 0:
 *                         tracked_limit_order.last_state = "FILLED"             # <<<<<<<<<<<<<<
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 60)
 *                         # Remove from log tracking
 */
          __Pyx_INCREF(__pyx_n_u_FILLED);
          __Pyx_GIVEREF(__pyx_n_u_FILLED);
          __Pyx_GOTREF(__pyx_v_tracked_limit_order->__pyx_base.last_state);
          __Pyx_DECREF(__pyx_v_tracked_limit_order->__pyx_base.last_state);
          __pyx_v_tracked_limit_order->__pyx_base.last_state = __pyx_n_u_FILLED;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":624
 *                     if tracked_limit_order.available_amount_base == 0:
 *                         tracked_limit_order.last_state = "FILLED"
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 60)             # <<<<<<<<<<<<<<
 *                         # Remove from log tracking
 *                         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id))
 */
          __pyx_t_7 = __pyx_v_tracked_limit_order->__pyx_base.client_order_id;
          __Pyx_INCREF(__pyx_t_7);
          __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_v_self, ((PyObject*)__pyx_t_7), 60); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 624, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":626
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 60)
 *                         # Remove from log tracking
 *                         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id))             # <<<<<<<<<<<<<<
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeroex_fill_watcher); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_unwatch_order_hash); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_tracked_limit_order->__pyx_base.exchange_order_id};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __pyx_t_10 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 626, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":627
 *                         # Remove from log tracking
 *                         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id))
 *                         if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_BUY); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_6 = (__pyx_v_tracked_limit_order->__pyx_base.trade_type == __pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_5 = (__pyx_t_6 != 0);
          if (__pyx_t_5) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":628
 *                         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id))
 *                         if tracked_limit_order.trade_type is TradeType.BUY:
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_10, };
              __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_14 = 0;
            __pyx_t_15 = 127;
            __Pyx_INCREF(__pyx_kp_u_The_limit_buy_order);
            __pyx_t_14 += 20;
            __Pyx_GIVEREF(__pyx_kp_u_The_limit_buy_order);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_The_limit_buy_order);
            __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_15;
            __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
            __pyx_t_10 = 0;
            __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_the);
            __pyx_t_14 += 53;
            __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_the);
            PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_has_completed_according_to_the);
            __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 628, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_10};
              __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":630
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  BuyOrderCompletedEvent(current_timestamp,
 *                                                                         tracked_limit_order.client_order_id,
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":631
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                                  BuyOrderCompletedEvent(current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                         tracked_limit_order.client_order_id,
 *                                                                         tracked_limit_order.base_asset,
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_10 = PyFloat_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 631, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":633
 *                                                  BuyOrderCompletedEvent(current_timestamp,
 *                                                                         tracked_limit_order.client_order_id,
 *                                                                         tracked_limit_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                         tracked_limit_order.quote_asset,
 *                                                                         tracked_limit_order.quote_asset,
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 633, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":634
 *                                                                         tracked_limit_order.client_order_id,
 *                                                                         tracked_limit_order.base_asset,
 *                                                                         tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                         tracked_limit_order.quote_asset,
 *                                                                         tracked_limit_order.executed_amount_base,
 */
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 634, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":635
 *                                                                         tracked_limit_order.base_asset,
 *                                                                         tracked_limit_order.quote_asset,
 *                                                                         tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                         tracked_limit_order.executed_amount_base,
 *                                                                         tracked_limit_order.executed_amount_quote,
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 635, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":639
 *                                                                         tracked_limit_order.executed_amount_quote,
 *                                                                         tracked_limit_order.protocol_fee_amount,
 *                                                                         OrderType.LIMIT))             # <<<<<<<<<<<<<<
 *                         else:
 *                             self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 */
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 639, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 639, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[10] = {__pyx_t_17, __pyx_t_10, __pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_t_8, __pyx_t_12, __pyx_t_11, __pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_limit_order->protocol_fee_amount, __pyx_t_18};
              __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":630
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  BuyOrderCompletedEvent(current_timestamp,
 *                                                                         tracked_limit_order.client_order_id,
 */
            __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_16, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":627
 *                         # Remove from log tracking
 *                         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id))
 *                         if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                             self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 */
            goto __pyx_L13;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":641
 *                                                                         OrderType.LIMIT))
 *                         else:
 *                             self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 */
          /*else*/ {
            __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 641, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_11 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_18);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_18, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_11, };
              __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 641, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_14 = 0;
            __pyx_t_15 = 127;
            __Pyx_INCREF(__pyx_kp_u_The_limit_sell_order);
            __pyx_t_14 += 21;
            __Pyx_GIVEREF(__pyx_kp_u_The_limit_sell_order);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_The_limit_sell_order);
            __pyx_t_11 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 641, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_15;
            __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11);
            __pyx_t_11 = 0;
            __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_the);
            __pyx_t_14 += 53;
            __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_the);
            PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_has_completed_according_to_the);
            __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 641, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_18);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_18, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_11};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":643
 *                             self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  SellOrderCompletedEvent(current_timestamp,
 *                                                                          tracked_limit_order.client_order_id,
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":644
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                                  SellOrderCompletedEvent(current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                          tracked_limit_order.client_order_id,
 *                                                                          tracked_limit_order.base_asset,
 */
            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 644, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_11 = PyFloat_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 644, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":646
 *                                                  SellOrderCompletedEvent(current_timestamp,
 *                                                                          tracked_limit_order.client_order_id,
 *                                                                          tracked_limit_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                          tracked_limit_order.quote_asset,
 *                                                                          tracked_limit_order.quote_asset,
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":647
 *                                                                          tracked_limit_order.client_order_id,
 *                                                                          tracked_limit_order.base_asset,
 *                                                                          tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                          tracked_limit_order.quote_asset,
 *                                                                          tracked_limit_order.executed_amount_base,
 */
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 647, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":648
 *                                                                          tracked_limit_order.base_asset,
 *                                                                          tracked_limit_order.quote_asset,
 *                                                                          tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                          tracked_limit_order.executed_amount_base,
 *                                                                          tracked_limit_order.executed_amount_quote,
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 648, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":652
 *                                                                          tracked_limit_order.executed_amount_quote,
 *                                                                          tracked_limit_order.protocol_fee_amount,
 *                                                                          OrderType.LIMIT))             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 652, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 652, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            __pyx_t_9 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_18);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_18, function);
                __pyx_t_9 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[10] = {__pyx_t_10, __pyx_t_11, __pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_t_7, __pyx_t_12, __pyx_t_8, __pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_limit_order->protocol_fee_amount, __pyx_t_17};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 644, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":643
 *                             self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 *                                                f"has completed according to the RPC transaction logs.")
 *                             self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  SellOrderCompletedEvent(current_timestamp,
 *                                                                          tracked_limit_order.client_order_id,
 */
            __pyx_t_18 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_16, __pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
          __pyx_L13:;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":622
 *                             )
 *                         )
 *                     if tracked_limit_order.available_amount_base == 0:             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.last_state = "FILLED"
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 60)
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":576
 *                 previous_is_done = tracked_limit_order.is_done
 * 
 *                 if not previous_is_done:             # <<<<<<<<<<<<<<
 *                     order_remaining_base_token_amount = tracked_limit_order.available_amount_base
 * 
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":653
 *                                                                          tracked_limit_order.protocol_fee_amount,
 *                                                                          OrderType.LIMIT))
 *                 return             # <<<<<<<<<<<<<<
 * 
 *     async def _update_limit_order_status(self):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":573
 * 
 *         for tracked_limit_order in tracked_limit_orders:
 *             if tracked_limit_order.exchange_order_id == fill_event.order_hash:             # <<<<<<<<<<<<<<
 *                 previous_is_done = tracked_limit_order.is_done
 * 
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":572
 *         tracked_limit_orders = list(self._in_flight_limit_orders.values())
 * 
 *         for tracked_limit_order in tracked_limit_orders:             # <<<<<<<<<<<<<<
 *             if tracked_limit_order.exchange_order_id == fill_event.order_hash:
 *                 previous_is_done = tracked_limit_order.is_done
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":560
 * 
 *     # Single order update, i.e. via RPC logs instead of market API
 *     def _update_single_limit_order(self, fill_event: ZeroExFillEvent):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_single_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_remaining_base_token_amount);
  __Pyx_XDECREF(__pyx_v_order_filled_base_token_amount);
  __Pyx_XDECREF(__pyx_v_order_filled_quote_token_amount);
  __Pyx_XDECREF((PyObject *)__pyx_v_tracked_limit_order);
  __Pyx_XDECREF(__pyx_v_tracked_limit_orders);
  __Pyx_XDECREF(__pyx_v_previous_is_done);
  __Pyx_XDECREF(__pyx_v_trading_pair_rules);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_39generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":655
 *                 return
 * 
 *     async def _update_limit_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status = {"_update_limit_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_limit_order_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_limit_order_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_limit_order_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_37_update_limit_order_status(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_37_update_limit_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_limit_order_status", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 655, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_39generator7, __pyx_codeobj__12, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_limit_order_status, __pyx_n_s_BambooRelayExchange__update_limi, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_limit_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_39generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int64_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  long __pyx_t_22;
  long __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_limit_order_status", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_await;
    case 2: goto __pyx_L37_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 655, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":657
 *     async def _update_limit_order_status(self):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             int order_timestamp_diff
 *             object order_remaining_base_token_amount
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":665
 *             object previous_amount_available
 * 
 *         if current_timestamp - self._last_update_limit_order_timestamp <= self.UPDATE_OPEN_LIMIT_ORDERS_INTERVAL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_current_timestamp - __pyx_cur_scope->__pyx_v_self->_last_update_limit_order_timestamp)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":666
 * 
 *         if current_timestamp - self._last_update_limit_order_timestamp <= self.UPDATE_OPEN_LIMIT_ORDERS_INTERVAL:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":665
 *             object previous_amount_available
 * 
 *         if current_timestamp - self._last_update_limit_order_timestamp <= self.UPDATE_OPEN_LIMIT_ORDERS_INTERVAL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":671
 *             BambooRelayInFlightOrder tracked_limit_order
 * 
 *         if len(self._in_flight_limit_orders) > 0:             # <<<<<<<<<<<<<<
 *             tracked_limit_orders = list(self._in_flight_limit_orders.values())
 *             order_updates = await self._get_order_updates(tracked_limit_orders)
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders;
  __Pyx_INCREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 671, __pyx_L1_error)
  }
  __pyx_t_6 = PyDict_Size(__pyx_t_4); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = ((__pyx_t_6 > 0) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":672
 * 
 *         if len(self._in_flight_limit_orders) > 0:
 *             tracked_limit_orders = list(self._in_flight_limit_orders.values())             # <<<<<<<<<<<<<<
 *             order_updates = await self._get_order_updates(tracked_limit_orders)
 *             # Every limit order update happens on this tick, so use the current timestamp
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 672, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_tracked_limit_orders = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":673
 *         if len(self._in_flight_limit_orders) > 0:
 *             tracked_limit_orders = list(self._in_flight_limit_orders.values())
 *             order_updates = await self._get_order_updates(tracked_limit_orders)             # <<<<<<<<<<<<<<
 *             # Every limit order update happens on this tick, so use the current timestamp
 *             current_timestamp = self._current_timestamp
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_order_updates); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_tracked_limit_orders};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L6_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 673, __pyx_L1_error)
      __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
    } else {
      __pyx_t_3 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_order_updates = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":675
 *             order_updates = await self._get_order_updates(tracked_limit_orders)
 *             # Every limit order update happens on this tick, so use the current timestamp
 *             current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             for order_update, tracked_limit_order in zip(order_updates, tracked_limit_orders):
 *                 if order_update is None:
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
    __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_1;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":676
 *             # Every limit order update happens on this tick, so use the current timestamp
 *             current_timestamp = self._current_timestamp
 *             for order_update, tracked_limit_order in zip(order_updates, tracked_limit_orders):             # <<<<<<<<<<<<<<
 *                 if order_update is None:
 *                     # 404 handling
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_updates);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_updates);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_order_updates);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tracked_limit_orders);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tracked_limit_orders);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_tracked_limit_orders);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 676, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 676, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 676, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
        index = 0; __pyx_t_2 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 676, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_update);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_update, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XGOTREF((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_limit_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_9));
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":677
 *             current_timestamp = self._current_timestamp
 *             for order_update, tracked_limit_order in zip(order_updates, tracked_limit_orders):
 *                 if order_update is None:             # <<<<<<<<<<<<<<
 *                     # 404 handling
 *                     if not tracked_limit_order.is_cancelled and not tracked_limit_order.has_been_cancelled:
 */
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_order_update == Py_None);
      __pyx_t_12 = (__pyx_t_5 != 0);
      if (__pyx_t_12) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":679
 *                 if order_update is None:
 *                     # 404 handling
 *                     if not tracked_limit_order.is_cancelled and not tracked_limit_order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} could not be found "
 *                                            f"according to order status API. Removing from tracking.")
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = ((!__pyx_t_5) != 0);
        if (__pyx_t_13) {
        } else {
          __pyx_t_12 = __pyx_t_13;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_t_13 = ((!(__pyx_cur_scope->__pyx_v_tracked_limit_order->has_been_cancelled != 0)) != 0);
        __pyx_t_12 = __pyx_t_13;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_12) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":680
 *                     # 404 handling
 *                     if not tracked_limit_order.is_cancelled and not tracked_limit_order.has_been_cancelled:
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} could not be found "             # <<<<<<<<<<<<<<
 *                                            f"according to order status API. Removing from tracking.")
 *                         # soft cancel this order if we are using the coordinator just to be safe
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_10, };
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 680, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_order);
          __pyx_t_14 += 16;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_The_limit_order);
          __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 680, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_INCREF(__pyx_kp_u_could_not_be_found_according_to);
          __pyx_t_14 += 74;
          __Pyx_GIVEREF(__pyx_kp_u_could_not_be_found_according_to);
          PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_could_not_be_found_according_to);
          __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 680, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":683
 *                                            f"according to order status API. Removing from tracking.")
 *                         # soft cancel this order if we are using the coordinator just to be safe
 *                         if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                             self.c_cancel("", tracked_limit_order.client_order_id)
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)
 */
          __pyx_t_12 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->is_coordinated != 0);
          if (__pyx_t_12) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":684
 *                         # soft cancel this order if we are using the coordinator just to be safe
 *                         if tracked_limit_order.is_coordinated:
 *                             self.c_cancel("", tracked_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)
 *                         self.c_trigger_event(
 */
            __pyx_t_4 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
            __Pyx_INCREF(__pyx_t_4);
            __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_kp_u__13, ((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":683
 *                                            f"according to order status API. Removing from tracking.")
 *                         # soft cancel this order if we are using the coordinator just to be safe
 *                         if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                             self.c_cancel("", tracked_limit_order.client_order_id)
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":685
 *                         if tracked_limit_order.is_coordinated:
 *                             self.c_cancel("", tracked_limit_order.client_order_id)
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
          __pyx_t_2 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_2), 10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":687
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                         )
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 687, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":688
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *                         )
 *                         tracked_limit_order.last_state = "CANCELED"
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 688, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_10, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":686
 *                             self.c_cancel("", tracked_limit_order.client_order_id)
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 10)
 *                         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 */
          __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":690
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                         )
 *                         tracked_limit_order.last_state = "CANCELED"             # <<<<<<<<<<<<<<
 *                     continue
 *                 previous_is_done = tracked_limit_order.is_done
 */
          __Pyx_INCREF(__pyx_n_u_CANCELED);
          __Pyx_GIVEREF(__pyx_n_u_CANCELED);
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state);
          __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state = __pyx_n_u_CANCELED;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":679
 *                 if order_update is None:
 *                     # 404 handling
 *                     if not tracked_limit_order.is_cancelled and not tracked_limit_order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} could not be found "
 *                                            f"according to order status API. Removing from tracking.")
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":691
 *                         )
 *                         tracked_limit_order.last_state = "CANCELED"
 *                     continue             # <<<<<<<<<<<<<<
 *                 previous_is_done = tracked_limit_order.is_done
 *                 previous_is_cancelled = tracked_limit_order.is_cancelled
 */
        goto __pyx_L7_continue;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":677
 *             current_timestamp = self._current_timestamp
 *             for order_update, tracked_limit_order in zip(order_updates, tracked_limit_orders):
 *                 if order_update is None:             # <<<<<<<<<<<<<<
 *                     # 404 handling
 *                     if not tracked_limit_order.is_cancelled and not tracked_limit_order.has_been_cancelled:
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":692
 *                         tracked_limit_order.last_state = "CANCELED"
 *                     continue
 *                 previous_is_done = tracked_limit_order.is_done             # <<<<<<<<<<<<<<
 *                 previous_is_cancelled = tracked_limit_order.is_cancelled
 *                 previous_is_failure = tracked_limit_order.is_failure
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_previous_is_done);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_previous_is_done, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":693
 *                     continue
 *                 previous_is_done = tracked_limit_order.is_done
 *                 previous_is_cancelled = tracked_limit_order.is_cancelled             # <<<<<<<<<<<<<<
 *                 previous_is_failure = tracked_limit_order.is_failure
 *                 previous_is_expired = tracked_limit_order.is_expired
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_previous_is_cancelled);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_previous_is_cancelled, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":694
 *                 previous_is_done = tracked_limit_order.is_done
 *                 previous_is_cancelled = tracked_limit_order.is_cancelled
 *                 previous_is_failure = tracked_limit_order.is_failure             # <<<<<<<<<<<<<<
 *                 previous_is_expired = tracked_limit_order.is_expired
 *                 order_state = order_update["state"]
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_failure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_previous_is_failure);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_previous_is_failure, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":695
 *                 previous_is_cancelled = tracked_limit_order.is_cancelled
 *                 previous_is_failure = tracked_limit_order.is_failure
 *                 previous_is_expired = tracked_limit_order.is_expired             # <<<<<<<<<<<<<<
 *                 order_state = order_update["state"]
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_expired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_previous_is_expired);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_previous_is_expired, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":696
 *                 previous_is_failure = tracked_limit_order.is_failure
 *                 previous_is_expired = tracked_limit_order.is_expired
 *                 order_state = order_update["state"]             # <<<<<<<<<<<<<<
 * 
 *                 order_remaining_base_token_amount = Decimal(order_update["remainingBaseTokenAmount"])
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_update, __pyx_n_u_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_state);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_state, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":698
 *                 order_state = order_update["state"]
 * 
 *                 order_remaining_base_token_amount = Decimal(order_update["remainingBaseTokenAmount"])             # <<<<<<<<<<<<<<
 * 
 *                 order_filled_base_token_amount = s_decimal_0
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_update, __pyx_n_u_remainingBaseTokenAmount); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":700
 *                 order_remaining_base_token_amount = Decimal(order_update["remainingBaseTokenAmount"])
 * 
 *                 order_filled_base_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *                 order_filled_quote_token_amount = s_decimal_0
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":701
 * 
 *                 order_filled_base_token_amount = s_decimal_0
 *                 order_filled_quote_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *                 # Each update has a list of fills, we only process these once
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_filled_quote_token_amount);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_filled_quote_token_amount, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":704
 * 
 *                 # Each update has a list of fills, we only process these once
 *                 for fill in order_update["fills"]:             # <<<<<<<<<<<<<<
 *                     if not fill["transactionHash"] in tracked_limit_order.recorded_fills:
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_update, __pyx_n_u_fills); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 704, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 704, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_17)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 704, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 704, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_17(__pyx_t_4);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 704, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fill);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fill, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":705
 *                 # Each update has a list of fills, we only process these once
 *                 for fill in order_update["fills"]:
 *                     if not fill["transactionHash"] in tracked_limit_order.recorded_fills:             # <<<<<<<<<<<<<<
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 */
        __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_transactionHash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_cur_scope->__pyx_v_tracked_limit_order->recorded_fills, Py_NE)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 705, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_13 = (__pyx_t_12 != 0);
        if (__pyx_t_13) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":706
 *                 for fill in order_update["fills"]:
 *                     if not fill["transactionHash"] in tracked_limit_order.recorded_fills:
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])             # <<<<<<<<<<<<<<
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 *                         if fill_base_token_amount > 0 and fill["blockNumber"] > 0 and fill["status"] == "COMPLETED":
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_filledBaseTokenAmount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_18 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_18)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_18);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_9};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_fill_base_token_amount);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_fill_base_token_amount, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":708
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 *                         if fill_base_token_amount > 0 and fill["blockNumber"] > 0 and fill["status"] == "COMPLETED":             # <<<<<<<<<<<<<<
 *                             order_filled_base_token_amount += fill_base_token_amount
 *                             order_filled_quote_token_amount += Decimal(fill["filledQuoteTokenAmount"])
 */
          __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_fill_base_token_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__pyx_t_12) {
          } else {
            __pyx_t_13 = __pyx_t_12;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_12) {
          } else {
            __pyx_t_13 = __pyx_t_12;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_status); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = (__Pyx_PyUnicode_Equals(__pyx_t_10, __pyx_n_u_COMPLETED, Py_EQ)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_13 = __pyx_t_12;
          __pyx_L20_bool_binop_done:;
          if (__pyx_t_13) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":709
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 *                         if fill_base_token_amount > 0 and fill["blockNumber"] > 0 and fill["status"] == "COMPLETED":
 *                             order_filled_base_token_amount += fill_base_token_amount             # <<<<<<<<<<<<<<
 *                             order_filled_quote_token_amount += Decimal(fill["filledQuoteTokenAmount"])
 *                             tracked_limit_order.recorded_fills.append(fill["transactionHash"])
 */
            __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_cur_scope->__pyx_v_fill_base_token_amount); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 709, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            __pyx_t_10 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":710
 *                         if fill_base_token_amount > 0 and fill["blockNumber"] > 0 and fill["status"] == "COMPLETED":
 *                             order_filled_base_token_amount += fill_base_token_amount
 *                             order_filled_quote_token_amount += Decimal(fill["filledQuoteTokenAmount"])             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.recorded_fills.append(fill["transactionHash"])
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 710, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_filledQuoteTokenAmount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 710, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_18 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_9};
              __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 710, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_order_filled_quote_token_amount, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 710, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_filled_quote_token_amount);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_filled_quote_token_amount, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":711
 *                             order_filled_base_token_amount += fill_base_token_amount
 *                             order_filled_quote_token_amount += Decimal(fill["filledQuoteTokenAmount"])
 *                             tracked_limit_order.recorded_fills.append(fill["transactionHash"])             # <<<<<<<<<<<<<<
 * 
 *                 previous_amount_available = tracked_limit_order.available_amount_base
 */
            if (unlikely(__pyx_cur_scope->__pyx_v_tracked_limit_order->recorded_fills == Py_None)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
              __PYX_ERR(0, 711, __pyx_L1_error)
            }
            __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_fill, __pyx_n_u_transactionHash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_tracked_limit_order->recorded_fills, __pyx_t_2); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 711, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":708
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 *                         if fill_base_token_amount > 0 and fill["blockNumber"] > 0 and fill["status"] == "COMPLETED":             # <<<<<<<<<<<<<<
 *                             order_filled_base_token_amount += fill_base_token_amount
 *                             order_filled_quote_token_amount += Decimal(fill["filledQuoteTokenAmount"])
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":705
 *                 # Each update has a list of fills, we only process these once
 *                 for fill in order_update["fills"]:
 *                     if not fill["transactionHash"] in tracked_limit_order.recorded_fills:             # <<<<<<<<<<<<<<
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 *                         # Pending fills have a 0 blocknumer, pending status, or 0 fill amount
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":704
 * 
 *                 # Each update has a list of fills, we only process these once
 *                 for fill in order_update["fills"]:             # <<<<<<<<<<<<<<
 *                     if not fill["transactionHash"] in tracked_limit_order.recorded_fills:
 *                         fill_base_token_amount = Decimal(fill["filledBaseTokenAmount"])
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":713
 *                             tracked_limit_order.recorded_fills.append(fill["transactionHash"])
 * 
 *                 previous_amount_available = tracked_limit_order.available_amount_base             # <<<<<<<<<<<<<<
 * 
 *                 tracked_limit_order.last_state = order_state
 */
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_tracked_limit_order->available_amount_base;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_previous_amount_available);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_previous_amount_available, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":715
 *                 previous_amount_available = tracked_limit_order.available_amount_base
 * 
 *                 tracked_limit_order.last_state = order_state             # <<<<<<<<<<<<<<
 *                 tracked_limit_order.available_amount_base = order_remaining_base_token_amount
 * 
 */
      if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_order_state))||((__pyx_cur_scope->__pyx_v_order_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_cur_scope->__pyx_v_order_state))) __PYX_ERR(0, 715, __pyx_L1_error)
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_order_state;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state);
      __Pyx_DECREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state);
      __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.last_state = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":716
 * 
 *                 tracked_limit_order.last_state = order_state
 *                 tracked_limit_order.available_amount_base = order_remaining_base_token_amount             # <<<<<<<<<<<<<<
 * 
 *                 if order_filled_base_token_amount > 0:
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->available_amount_base);
      __Pyx_DECREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->available_amount_base);
      __pyx_cur_scope->__pyx_v_tracked_limit_order->available_amount_base = __pyx_cur_scope->__pyx_v_order_remaining_base_token_amount;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":718
 *                 tracked_limit_order.available_amount_base = order_remaining_base_token_amount
 * 
 *                 if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 */
      __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 718, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":719
 * 
 *                 if order_filled_base_token_amount > 0:
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount             # <<<<<<<<<<<<<<
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 */
        __pyx_t_4 = PyNumber_Add(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_cur_scope->__pyx_v_order_filled_base_token_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base);
        __Pyx_DECREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base);
        __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":720
 *                 if order_filled_base_token_amount > 0:
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")
 */
        __pyx_t_4 = PyNumber_Add(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_cur_scope->__pyx_v_order_filled_quote_token_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 720, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote);
        __Pyx_DECREF(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote);
        __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":721
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")
 *                     self.c_trigger_event(
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_9, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_Filled);
        __pyx_t_14 += 7;
        __Pyx_GIVEREF(__pyx_kp_u_Filled);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Filled);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_out_of);
        __pyx_t_14 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_out_of);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_out_of);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_of_the_limit_order);
        __pyx_t_14 += 20;
        __Pyx_GIVEREF(__pyx_kp_u_of_the_limit_order);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_of_the_limit_order);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":722
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
        __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 722, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_according_to_order_status_API);
        __pyx_t_14 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_according_to_order_status_API);
        PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_according_to_order_status_API);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":721
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")
 *                     self.c_trigger_event(
 */
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_2, 7, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 721, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 721, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":724
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         OrderFilledEvent(
 *                             current_timestamp,
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 724, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 724, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":725
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                             current_timestamp,
 *                             tracked_limit_order.client_order_id,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":726
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(
 *                             current_timestamp,             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.client_order_id,
 *                             tracked_limit_order.trading_pair,
 */
        __pyx_t_9 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":730
 *                             tracked_limit_order.trading_pair,
 *                             tracked_limit_order.trade_type,
 *                             OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.price,
 *                             order_filled_base_token_amount,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 730, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":733
 *                             tracked_limit_order.price,
 *                             order_filled_base_token_amount,
 *                             TradeFee(0.0),  # no fee for limit order fills             # <<<<<<<<<<<<<<
 *                             tracked_limit_order.exchange_order_id,  # Use order hash for limit order validation
 *                         )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 733, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_21 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_float_0_0};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":734
 *                             order_filled_base_token_amount,
 *                             TradeFee(0.0),  # no fee for limit order fills
 *                             tracked_limit_order.exchange_order_id,  # Use order hash for limit order validation             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
        __pyx_t_20 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[10] = {__pyx_t_20, __pyx_t_9, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.trading_pair, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.trade_type, __pyx_t_18, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.price, __pyx_cur_scope->__pyx_v_order_filled_base_token_amount, __pyx_t_2, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.exchange_order_id};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 9+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":723
 *                     self.logger().info(f"Filled {order_filled_base_token_amount} out of {tracked_limit_order.amount} of the "
 *                                        f"limit order {tracked_limit_order.client_order_id} according to order status API.")
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(
 */
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":718
 *                 tracked_limit_order.available_amount_base = order_remaining_base_token_amount
 * 
 *                 if order_filled_base_token_amount > 0:             # <<<<<<<<<<<<<<
 *                     tracked_limit_order.executed_amount_base = tracked_limit_order.executed_amount_base + order_filled_base_token_amount
 *                     tracked_limit_order.executed_amount_quote = tracked_limit_order.executed_amount_quote + order_filled_quote_token_amount
 */
        goto __pyx_L23;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":737
 *                         )
 *                     )
 *                 elif order_remaining_base_token_amount < (previous_amount_available + order_filled_base_token_amount):             # <<<<<<<<<<<<<<
 *                     # i.e. user was running a bot on Bamboo and Radar, or two instances of the bot at the same time
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has had it's available amount "
 */
      __pyx_t_10 = PyNumber_Add(__pyx_cur_scope->__pyx_v_previous_amount_available, __pyx_cur_scope->__pyx_v_order_filled_base_token_amount); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 737, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 737, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":739
 *                 elif order_remaining_base_token_amount < (previous_amount_available + order_filled_base_token_amount):
 *                     # i.e. user was running a bot on Bamboo and Radar, or two instances of the bot at the same time
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has had it's available amount "             # <<<<<<<<<<<<<<
 *                                        f"reduced to {order_remaining_base_token_amount} according to order status API.")
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_18 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_18)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_18);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_18, };
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_limit_order);
        __pyx_t_14 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_The_limit_order);
        __pyx_t_18 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_INCREF(__pyx_kp_u_has_had_it_s_available_amount_r);
        __pyx_t_14 += 42;
        __Pyx_GIVEREF(__pyx_kp_u_has_had_it_s_available_amount_r);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_has_had_it_s_available_amount_r);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":740
 *                     # i.e. user was running a bot on Bamboo and Radar, or two instances of the bot at the same time
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has had it's available amount "
 *                                        f"reduced to {order_remaining_base_token_amount} according to order status API.")             # <<<<<<<<<<<<<<
 * 
 *                 # Has been soft cancelled already according to the Coordinator Server or
 */
        __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_remaining_base_token_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_INCREF(__pyx_kp_u_according_to_order_status_API);
        __pyx_t_14 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_according_to_order_status_API);
        PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_according_to_order_status_API);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":739
 *                 elif order_remaining_base_token_amount < (previous_amount_available + order_filled_base_token_amount):
 *                     # i.e. user was running a bot on Bamboo and Radar, or two instances of the bot at the same time
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has had it's available amount "             # <<<<<<<<<<<<<<
 *                                        f"reduced to {order_remaining_base_token_amount} according to order status API.")
 * 
 */
        __pyx_t_18 = __Pyx_PyUnicode_Join(__pyx_t_10, 5, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_18};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 739, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":737
 *                         )
 *                     )
 *                 elif order_remaining_base_token_amount < (previous_amount_available + order_filled_base_token_amount):             # <<<<<<<<<<<<<<
 *                     # i.e. user was running a bot on Bamboo and Radar, or two instances of the bot at the same time
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has had it's available amount "
 */
      }
      __pyx_L23:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":744
 *                 # Has been soft cancelled already according to the Coordinator Server or
 *                 # a mined Cancel transaction was completed
 *                 if tracked_limit_order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_13 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->has_been_cancelled != 0);
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":745
 *                 # a mined Cancel transaction was completed
 *                 if tracked_limit_order.has_been_cancelled:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # do not retrigger order events if order was already in that state previously
 */
        goto __pyx_L7_continue;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":744
 *                 # Has been soft cancelled already according to the Coordinator Server or
 *                 # a mined Cancel transaction was completed
 *                 if tracked_limit_order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":748
 * 
 *                 # do not retrigger order events if order was already in that state previously
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:             # <<<<<<<<<<<<<<
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):
 */
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_previous_is_cancelled); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 748, __pyx_L1_error)
      __pyx_t_5 = ((!__pyx_t_12) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_13 = __pyx_t_5;
        goto __pyx_L26_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 748, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = __pyx_t_5;
      __pyx_L26_bool_binop_done:;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":749
 *                 # do not retrigger order events if order was already in that state previously
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >             # <<<<<<<<<<<<<<
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):
 *                         # This cancel was originated from this connector, and the cancel event should have been
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_in_flight_cancels, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_18 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_18)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_18);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_18, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_int_0};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":750
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):             # <<<<<<<<<<<<<<
 *                         # This cancel was originated from this connector, and the cancel event should have been
 *                         # emitted in the cancel_order() call already.
 */
        __pyx_t_2 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_CANCEL_EXPIRY_TIME); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_10 = PyNumber_Subtract(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = PyObject_RichCompare(__pyx_t_4, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":749
 *                 # do not retrigger order events if order was already in that state previously
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >             # <<<<<<<<<<<<<<
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):
 *                         # This cancel was originated from this connector, and the cancel event should have been
 */
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        if (__pyx_t_13) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":753
 *                         # This cancel was originated from this connector, and the cancel event should have been
 *                         # emitted in the cancel_order() call already.
 *                         del self._in_flight_cancels[tracked_limit_order.client_order_id]             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has cancelled according "
 */
          if (unlikely((PyObject_DelItem(__pyx_cur_scope->__pyx_v_self->_in_flight_cancels, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id) < 0))) __PYX_ERR(0, 753, __pyx_L1_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":749
 *                 # do not retrigger order events if order was already in that state previously
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >             # <<<<<<<<<<<<<<
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):
 *                         # This cancel was originated from this connector, and the cancel event should have been
 */
          goto __pyx_L28;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":755
 *                         del self._in_flight_cancels[tracked_limit_order.client_order_id]
 *                     else:
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has cancelled according "             # <<<<<<<<<<<<<<
 *                                            f"to order status API.")
 *                         if tracked_limit_order.is_coordinated:
 */
        /*else*/ {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_2, };
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_order);
          __pyx_t_14 += 16;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_The_limit_order);
          __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_cancelled_according_to_orde);
          __pyx_t_14 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_has_cancelled_according_to_orde);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_has_cancelled_according_to_orde);
          __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
            __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 755, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":757
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has cancelled according "
 *                                            f"to order status API.")
 *                         if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                             order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 */
          __pyx_t_13 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->is_coordinated != 0);
          if (__pyx_t_13) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":759
 *                         if tracked_limit_order.is_coordinated:
 *                             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                             order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))             # <<<<<<<<<<<<<<
 *                             self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))
 *                         else:
 */
            __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_tracked_limit_order->expires); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_4 = __Pyx_PyInt_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = PyNumber_Subtract(__pyx_t_18, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_cur_scope->__pyx_v_order_timestamp_diff = __pyx_t_7;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":760
 *                             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                             order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 *                             self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))             # <<<<<<<<<<<<<<
 *                         else:
 *                             self.c_expire_order(tracked_limit_order.client_order_id, 10)
 */
            __pyx_t_4 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
            __Pyx_INCREF(__pyx_t_4);
            __pyx_t_22 = 0x82;
            __pyx_t_7 = __pyx_cur_scope->__pyx_v_order_timestamp_diff;
            if (((__pyx_t_22 < __pyx_t_7) != 0)) {
              __pyx_t_23 = __pyx_t_22;
            } else {
              __pyx_t_23 = __pyx_t_7;
            }
            __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_4), __pyx_t_23); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":757
 *                         self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has cancelled according "
 *                                            f"to order status API.")
 *                         if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                             order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 */
            goto __pyx_L29;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":762
 *                             self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))
 *                         else:
 *                             self.c_expire_order(tracked_limit_order.client_order_id, 10)             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
          /*else*/ {
            __pyx_t_2 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
            __Pyx_INCREF(__pyx_t_2);
            __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_2), 10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_L29:;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":764
 *                             self.c_expire_order(tracked_limit_order.client_order_id, 10)
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                         )
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 764, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":765
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *                         )
 *                 elif not previous_is_expired and tracked_limit_order.is_expired:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_18 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_10 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_18, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":763
 *                         else:
 *                             self.c_expire_order(tracked_limit_order.client_order_id, 10)
 *                         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 */
          __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_L28:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":748
 * 
 *                 # do not retrigger order events if order was already in that state previously
 *                 if not previous_is_cancelled and tracked_limit_order.is_cancelled:             # <<<<<<<<<<<<<<
 *                     if (self._in_flight_cancels.get(tracked_limit_order.client_order_id, 0) >
 *                             current_timestamp - self.CANCEL_EXPIRY_TIME):
 */
        goto __pyx_L25;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":767
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                         )
 *                 elif not previous_is_expired and tracked_limit_order.is_expired:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has expired according "
 *                                        f"to order status API.")
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_previous_is_expired); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_5) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_13 = __pyx_t_12;
        goto __pyx_L30_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_expired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 767, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = __pyx_t_12;
      __pyx_L30_bool_binop_done:;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":768
 *                         )
 *                 elif not previous_is_expired and tracked_limit_order.is_expired:
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has expired according "             # <<<<<<<<<<<<<<
 *                                        f"to order status API.")
 *                     if tracked_limit_order.is_coordinated:
 */
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_18);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_18, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        }
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_limit_order);
        __pyx_t_14 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_The_limit_order);
        __pyx_t_10 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u_has_expired_according_to_order);
        __pyx_t_14 += 43;
        __Pyx_GIVEREF(__pyx_kp_u_has_expired_according_to_order);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_has_expired_according_to_order);
        __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_18);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_18, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_10};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":770
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has expired according "
 *                                        f"to order status API.")
 *                     if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                         # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                         order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 */
        __pyx_t_13 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->is_coordinated != 0);
        if (__pyx_t_13) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":772
 *                     if tracked_limit_order.is_coordinated:
 *                         # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                         order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))             # <<<<<<<<<<<<<<
 *                         self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))
 *                     else:
 */
          __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_tracked_limit_order->expires); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_18 = __Pyx_PyInt_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 772, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_10 = PyNumber_Subtract(__pyx_t_2, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 772, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = __Pyx_PyNumber_Absolute(__pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 772, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_cur_scope->__pyx_v_order_timestamp_diff = __pyx_t_7;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":773
 *                         # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                         order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 *                         self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 30)
 */
          __pyx_t_18 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
          __Pyx_INCREF(__pyx_t_18);
          __pyx_t_23 = 0x82;
          __pyx_t_7 = __pyx_cur_scope->__pyx_v_order_timestamp_diff;
          if (((__pyx_t_23 < __pyx_t_7) != 0)) {
            __pyx_t_22 = __pyx_t_23;
          } else {
            __pyx_t_22 = __pyx_t_7;
          }
          __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_18), __pyx_t_22); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 773, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":770
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has expired according "
 *                                        f"to order status API.")
 *                     if tracked_limit_order.is_coordinated:             # <<<<<<<<<<<<<<
 *                         # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                         order_timestamp_diff = abs(tracked_limit_order.expires - int(current_timestamp))
 */
          goto __pyx_L32;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":775
 *                         self.c_expire_order(tracked_limit_order.client_order_id, min(order_timestamp_diff, 130))
 *                     else:
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 30)             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_EXPIRED_EVENT_TAG,
 */
        /*else*/ {
          __pyx_t_10 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
          __Pyx_INCREF(__pyx_t_10);
          __pyx_t_18 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_10), 30); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 775, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        }
        __pyx_L32:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":777
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 30)
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_EXPIRED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         OrderExpiredEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                     )
 */
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_18); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 777, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":778
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_EXPIRED_EVENT_TAG,
 *                         OrderExpiredEvent(current_timestamp, tracked_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *                     )
 *                 elif not previous_is_failure and tracked_limit_order.is_failure:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_OrderExpiredEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_2, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id};
          __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":776
 *                     else:
 *                         self.c_expire_order(tracked_limit_order.client_order_id, 30)
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_EXPIRED_EVENT_TAG,
 *                         OrderExpiredEvent(current_timestamp, tracked_limit_order.client_order_id)
 */
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 776, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":767
 *                             OrderCancelledEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                         )
 *                 elif not previous_is_expired and tracked_limit_order.is_expired:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has expired according "
 *                                        f"to order status API.")
 */
        goto __pyx_L25;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":780
 *                         OrderExpiredEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                     )
 *                 elif not previous_is_failure and tracked_limit_order.is_failure:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has failed "
 *                                        f"according to order status API.")
 */
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_previous_is_failure); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 780, __pyx_L1_error)
      __pyx_t_5 = ((!__pyx_t_12) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_13 = __pyx_t_5;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_failure); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 780, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __pyx_t_5;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":781
 *                     )
 *                 elif not previous_is_failure and tracked_limit_order.is_failure:
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has failed "             # <<<<<<<<<<<<<<
 *                                        f"according to order status API.")
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 30)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 781, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = PyTuple_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_14 = 0;
        __pyx_t_15 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_limit_order);
        __pyx_t_14 += 16;
        __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
        PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_kp_u_The_limit_order);
        __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
        __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_has_failed_according_to_order_s);
        __pyx_t_14 += 42;
        __Pyx_GIVEREF(__pyx_kp_u_has_failed_according_to_order_s);
        PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_kp_u_has_failed_according_to_order_s);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_18, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_18)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_18);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_4};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 781, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":783
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has failed "
 *                                        f"according to order status API.")
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 30)             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
        __pyx_t_10 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_10), 30); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":785
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 30)
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         MarketOrderFailureEvent(current_timestamp,
 *                                                 tracked_limit_order.client_order_id,
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":786
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(current_timestamp,             # <<<<<<<<<<<<<<
 *                                                 tracked_limit_order.client_order_id,
 *                                                 OrderType.LIMIT)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 786, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":788
 *                         MarketOrderFailureEvent(current_timestamp,
 *                                                 tracked_limit_order.client_order_id,
 *                                                 OrderType.LIMIT)             # <<<<<<<<<<<<<<
 *                     )
 *                 elif not previous_is_done and tracked_limit_order.is_done:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __pyx_t_18 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_18)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_18);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_18, __pyx_t_4, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_t_9};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":784
 *                                        f"according to order status API.")
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 30)
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(current_timestamp,
 */
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":780
 *                         OrderExpiredEvent(current_timestamp, tracked_limit_order.client_order_id)
 *                     )
 *                 elif not previous_is_failure and tracked_limit_order.is_failure:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"The limit order {tracked_limit_order.client_order_id} has failed "
 *                                        f"according to order status API.")
 */
        goto __pyx_L25;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":790
 *                                                 OrderType.LIMIT)
 *                     )
 *                 elif not previous_is_done and tracked_limit_order.is_done:             # <<<<<<<<<<<<<<
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 60)
 *                     # Remove from log tracking
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_previous_is_done); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 790, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_5) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_13 = __pyx_t_12;
        goto __pyx_L35_bool_binop_done;
      }
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = __pyx_t_12;
      __pyx_L35_bool_binop_done:;
      if (__pyx_t_13) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":791
 *                     )
 *                 elif not previous_is_done and tracked_limit_order.is_done:
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 60)             # <<<<<<<<<<<<<<
 *                     # Remove from log tracking
 *                     await self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id)
 */
        __pyx_t_10 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_10), 60); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":793
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 60)
 *                     # Remove from log tracking
 *                     await self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id)             # <<<<<<<<<<<<<<
 *                     if tracked_limit_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeroex_fill_watcher); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_unwatch_order_hash); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.exchange_order_id};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L37_resume_from_await:;
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 793, __pyx_L1_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 793, __pyx_L1_error)
          }
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":794
 *                     # Remove from log tracking
 *                     await self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id)
 *                     if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BUY); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_13 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.trade_type == __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = (__pyx_t_13 != 0);
        if (__pyx_t_12) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":795
 *                     await self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id)
 *                     if tracked_limit_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_4, };
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_buy_order);
          __pyx_t_14 += 20;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_buy_order);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_The_limit_buy_order);
          __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_orde);
          __pyx_t_14 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_orde);
          PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_has_completed_according_to_orde);
          __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 795, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":797
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(current_timestamp,
 *                                                                     tracked_limit_order.client_order_id,
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_10); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 797, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":798
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                              BuyOrderCompletedEvent(current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                     tracked_limit_order.client_order_id,
 *                                                                     tracked_limit_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 798, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 798, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":800
 *                                              BuyOrderCompletedEvent(current_timestamp,
 *                                                                     tracked_limit_order.client_order_id,
 *                                                                     tracked_limit_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_limit_order.quote_asset,
 *                                                                     tracked_limit_order.quote_asset,
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":801
 *                                                                     tracked_limit_order.client_order_id,
 *                                                                     tracked_limit_order.base_asset,
 *                                                                     tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_limit_order.quote_asset,
 *                                                                     tracked_limit_order.executed_amount_base,
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 801, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":802
 *                                                                     tracked_limit_order.base_asset,
 *                                                                     tracked_limit_order.quote_asset,
 *                                                                     tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_limit_order.executed_amount_base,
 *                                                                     tracked_limit_order.executed_amount_quote,
 */
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 802, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":806
 *                                                                     tracked_limit_order.executed_amount_quote,
 *                                                                     tracked_limit_order.protocol_fee_amount,
 *                                                                     OrderType.LIMIT))             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[10] = {__pyx_t_21, __pyx_t_4, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_t_2, __pyx_t_18, __pyx_t_20, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_cur_scope->__pyx_v_tracked_limit_order->protocol_fee_amount, __pyx_t_24};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 9+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 798, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":797
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(current_timestamp,
 *                                                                     tracked_limit_order.client_order_id,
 */
          __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 797, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":794
 *                     # Remove from log tracking
 *                     await self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(tracked_limit_order.exchange_order_id)
 *                     if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 */
          goto __pyx_L38;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":808
 *                                                                     OrderType.LIMIT))
 *                     else:
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 */
        /*else*/ {
          __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 808, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_20 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_24))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_24);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_24, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_20, };
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 808, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          }
          __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 808, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 808, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_sell_order);
          __pyx_t_14 += 21;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_sell_order);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_The_limit_sell_order);
          __pyx_t_20 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 808, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_20);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_20);
          __pyx_t_20 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_orde);
          __pyx_t_14 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_orde);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_has_completed_according_to_orde);
          __pyx_t_20 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 808, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_24))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_24);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_24, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_20};
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 808, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":810
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(current_timestamp,
 *                                                                      tracked_limit_order.client_order_id,
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_9); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":811
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                              SellOrderCompletedEvent(current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                      tracked_limit_order.client_order_id,
 *                                                                      tracked_limit_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 811, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_20 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 811, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":813
 *                                              SellOrderCompletedEvent(current_timestamp,
 *                                                                      tracked_limit_order.client_order_id,
 *                                                                      tracked_limit_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_limit_order.quote_asset,
 *                                                                      tracked_limit_order.quote_asset,
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 813, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":814
 *                                                                      tracked_limit_order.client_order_id,
 *                                                                      tracked_limit_order.base_asset,
 *                                                                      tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_limit_order.quote_asset,
 *                                                                      tracked_limit_order.executed_amount_base,
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 814, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":815
 *                                                                      tracked_limit_order.base_asset,
 *                                                                      tracked_limit_order.quote_asset,
 *                                                                      tracked_limit_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_limit_order.executed_amount_base,
 *                                                                      tracked_limit_order.executed_amount_quote,
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":819
 *                                                                      tracked_limit_order.executed_amount_quote,
 *                                                                      tracked_limit_order.protocol_fee_amount,
 *                                                                      OrderType.LIMIT))             # <<<<<<<<<<<<<<
 *                 elif self._pre_emptive_soft_cancels and (
 *                         tracked_limit_order.is_coordinated and
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_24))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_24);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_24, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[10] = {__pyx_t_4, __pyx_t_20, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id, __pyx_t_10, __pyx_t_18, __pyx_t_2, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_base, __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.executed_amount_quote, __pyx_cur_scope->__pyx_v_tracked_limit_order->protocol_fee_amount, __pyx_t_21};
            __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_7, 9+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 811, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":810
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 *                                            f"has completed according to order status API.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(current_timestamp,
 *                                                                      tracked_limit_order.client_order_id,
 */
          __pyx_t_24 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_16, __pyx_t_9); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 810, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        }
        __pyx_L38:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":790
 *                                                 OrderType.LIMIT)
 *                     )
 *                 elif not previous_is_done and tracked_limit_order.is_done:             # <<<<<<<<<<<<<<
 *                     self.c_expire_order(tracked_limit_order.client_order_id, 60)
 *                     # Remove from log tracking
 */
        goto __pyx_L25;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":820
 *                                                                      tracked_limit_order.protocol_fee_amount,
 *                                                                      OrderType.LIMIT))
 *                 elif self._pre_emptive_soft_cancels and (             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.is_coordinated and
 *                         not tracked_limit_order.is_cancelled and
 */
      __pyx_t_13 = (__pyx_cur_scope->__pyx_v_self->_pre_emptive_soft_cancels != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_12 = __pyx_t_13;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":821
 *                                                                      OrderType.LIMIT))
 *                 elif self._pre_emptive_soft_cancels and (
 *                         tracked_limit_order.is_coordinated and             # <<<<<<<<<<<<<<
 *                         not tracked_limit_order.is_cancelled and
 *                         not tracked_limit_order.is_expired and
 */
      __pyx_t_13 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->is_coordinated != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_12 = __pyx_t_13;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":822
 *                 elif self._pre_emptive_soft_cancels and (
 *                         tracked_limit_order.is_coordinated and
 *                         not tracked_limit_order.is_cancelled and             # <<<<<<<<<<<<<<
 *                         not tracked_limit_order.is_expired and
 *                         not tracked_limit_order.is_failure and
 */
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_24); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_5 = ((!__pyx_t_13) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_12 = __pyx_t_5;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":823
 *                         tracked_limit_order.is_coordinated and
 *                         not tracked_limit_order.is_cancelled and
 *                         not tracked_limit_order.is_expired and             # <<<<<<<<<<<<<<
 *                         not tracked_limit_order.is_failure and
 *                         not tracked_limit_order.is_done and
 */
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_expired); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_24); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_13 = ((!__pyx_t_5) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_12 = __pyx_t_13;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":824
 *                         not tracked_limit_order.is_cancelled and
 *                         not tracked_limit_order.is_expired and
 *                         not tracked_limit_order.is_failure and             # <<<<<<<<<<<<<<
 *                         not tracked_limit_order.is_done and
 *                         tracked_limit_order.expires <= current_timestamp + self.PRE_EMPTIVE_SOFT_CANCEL_TIME):
 */
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_failure); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_24); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_5 = ((!__pyx_t_13) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_12 = __pyx_t_5;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":825
 *                         not tracked_limit_order.is_expired and
 *                         not tracked_limit_order.is_failure and
 *                         not tracked_limit_order.is_done and             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.expires <= current_timestamp + self.PRE_EMPTIVE_SOFT_CANCEL_TIME):
 * 
 */
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_limit_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_24); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_13 = ((!__pyx_t_5) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_12 = __pyx_t_13;
        goto __pyx_L39_bool_binop_done;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":826
 *                         not tracked_limit_order.is_failure and
 *                         not tracked_limit_order.is_done and
 *                         tracked_limit_order.expires <= current_timestamp + self.PRE_EMPTIVE_SOFT_CANCEL_TIME):             # <<<<<<<<<<<<<<
 * 
 *                     if tracked_limit_order.trade_type is TradeType.BUY:
 */
      __pyx_t_24 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_tracked_limit_order->expires); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_9 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_21 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_2 = PyNumber_Add(__pyx_t_9, __pyx_t_21); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = PyObject_RichCompare(__pyx_t_24, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_21); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_21); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_12 = __pyx_t_13;
      __pyx_L39_bool_binop_done:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":820
 *                                                                      tracked_limit_order.protocol_fee_amount,
 *                                                                      OrderType.LIMIT))
 *                 elif self._pre_emptive_soft_cancels and (             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.is_coordinated and
 *                         not tracked_limit_order.is_cancelled and
 */
      if (__pyx_t_12) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":828
 *                         tracked_limit_order.expires <= current_timestamp + self.PRE_EMPTIVE_SOFT_CANCEL_TIME):
 * 
 *                     if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"will be pre-emptively soft cancelled.")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_BUY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __pyx_t_12 = (__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.trade_type == __pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_13 = (__pyx_t_12 != 0);
        if (__pyx_t_13) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":829
 * 
 *                     if tracked_limit_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                            f"will be pre-emptively soft cancelled.")
 *                     else:
 */
          __pyx_t_24 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_9 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_24))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_24);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_24, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_9, };
            __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 829, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          }
          __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_info); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = PyTuple_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_buy_order);
          __pyx_t_14 += 20;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_buy_order);
          PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_kp_u_The_limit_buy_order);
          __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_will_be_pre_emptively_soft_canc);
          __pyx_t_14 += 38;
          __Pyx_GIVEREF(__pyx_kp_u_will_be_pre_emptively_soft_canc);
          PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_kp_u_will_be_pre_emptively_soft_canc);
          __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_21, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 829, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_24))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_24);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_24, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_9};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":828
 *                         tracked_limit_order.expires <= current_timestamp + self.PRE_EMPTIVE_SOFT_CANCEL_TIME):
 * 
 *                     if tracked_limit_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit buy order {tracked_limit_order.client_order_id} "
 *                                            f"will be pre-emptively soft cancelled.")
 */
          goto __pyx_L46;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":832
 *                                            f"will be pre-emptively soft cancelled.")
 *                     else:
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "             # <<<<<<<<<<<<<<
 *                                            f"will be pre-emptively soft cancelled.")
 *                     self.c_cancel("", tracked_limit_order.client_order_id)
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_21 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_21, };
            __pyx_t_24 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 832, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_24);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = PyTuple_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_limit_sell_order);
          __pyx_t_14 += 21;
          __Pyx_GIVEREF(__pyx_kp_u_The_limit_sell_order);
          PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_kp_u_The_limit_sell_order);
          __pyx_t_21 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_21);
          PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_INCREF(__pyx_kp_u_will_be_pre_emptively_soft_canc);
          __pyx_t_14 += 38;
          __Pyx_GIVEREF(__pyx_kp_u_will_be_pre_emptively_soft_canc);
          PyTuple_SET_ITEM(__pyx_t_24, 2, __pyx_kp_u_will_be_pre_emptively_soft_canc);
          __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_24, 3, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 832, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_24)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_24);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_24, __pyx_t_21};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_L46:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":834
 *                         self.logger().info(f"The limit sell order {tracked_limit_order.client_order_id} "
 *                                            f"will be pre-emptively soft cancelled.")
 *                     self.c_cancel("", tracked_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 */
        __pyx_t_2 = __pyx_cur_scope->__pyx_v_tracked_limit_order->__pyx_base.client_order_id;
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_kp_u__13, ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":820
 *                                                                      tracked_limit_order.protocol_fee_amount,
 *                                                                      OrderType.LIMIT))
 *                 elif self._pre_emptive_soft_cancels and (             # <<<<<<<<<<<<<<
 *                         tracked_limit_order.is_coordinated and
 *                         not tracked_limit_order.is_cancelled and
 */
      }
      __pyx_L25:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":676
 *             # Every limit order update happens on this tick, so use the current timestamp
 *             current_timestamp = self._current_timestamp
 *             for order_update, tracked_limit_order in zip(order_updates, tracked_limit_orders):             # <<<<<<<<<<<<<<
 *                 if order_update is None:
 *                     # 404 handling
 */
      __pyx_L7_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":671
 *             BambooRelayInFlightOrder tracked_limit_order
 * 
 *         if len(self._in_flight_limit_orders) > 0:             # <<<<<<<<<<<<<<
 *             tracked_limit_orders = list(self._in_flight_limit_orders.values())
 *             order_updates = await self._get_order_updates(tracked_limit_orders)
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":835
 *                                            f"will be pre-emptively soft cancelled.")
 *                     self.c_cancel("", tracked_limit_order.client_order_id)
 *         self._last_update_limit_order_timestamp = current_timestamp             # <<<<<<<<<<<<<<
 * 
 *     async def _update_market_order_status(self):
 */
  __pyx_cur_scope->__pyx_v_self->_last_update_limit_order_timestamp = __pyx_cur_scope->__pyx_v_current_timestamp;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":655
 *                 return
 * 
 *     async def _update_limit_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_AddTraceback("_update_limit_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_42generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":837
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 *     async def _update_market_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status = {"_update_market_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_market_order_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_market_order_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_market_order_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_40_update_market_order_status(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_40_update_market_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_market_order_status", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 837, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_42generator8, __pyx_codeobj__14, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_market_order_status, __pyx_n_s_BambooRelayExchange__update_mark, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._update_market_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_42generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int64_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_market_order_status", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 837, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":839
 *     async def _update_market_order_status(self):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 * 
 *         if current_timestamp - self._last_update_market_order_timestamp <= self.UPDATE_MARKET_ORDERS_INTERVAL:
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":841
 *             double current_timestamp = self._current_timestamp
 * 
 *         if current_timestamp - self._last_update_market_order_timestamp <= self.UPDATE_MARKET_ORDERS_INTERVAL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_current_timestamp - __pyx_cur_scope->__pyx_v_self->_last_update_market_order_timestamp)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":842
 * 
 *         if current_timestamp - self._last_update_market_order_timestamp <= self.UPDATE_MARKET_ORDERS_INTERVAL:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if len(self._in_flight_market_orders) > 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":841
 *             double current_timestamp = self._current_timestamp
 * 
 *         if current_timestamp - self._last_update_market_order_timestamp <= self.UPDATE_MARKET_ORDERS_INTERVAL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":844
 *             return
 * 
 *         if len(self._in_flight_market_orders) > 0:             # <<<<<<<<<<<<<<
 *             tracked_market_orders = list(self._in_flight_market_orders.values())
 *             for tracked_market_order in tracked_market_orders:
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->_in_flight_market_orders;
  __Pyx_INCREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 844, __pyx_L1_error)
  }
  __pyx_t_6 = PyDict_Size(__pyx_t_4); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = ((__pyx_t_6 > 0) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":845
 * 
 *         if len(self._in_flight_market_orders) > 0:
 *             tracked_market_orders = list(self._in_flight_market_orders.values())             # <<<<<<<<<<<<<<
 *             for tracked_market_order in tracked_market_orders:
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_market_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 845, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_v_self->_in_flight_market_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_tracked_market_orders = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":846
 *         if len(self._in_flight_market_orders) > 0:
 *             tracked_market_orders = list(self._in_flight_market_orders.values())
 *             for tracked_market_order in tracked_market_orders:             # <<<<<<<<<<<<<<
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)
 *                 # Receipt exists and has been mined
 */
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_tracked_market_orders; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 846, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_market_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":847
 *             tracked_market_orders = list(self._in_flight_market_orders.values())
 *             for tracked_market_order in tracked_market_orders:
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)             # <<<<<<<<<<<<<<
 *                 # Receipt exists and has been mined
 *                 if receipt is None or receipt["blockNumber"] is None:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_tx_hash_receipt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_9 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_receipt);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_receipt, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":849
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)
 *                 # Receipt exists and has been mined
 *                 if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                     continue
 *                 if receipt["status"] == 0:
 */
      __pyx_t_10 = (__pyx_cur_scope->__pyx_v_receipt == Py_None);
      __pyx_t_11 = (__pyx_t_10 != 0);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_5 = __pyx_t_11;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = (__pyx_t_4 == Py_None);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = (__pyx_t_11 != 0);
      __pyx_t_5 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":850
 *                 # Receipt exists and has been mined
 *                 if receipt is None or receipt["blockNumber"] is None:
 *                     continue             # <<<<<<<<<<<<<<
 *                 if receipt["status"] == 0:
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"
 */
        goto __pyx_L6_continue;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":849
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)
 *                 # Receipt exists and has been mined
 *                 if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                     continue
 *                 if receipt["status"] == 0:
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":851
 *                 if receipt is None or receipt["blockNumber"] is None:
 *                     continue
 *                 if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 */
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":852
 *                     continue
 *                 if receipt["status"] == 0:
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"             # <<<<<<<<<<<<<<
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 */
        __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_market_order);
        __pyx_t_12 += 17;
        __Pyx_GIVEREF(__pyx_kp_u_The_market_order);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_The_market_order);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_13;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_has_failed_according_to_transact);
        __pyx_t_12 += 41;
        __Pyx_GIVEREF(__pyx_kp_u_has_failed_according_to_transact);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_has_failed_according_to_transact);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":853
 *                 if receipt["status"] == 0:
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")             # <<<<<<<<<<<<<<
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 853, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 853, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__15);
        __pyx_t_12 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__15);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__15);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":852
 *                     continue
 *                 if receipt["status"] == 0:
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"             # <<<<<<<<<<<<<<
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 */
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_err_msg);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_err_msg, ((PyObject*)__pyx_t_4));
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":854
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_7, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_network); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_err_msg);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_err_msg);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_err_msg);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 854, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_app_warning_msg, __pyx_cur_scope->__pyx_v_err_msg) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 854, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":856
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 856, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_8); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":857
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                 tracked_market_order.client_order_id,
 *                                                 OrderType.MARKET)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 857, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 857, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":858
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                 OrderType.MARKET)
 *                     )
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":859
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,
 *                                                 OrderType.MARKET)             # <<<<<<<<<<<<<<
 *                     )
 *                 elif receipt["status"] == 1:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 859, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 859, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_15, __pyx_t_4, __pyx_t_2, __pyx_t_16};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 3+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 857, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":855
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,
 */
        __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":851
 *                 if receipt is None or receipt["blockNumber"] is None:
 *                     continue
 *                 if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                     err_msg = (f"The market order {tracked_market_order.client_order_id}"
 *                                f"has failed according to transaction hash {tracked_market_order.tx_hash}.")
 */
        goto __pyx_L11;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":861
 *                                                 OrderType.MARKET)
 *                     )
 *                 elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                     gas_used = float(receipt.get("gasUsed", 0.0))
 *                     self.c_trigger_event(
 */
      __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":862
 *                     )
 *                 elif receipt["status"] == 1:
 *                     gas_used = float(receipt.get("gasUsed", 0.0))             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 862, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 862, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_AsDouble(__pyx_t_7); if (unlikely(__pyx_t_1 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_cur_scope->__pyx_v_gas_used = __pyx_t_1;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":864
 *                     gas_used = float(receipt.get("gasUsed", 0.0))
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         OrderFilledEvent(
 *                             self._current_timestamp,
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":865
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                             self._current_timestamp,
 *                             tracked_market_order.client_order_id,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 865, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":866
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(
 *                             self._current_timestamp,             # <<<<<<<<<<<<<<
 *                             tracked_market_order.client_order_id,
 *                             tracked_market_order.trading_pair,
 */
        __pyx_t_16 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":867
 *                         OrderFilledEvent(
 *                             self._current_timestamp,
 *                             tracked_market_order.client_order_id,             # <<<<<<<<<<<<<<
 *                             tracked_market_order.trading_pair,
 *                             tracked_market_order.trade_type,
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":868
 *                             self._current_timestamp,
 *                             tracked_market_order.client_order_id,
 *                             tracked_market_order.trading_pair,             # <<<<<<<<<<<<<<
 *                             tracked_market_order.trade_type,
 *                             OrderType.MARKET,
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":869
 *                             tracked_market_order.client_order_id,
 *                             tracked_market_order.trading_pair,
 *                             tracked_market_order.trade_type,             # <<<<<<<<<<<<<<
 *                             OrderType.MARKET,
 *                             tracked_market_order.price,
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":870
 *                             tracked_market_order.trading_pair,
 *                             tracked_market_order.trade_type,
 *                             OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                             tracked_market_order.price,
 *                             tracked_market_order.amount,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":871
 *                             tracked_market_order.trade_type,
 *                             OrderType.MARKET,
 *                             tracked_market_order.price,             # <<<<<<<<<<<<<<
 *                             tracked_market_order.amount,
 *                             TradeFee(0.0, [("ETH", gas_used), ("ETH", tracked_market_order.protocol_fee_amount)]),
 */
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_price); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 871, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":872
 *                             OrderType.MARKET,
 *                             tracked_market_order.price,
 *                             tracked_market_order.amount,             # <<<<<<<<<<<<<<
 *                             TradeFee(0.0, [("ETH", gas_used), ("ETH", tracked_market_order.protocol_fee_amount)]),
 *                             tracked_market_order.tx_hash  # Use tx hash for market order validation
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 872, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":873
 *                             tracked_market_order.price,
 *                             tracked_market_order.amount,
 *                             TradeFee(0.0, [("ETH", gas_used), ("ETH", tracked_market_order.protocol_fee_amount)]),             # <<<<<<<<<<<<<<
 *                             tracked_market_order.tx_hash  # Use tx hash for market order validation
 *                         )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_22 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_gas_used); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_INCREF(__pyx_n_u_ETH);
        __Pyx_GIVEREF(__pyx_n_u_ETH);
        PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_u_ETH);
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_22);
        __pyx_t_22 = 0;
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_protocol_fee_amount); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_24 = PyTuple_New(2); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __Pyx_INCREF(__pyx_n_u_ETH);
        __Pyx_GIVEREF(__pyx_n_u_ETH);
        PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_n_u_ETH);
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_22);
        __pyx_t_22 = 0;
        __pyx_t_22 = PyList_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 873, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_GIVEREF(__pyx_t_23);
        PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_23);
        __Pyx_GIVEREF(__pyx_t_24);
        PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_24);
        __pyx_t_23 = 0;
        __pyx_t_24 = 0;
        __pyx_t_24 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
          __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_21);
          if (likely(__pyx_t_24)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
            __Pyx_INCREF(__pyx_t_24);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_21, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_24, __pyx_float_0_0, __pyx_t_22};
          __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 873, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":874
 *                             tracked_market_order.amount,
 *                             TradeFee(0.0, [("ETH", gas_used), ("ETH", tracked_market_order.protocol_fee_amount)]),
 *                             tracked_market_order.tx_hash  # Use tx hash for market order validation             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_22 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_22)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_22);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[10] = {__pyx_t_22, __pyx_t_16, __pyx_t_2, __pyx_t_4, __pyx_t_15, __pyx_t_18, __pyx_t_17, __pyx_t_19, __pyx_t_20, __pyx_t_21};
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 865, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":863
 *                 elif receipt["status"] == 1:
 *                     gas_used = float(receipt.get("gasUsed", 0.0))
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                         OrderFilledEvent(
 */
        __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":877
 *                         )
 *                     )
 *                     if tracked_market_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The market buy order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 877, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 877, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_BUY); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 877, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_5 = (__pyx_t_8 == __pyx_t_21);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __pyx_t_10 = (__pyx_t_5 != 0);
        if (__pyx_t_10) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":878
 *                     )
 *                     if tracked_market_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order "             # <<<<<<<<<<<<<<
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_20 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_20, };
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 878, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_12 = 0;
          __pyx_t_13 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_market_buy_order);
          __pyx_t_12 += 21;
          __Pyx_GIVEREF(__pyx_kp_u_The_market_buy_order);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_The_market_buy_order);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":879
 *                     if tracked_market_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "             # <<<<<<<<<<<<<<
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 */
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_20, __pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) : __pyx_t_13;
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_19);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_19);
          __pyx_t_19 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_tran);
          __pyx_t_12 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_tran);
          PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_has_completed_according_to_tran);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":880
 *                         self.logger().info(f"The market buy order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 */
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 880, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_t_19, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 880, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_13;
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_20);
          PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_20);
          __pyx_t_20 = 0;
          __Pyx_INCREF(__pyx_kp_u__15);
          __pyx_t_12 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__15);
          PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u__15);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":878
 *                     )
 *                     if tracked_market_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order "             # <<<<<<<<<<<<<<
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 */
          __pyx_t_20 = __Pyx_PyUnicode_Join(__pyx_t_8, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 878, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_20};
            __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 878, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":881
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_market_order.client_order_id,
 */
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 881, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_21); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":882
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                              BuyOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.client_order_id,
 *                                                                     tracked_market_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_20 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":883
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_market_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.base_asset,
 *                                                                     tracked_market_order.quote_asset,
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":884
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_market_order.client_order_id,
 *                                                                     tracked_market_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.quote_asset,
 */
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":885
 *                                                                     tracked_market_order.client_order_id,
 *                                                                     tracked_market_order.base_asset,
 *                                                                     tracked_market_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.amount,
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 885, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":886
 *                                                                     tracked_market_order.base_asset,
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.amount,
 *                                                                     tracked_market_order.executed_amount_quote,
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 886, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":887
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.amount,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.executed_amount_quote,
 *                                                                     tracked_market_order.protocol_fee_amount,
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":888
 *                                                                     tracked_market_order.quote_asset,
 *                                                                     tracked_market_order.amount,
 *                                                                     tracked_market_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                                                     tracked_market_order.protocol_fee_amount,
 *                                                                     OrderType.MARKET))
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":889
 *                                                                     tracked_market_order.amount,
 *                                                                     tracked_market_order.executed_amount_quote,
 *                                                                     tracked_market_order.protocol_fee_amount,             # <<<<<<<<<<<<<<
 *                                                                     OrderType.MARKET))
 *                     else:
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_protocol_fee_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":890
 *                                                                     tracked_market_order.executed_amount_quote,
 *                                                                     tracked_market_order.protocol_fee_amount,
 *                                                                     OrderType.MARKET))             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().info(f"The market sell order "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 890, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 890, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[10] = {__pyx_t_16, __pyx_t_20, __pyx_t_8, __pyx_t_19, __pyx_t_17, __pyx_t_18, __pyx_t_15, __pyx_t_4, __pyx_t_2, __pyx_t_22};
            __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 882, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":881
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_market_order.client_order_id,
 */
          __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_21); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 881, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":877
 *                         )
 *                     )
 *                     if tracked_market_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The market buy order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 */
          goto __pyx_L12;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":892
 *                                                                     OrderType.MARKET))
 *                     else:
 *                         self.logger().info(f"The market sell order "             # <<<<<<<<<<<<<<
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 */
        /*else*/ {
          __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 892, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __pyx_t_2 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_22))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_22);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_22, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_2, };
            __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_22, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 892, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          }
          __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_info); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 892, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = PyTuple_New(5); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 892, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_12 = 0;
          __pyx_t_13 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_market_sell_order);
          __pyx_t_12 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_The_market_sell_order);
          PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_kp_u_The_market_sell_order);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":893
 *                     else:
 *                         self.logger().info(f"The market sell order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "             # <<<<<<<<<<<<<<
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 893, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_tran);
          __pyx_t_12 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_tran);
          PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_kp_u_has_completed_according_to_tran);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":894
 *                         self.logger().info(f"The market sell order "
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_13;
          __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_21, 3, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u__15);
          __pyx_t_12 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__15);
          PyTuple_SET_ITEM(__pyx_t_21, 4, __pyx_kp_u__15);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":892
 *                                                                     OrderType.MARKET))
 *                     else:
 *                         self.logger().info(f"The market sell order "             # <<<<<<<<<<<<<<
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 */
          __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_21, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_22))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_22);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_22, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_2};
            __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_22, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 892, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":895
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_market_order.client_order_id,
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":896
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                              SellOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.client_order_id,
 *                                                                      tracked_market_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 896, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __pyx_t_2 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 896, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":897
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_market_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.base_asset,
 *                                                                      tracked_market_order.quote_asset,
 */
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 897, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":898
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_market_order.client_order_id,
 *                                                                      tracked_market_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.quote_asset,
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 898, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":899
 *                                                                      tracked_market_order.client_order_id,
 *                                                                      tracked_market_order.base_asset,
 *                                                                      tracked_market_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.amount,
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 899, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":900
 *                                                                      tracked_market_order.base_asset,
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.amount,
 *                                                                      tracked_market_order.executed_amount_quote,
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 900, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":901
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.amount,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.executed_amount_quote,
 *                                                                      tracked_market_order.protocol_fee_amount,
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 901, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":902
 *                                                                      tracked_market_order.quote_asset,
 *                                                                      tracked_market_order.amount,
 *                                                                      tracked_market_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                                                      tracked_market_order.protocol_fee_amount,
 *                                                                      OrderType.MARKET))
 */
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 902, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_19);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":903
 *                                                                      tracked_market_order.amount,
 *                                                                      tracked_market_order.executed_amount_quote,
 *                                                                      tracked_market_order.protocol_fee_amount,             # <<<<<<<<<<<<<<
 *                                                                      OrderType.MARKET))
 *                 else:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_protocol_fee_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":904
 *                                                                      tracked_market_order.executed_amount_quote,
 *                                                                      tracked_market_order.protocol_fee_amount,
 *                                                                      OrderType.MARKET))             # <<<<<<<<<<<<<<
 *                 else:
 *                     err_msg = (f"Unrecognized transaction status for market order "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 904, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 904, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_22);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_22, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[10] = {__pyx_t_20, __pyx_t_2, __pyx_t_21, __pyx_t_4, __pyx_t_15, __pyx_t_18, __pyx_t_17, __pyx_t_19, __pyx_t_8, __pyx_t_16};
            __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_22, __pyx_callargs+1-__pyx_t_9, 9+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 896, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":895
 *                                            f"{tracked_market_order.client_order_id} has completed according to "
 *                                            f"transaction hash {tracked_market_order.tx_hash}.")
 *                         self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_market_order.client_order_id,
 */
          __pyx_t_22 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        }
        __pyx_L12:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":861
 *                                                 OrderType.MARKET)
 *                     )
 *                 elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                     gas_used = float(receipt.get("gasUsed", 0.0))
 *                     self.c_trigger_event(
 */
        goto __pyx_L11;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":906
 *                                                                      OrderType.MARKET))
 *                 else:
 *                     err_msg = (f"Unrecognized transaction status for market order "             # <<<<<<<<<<<<<<
 *                                f"{tracked_market_order.client_order_id}. Check transaction hash "
 *                                f"{tracked_market_order.tx_hash} for more details.")
 */
      /*else*/ {
        __pyx_t_22 = PyTuple_New(5); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_12 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_Unrecognized_transaction_status);
        __pyx_t_12 += 49;
        __Pyx_GIVEREF(__pyx_kp_u_Unrecognized_transaction_status);
        PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_kp_u_Unrecognized_transaction_status);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":907
 *                 else:
 *                     err_msg = (f"Unrecognized transaction status for market order "
 *                                f"{tracked_market_order.client_order_id}. Check transaction hash "             # <<<<<<<<<<<<<<
 *                                f"{tracked_market_order.tx_hash} for more details.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_13;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_16);
        __pyx_t_16 = 0;
        __Pyx_INCREF(__pyx_kp_u_Check_transaction_hash);
        __pyx_t_12 += 25;
        __Pyx_GIVEREF(__pyx_kp_u_Check_transaction_hash);
        PyTuple_SET_ITEM(__pyx_t_22, 2, __pyx_kp_u_Check_transaction_hash);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":908
 *                     err_msg = (f"Unrecognized transaction status for market order "
 *                                f"{tracked_market_order.client_order_id}. Check transaction hash "
 *                                f"{tracked_market_order.tx_hash} for more details.")             # <<<<<<<<<<<<<<
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_16, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_13;
        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_22, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_for_more_details);
        __pyx_t_12 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_for_more_details);
        PyTuple_SET_ITEM(__pyx_t_22, 4, __pyx_kp_u_for_more_details);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":906
 *                                                                      OrderType.MARKET))
 *                 else:
 *                     err_msg = (f"Unrecognized transaction status for market order "             # <<<<<<<<<<<<<<
 *                                f"{tracked_market_order.client_order_id}. Check transaction hash "
 *                                f"{tracked_market_order.tx_hash} for more details.")
 */
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_22, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_err_msg);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_err_msg, ((PyObject*)__pyx_t_7));
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":909
 *                                f"{tracked_market_order.client_order_id}. Check transaction hash "
 *                                f"{tracked_market_order.tx_hash} for more details.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_16 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_22))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_22);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_22, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_16, };
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_22, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 909, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        }
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_network); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_err_msg);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_err_msg);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_cur_scope->__pyx_v_err_msg);
        __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_app_warning_msg, __pyx_cur_scope->__pyx_v_err_msg) < 0) __PYX_ERR(0, 909, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_t_7, __pyx_t_16); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 909, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":911
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_8); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":912
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                 tracked_market_order.client_order_id,
 *                                                 OrderType.MARKET)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":913
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                 OrderType.MARKET)
 *                     )
 */
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":914
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 tracked_market_order.client_order_id,
 *                                                 OrderType.MARKET)             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_19, __pyx_t_7, __pyx_t_22, __pyx_t_17};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_9, 3+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 912, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":910
 *                                f"{tracked_market_order.tx_hash} for more details.")
 *                     self.logger().network(err_msg, app_warning_msg=err_msg)
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,
 */
        __pyx_t_16 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 910, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __pyx_L11:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":917
 *                     )
 * 
 *                 self.c_stop_tracking_order(tracked_market_order.tx_hash)             # <<<<<<<<<<<<<<
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_market_order, __pyx_n_s_tx_hash); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_16))||((__pyx_t_16) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_16))) __PYX_ERR(0, 917, __pyx_L1_error)
      __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_t_16)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":846
 *         if len(self._in_flight_market_orders) > 0:
 *             tracked_market_orders = list(self._in_flight_market_orders.values())
 *             for tracked_market_order in tracked_market_orders:             # <<<<<<<<<<<<<<
 *                 receipt = self.get_tx_hash_receipt(tracked_market_order.tx_hash)
 *                 # Receipt exists and has been mined
 */
      __pyx_L6_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":844
 *             return
 * 
 *         if len(self._in_flight_market_orders) > 0:             # <<<<<<<<<<<<<<
 *             tracked_market_orders = list(self._in_flight_market_orders.values())
 *             for tracked_market_order in tracked_market_orders:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":918
 * 
 *                 self.c_stop_tracking_order(tracked_market_order.tx_hash)
 *         self._last_update_market_order_timestamp = current_timestamp             # <<<<<<<<<<<<<<
 * 
 *     async def _approval_tx_polling_loop(self):
 */
  __pyx_cur_scope->__pyx_v_self->_last_update_market_order_timestamp = __pyx_cur_scope->__pyx_v_current_timestamp;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":837
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 *     async def _update_market_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_AddTraceback("_update_market_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_45generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":920
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 *     async def _approval_tx_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop = {"_approval_tx_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_approval_tx_polling_loop (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_approval_tx_polling_loop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_approval_tx_polling_loop", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_43_approval_tx_polling_loop(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_43_approval_tx_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_approval_tx_polling_loop", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 920, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_45generator9, __pyx_codeobj__17, (PyObject *) __pyx_cur_scope, __pyx_n_s_approval_tx_polling_loop, __pyx_n_s_BambooRelayExchange__approval_tx, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._approval_tx_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_45generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_approval_tx_polling_loop", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L32_resume_from_await;
    case 2: goto __pyx_L37_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 920, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":921
 * 
 *     async def _approval_tx_polling_loop(self):
 *         while len(self._pending_approval_tx_hashes) > 0:             # <<<<<<<<<<<<<<
 *             try:
 *                 if len(self._pending_approval_tx_hashes) > 0:
 */
  while (1) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
    if (!__pyx_t_3) break;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":922
 *     async def _approval_tx_polling_loop(self):
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:             # <<<<<<<<<<<<<<
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 */
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        /*try:*/ {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":923
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 *                 if len(self._pending_approval_tx_hashes) > 0:             # <<<<<<<<<<<<<<
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:
 */
          __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes;
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 923, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
          if (__pyx_t_3) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":924
 *             try:
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):             # <<<<<<<<<<<<<<
 *                         try:
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */
            __pyx_t_1 = PySequence_List(__pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            for (;;) {
              if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 924, __pyx_L11_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tx_hash);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_1);
              __pyx_t_1 = 0;

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":925
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:             # <<<<<<<<<<<<<<
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *                             self._pending_approval_tx_hashes.remove(tx_hash)
 */
              {
                __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
                __Pyx_XGOTREF(__pyx_t_8);
                __Pyx_XGOTREF(__pyx_t_9);
                __Pyx_XGOTREF(__pyx_t_10);
                /*try:*/ {

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":926
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)             # <<<<<<<<<<<<<<
 *                             self._pending_approval_tx_hashes.remove(tx_hash)
 *                         except TransactionNotFound:
 */
                  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_w3, __pyx_n_s_eth); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 926, __pyx_L22_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_getTransactionReceipt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 926, __pyx_L22_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __pyx_t_11 = NULL;
                  __pyx_t_13 = 0;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
                    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
                    if (likely(__pyx_t_11)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                      __Pyx_INCREF(__pyx_t_11);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_12, function);
                      __pyx_t_13 = 1;
                    }
                  }
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_tx_hash};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L22_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  }
                  __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_receipt);
                  __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_receipt, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_1);
                  __pyx_t_1 = 0;

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":927
 *                         try:
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *                             self._pending_approval_tx_hashes.remove(tx_hash)             # <<<<<<<<<<<<<<
 *                         except TransactionNotFound:
 *                             pass
 */
                  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes, __pyx_n_s_remove); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 927, __pyx_L22_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __pyx_t_11 = NULL;
                  __pyx_t_13 = 0;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
                    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
                    if (likely(__pyx_t_11)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                      __Pyx_INCREF(__pyx_t_11);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_12, function);
                      __pyx_t_13 = 1;
                    }
                  }
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_tx_hash};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L22_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":925
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:             # <<<<<<<<<<<<<<
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *                             self._pending_approval_tx_hashes.remove(tx_hash)
 */
                }
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                goto __pyx_L29_try_end;
                __pyx_L22_error:;
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

                /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":928
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *                             self._pending_approval_tx_hashes.remove(tx_hash)
 *                         except TransactionNotFound:             # <<<<<<<<<<<<<<
 *                             pass
 *             except Exception:
 */
                __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_12, &__pyx_t_11);
                __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_TransactionNotFound); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 928, __pyx_L24_except_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_13 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_14);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_ErrRestore(__pyx_t_1, __pyx_t_12, __pyx_t_11);
                __pyx_t_1 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0;
                if (__pyx_t_13) {
                  __Pyx_ErrRestore(0,0,0);
                  goto __pyx_L23_exception_handled;
                }
                goto __pyx_L24_except_error;
                __pyx_L24_except_error:;

                /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":925
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:             # <<<<<<<<<<<<<<
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *                             self._pending_approval_tx_hashes.remove(tx_hash)
 */
                __Pyx_XGIVEREF(__pyx_t_8);
                __Pyx_XGIVEREF(__pyx_t_9);
                __Pyx_XGIVEREF(__pyx_t_10);
                __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
                goto __pyx_L11_error;
                __pyx_L23_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_8);
                __Pyx_XGIVEREF(__pyx_t_9);
                __Pyx_XGIVEREF(__pyx_t_10);
                __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
                __pyx_L29_try_end:;
              }

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":924
 *             try:
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):             # <<<<<<<<<<<<<<
 *                         try:
 *                             receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":923
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 *                 if len(self._pending_approval_tx_hashes) > 0:             # <<<<<<<<<<<<<<
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 *                         try:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":922
 *     async def _approval_tx_polling_loop(self):
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:             # <<<<<<<<<<<<<<
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 */
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L18_try_end;
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":930
 *                         except TransactionNotFound:
 *                             pass
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     "Unexpected error while fetching approval transactions.",
 */
        __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_13) {
          __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._approval_tx_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 930, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_12);

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":931
 *                             pass
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching approval transactions.",
 *                     exc_info=True,
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 931, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_15, };
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_network); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 931, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":933
 *                 self.logger().network(
 *                     "Unexpected error while fetching approval transactions.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg="Could not get token approval status. "
 *                                     "Check Ethereum wallet and network connection."
 */
          __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 933, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 933, __pyx_L13_except_error)
          if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_app_warning_msg, __pyx_kp_u_Could_not_get_token_approval_sta) < 0) __PYX_ERR(0, 933, __pyx_L13_except_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":931
 *                             pass
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching approval transactions.",
 *                     exc_info=True,
 */
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_tuple__18, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 931, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L12_exception_handled;
        }
        goto __pyx_L13_except_error;
        __pyx_L13_except_error:;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":922
 *     async def _approval_tx_polling_loop(self):
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:             # <<<<<<<<<<<<<<
 *                 if len(self._pending_approval_tx_hashes) > 0:
 *                     for tx_hash in list(self._pending_approval_tx_hashes):
 */
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
        goto __pyx_L9_error;
        __pyx_L12_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
        __pyx_L18_try_end:;
      }
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":938
 *                 )
 *             finally:
 *                 await asyncio.sleep(1.0)             # <<<<<<<<<<<<<<
 * 
 *     async def _api_request(self,
 */
    /*finally:*/ {
      /*normal exit:*/{
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 938, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_sleep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 938, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_float_1_0};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 938, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_12);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L32_resume_from_await:;
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 938, __pyx_L1_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 938, __pyx_L1_error)
          }
        }
        goto __pyx_L10;
      }
      __pyx_L9_error:;
      /*exception exit:*/{
        __Pyx_PyThreadState_assign
        __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
        {
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 938, __pyx_L36_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sleep); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 938, __pyx_L36_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_float_1_0};
            __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_18, 1+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 938, __pyx_L36_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_4);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_6);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_10;
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_13;
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_16;
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_17;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 2;
            return __pyx_r;
            __pyx_L37_resume_from_await:;
            __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_6);
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_13 = __pyx_cur_scope->__pyx_t_6;
            __pyx_t_16 = __pyx_cur_scope->__pyx_t_7;
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_8;
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 938, __pyx_L36_error)
          } else {
            PyObject* exc_type = __Pyx_PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
              else __PYX_ERR(0, 938, __pyx_L36_error)
            }
          }
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
        __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0;
        __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
        goto __pyx_L1_error;
        __pyx_L36_error:;
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0;
        goto __pyx_L1_error;
      }
      __pyx_L10:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":920
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 *     async def _approval_tx_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("_approval_tx_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_48generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request = {"_api_request", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_http_method = 0;
  PyObject *__pyx_v_url = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_headers = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_api_request (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_http_method,&__pyx_n_s_url,&__pyx_n_s_data,&__pyx_n_s_headers,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_http_method,&__pyx_n_s_url,&__pyx_n_s_data,&__pyx_n_s_headers,0};
    #endif
    PyObject* values[4] = {0,0,0,0};

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":943
 *                            http_method: str,
 *                            url: str,
 *                            data: Optional[Dict[str, Any]] = None,             # <<<<<<<<<<<<<<
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:
 */
    values[2] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":944
 *                            url: str,
 *                            data: Optional[Dict[str, Any]] = None,
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,
 */
    values[3] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_http_method)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_url)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_api_request", 0, 2, 4, 1); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_headers);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_api_request") < 0)) __PYX_ERR(0, 940, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_http_method = ((PyObject*)values[0]);
    __pyx_v_url = ((PyObject*)values[1]);
    __pyx_v_data = values[2];
    __pyx_v_headers = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_api_request", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 940, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_http_method), (&PyUnicode_Type), 1, "http_method", 1))) __PYX_ERR(0, 941, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_url), (&PyUnicode_Type), 1, "url", 1))) __PYX_ERR(0, 942, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_46_api_request(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_http_method, __pyx_v_url, __pyx_v_data, __pyx_v_headers);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_46_api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_url, PyObject *__pyx_v_data, PyObject *__pyx_v_headers) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_api_request", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 940, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_http_method = __pyx_v_http_method;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
  __pyx_cur_scope->__pyx_v_url = __pyx_v_url;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_url);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_url);
  __pyx_cur_scope->__pyx_v_data = __pyx_v_data;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_data);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_data);
  __pyx_cur_scope->__pyx_v_headers = __pyx_v_headers;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_headers);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_headers);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_48generator10, __pyx_codeobj__19, (PyObject *) __pyx_cur_scope, __pyx_n_s_api_request, __pyx_n_s_BambooRelayExchange__api_request, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_48generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_UCS4 __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_api_request", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    case 2: goto __pyx_L16_resume_from_await;
    case 3: goto __pyx_L33_resume_from_await;
    case 4: goto __pyx_L37_resume_from_await;
    case 5: goto __pyx_L41_resume_from_await;
    case 6: goto __pyx_L42_resume_from_await;
    case 7: goto __pyx_L43_resume_from_await;
    case 8: goto __pyx_L48_resume_from_await;
    case 9: goto __pyx_L49_resume_from_await;
    case 10: goto __pyx_L50_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 940, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":945
 *                            data: Optional[Dict[str, Any]] = None,
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:             # <<<<<<<<<<<<<<
 *             async with client.request(http_method,
 *                                       url=url,
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_aiohttp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ClientSession); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_2, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 945, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_aexit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_aenter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __Pyx_XGIVEREF(__pyx_t_5);
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L5_resume_from_await:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_t_5);
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 945, __pyx_L4_error)
      __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
    } else {
      __pyx_t_3 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 945, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_v_client = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":946
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,
 */
          /*with:*/ {
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_client, __pyx_n_s_request); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_http_method);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":947
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,
 *                                       url=url,             # <<<<<<<<<<<<<<
 *                                       timeout=self.API_CALL_TIMEOUT,
 *                                       json=data,
 */
            __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_url, __pyx_cur_scope->__pyx_v_url) < 0) __PYX_ERR(0, 947, __pyx_L9_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":948
 *             async with client.request(http_method,
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,             # <<<<<<<<<<<<<<
 *                                       json=data,
 *                                       headers=headers) as response:
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_API_CALL_TIMEOUT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 948, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_timeout, __pyx_t_6) < 0) __PYX_ERR(0, 947, __pyx_L9_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":949
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,
 *                                       json=data,             # <<<<<<<<<<<<<<
 *                                       headers=headers) as response:
 *                 try:
 */
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_json, __pyx_cur_scope->__pyx_v_data) < 0) __PYX_ERR(0, 947, __pyx_L9_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":950
 *                                       timeout=self.API_CALL_TIMEOUT,
 *                                       json=data,
 *                                       headers=headers) as response:             # <<<<<<<<<<<<<<
 *                 try:
 *                     if response.status == 201:
 */
            if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_headers, __pyx_cur_scope->__pyx_v_headers) < 0) __PYX_ERR(0, 947, __pyx_L9_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":946
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,
 */
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 946, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_aexit); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 946, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_aenter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L15_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = NULL;
            __pyx_t_4 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_4 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_2, };
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_5);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
              __Pyx_XGIVEREF(__pyx_t_6);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
              __Pyx_XGIVEREF(__pyx_t_7);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
              __Pyx_XGIVEREF(__pyx_t_8);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
              __Pyx_XGIVEREF(__pyx_t_9);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_9;
              __Pyx_XGIVEREF(__pyx_t_10);
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_10;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 2;
              return __pyx_r;
              __pyx_L16_resume_from_await:;
              __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_5);
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_6);
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_7);
              __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_8);
              __pyx_t_9 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_9);
              __pyx_t_10 = __pyx_cur_scope->__pyx_t_5;
              __pyx_cur_scope->__pyx_t_5 = 0;
              __Pyx_XGOTREF(__pyx_t_10);
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 946, __pyx_L15_error)
              __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
            } else {
              __pyx_t_3 = NULL;
              if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 946, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            __pyx_t_1 = __pyx_t_3;
            __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            /*try:*/ {
              {
                __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_11);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_13);
                /*try:*/ {
                  __Pyx_GIVEREF(__pyx_t_1);
                  __pyx_cur_scope->__pyx_v_response = __pyx_t_1;
                  __pyx_t_1 = 0;

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":951
 *                                       json=data,
 *                                       headers=headers) as response:
 *                 try:             # <<<<<<<<<<<<<<
 *                     if response.status == 201:
 *                         return response
 */
                  {
                    __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
                    __Pyx_XGOTREF(__pyx_t_14);
                    __Pyx_XGOTREF(__pyx_t_15);
                    __Pyx_XGOTREF(__pyx_t_16);
                    /*try:*/ {

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":952
 *                                       headers=headers) as response:
 *                 try:
 *                     if response.status == 201:             # <<<<<<<<<<<<<<
 *                         return response
 *                     elif response.status == 200:
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L26_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_201, 0xC9, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 952, __pyx_L26_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 952, __pyx_L26_error)
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      if (__pyx_t_17) {

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":953
 *                 try:
 *                     if response.status == 201:
 *                         return response             # <<<<<<<<<<<<<<
 *                     elif response.status == 200:
 *                         response_json = await response.json()
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_response);
                        goto __pyx_L30_try_return;

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":952
 *                                       headers=headers) as response:
 *                 try:
 *                     if response.status == 201:             # <<<<<<<<<<<<<<
 *                         return response
 *                     elif response.status == 200:
 */
                      }

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":954
 *                     if response.status == 201:
 *                         return response
 *                     elif response.status == 200:             # <<<<<<<<<<<<<<
 *                         response_json = await response.json()
 *                         return response_json
 */
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 954, __pyx_L26_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_6, __pyx_int_200, 0xC8, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L26_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 954, __pyx_L26_error)
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (likely(__pyx_t_17)) {

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":955
 *                         return response
 *                     elif response.status == 200:
 *                         response_json = await response.json()             # <<<<<<<<<<<<<<
 *                         return response_json
 *                     else:
 */
                        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 955, __pyx_L26_error)
                        __Pyx_GOTREF(__pyx_t_6);
                        __pyx_t_3 = NULL;
                        __pyx_t_4 = 0;
                        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_6, function);
                            __pyx_t_4 = 1;
                          }
                        }
                        {
                          PyObject *__pyx_callargs[1] = {__pyx_t_3, };
                          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L26_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                        }
                        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        __Pyx_XGOTREF(__pyx_r);
                        if (likely(__pyx_r)) {
                          __Pyx_XGIVEREF(__pyx_t_5);
                          __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
                          __Pyx_XGIVEREF(__pyx_t_7);
                          __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
                          __Pyx_XGIVEREF(__pyx_t_8);
                          __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
                          __Pyx_XGIVEREF(__pyx_t_9);
                          __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
                          __Pyx_XGIVEREF(__pyx_t_10);
                          __pyx_cur_scope->__pyx_t_4 = __pyx_t_10;
                          __Pyx_XGIVEREF(__pyx_t_11);
                          __pyx_cur_scope->__pyx_t_5 = __pyx_t_11;
                          __Pyx_XGIVEREF(__pyx_t_12);
                          __pyx_cur_scope->__pyx_t_6 = __pyx_t_12;
                          __Pyx_XGIVEREF(__pyx_t_13);
                          __pyx_cur_scope->__pyx_t_7 = __pyx_t_13;
                          __Pyx_XGIVEREF(__pyx_t_14);
                          __pyx_cur_scope->__pyx_t_8 = __pyx_t_14;
                          __Pyx_XGIVEREF(__pyx_t_15);
                          __pyx_cur_scope->__pyx_t_9 = __pyx_t_15;
                          __Pyx_XGIVEREF(__pyx_t_16);
                          __pyx_cur_scope->__pyx_t_10 = __pyx_t_16;
                          __Pyx_XGIVEREF(__pyx_r);
                          __Pyx_RefNannyFinishContext();
                          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                          /* return from generator, awaiting value */
                          __pyx_generator->resume_label = 3;
                          return __pyx_r;
                          __pyx_L33_resume_from_await:;
                          __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
                          __pyx_cur_scope->__pyx_t_0 = 0;
                          __Pyx_XGOTREF(__pyx_t_5);
                          __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
                          __pyx_cur_scope->__pyx_t_1 = 0;
                          __Pyx_XGOTREF(__pyx_t_7);
                          __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
                          __pyx_cur_scope->__pyx_t_2 = 0;
                          __Pyx_XGOTREF(__pyx_t_8);
                          __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
                          __pyx_cur_scope->__pyx_t_3 = 0;
                          __Pyx_XGOTREF(__pyx_t_9);
                          __pyx_t_10 = __pyx_cur_scope->__pyx_t_4;
                          __pyx_cur_scope->__pyx_t_4 = 0;
                          __Pyx_XGOTREF(__pyx_t_10);
                          __pyx_t_11 = __pyx_cur_scope->__pyx_t_5;
                          __pyx_cur_scope->__pyx_t_5 = 0;
                          __Pyx_XGOTREF(__pyx_t_11);
                          __pyx_t_12 = __pyx_cur_scope->__pyx_t_6;
                          __pyx_cur_scope->__pyx_t_6 = 0;
                          __Pyx_XGOTREF(__pyx_t_12);
                          __pyx_t_13 = __pyx_cur_scope->__pyx_t_7;
                          __pyx_cur_scope->__pyx_t_7 = 0;
                          __Pyx_XGOTREF(__pyx_t_13);
                          __pyx_t_14 = __pyx_cur_scope->__pyx_t_8;
                          __pyx_cur_scope->__pyx_t_8 = 0;
                          __Pyx_XGOTREF(__pyx_t_14);
                          __pyx_t_15 = __pyx_cur_scope->__pyx_t_9;
                          __pyx_cur_scope->__pyx_t_9 = 0;
                          __Pyx_XGOTREF(__pyx_t_15);
                          __pyx_t_16 = __pyx_cur_scope->__pyx_t_10;
                          __pyx_cur_scope->__pyx_t_10 = 0;
                          __Pyx_XGOTREF(__pyx_t_16);
                          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 955, __pyx_L26_error)
                          __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
                        } else {
                          __pyx_t_1 = NULL;
                          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 955, __pyx_L26_error)
                          __Pyx_GOTREF(__pyx_t_1);
                        }
                        __Pyx_GIVEREF(__pyx_t_1);
                        __pyx_cur_scope->__pyx_v_response_json = __pyx_t_1;
                        __pyx_t_1 = 0;

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":956
 *                     elif response.status == 200:
 *                         response_json = await response.json()
 *                         return response_json             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise IOError
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_response_json);
                        goto __pyx_L30_try_return;

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":954
 *                     if response.status == 201:
 *                         return response
 *                     elif response.status == 200:             # <<<<<<<<<<<<<<
 *                         response_json = await response.json()
 *                         return response_json
 */
                      }

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":958
 *                         return response_json
 *                     else:
 *                         raise IOError             # <<<<<<<<<<<<<<
 *                 except Exception:
 *                     if response.status == 502:
 */
                      /*else*/ {
                        __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
                        __PYX_ERR(0, 958, __pyx_L26_error)
                      }

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":951
 *                                       json=data,
 *                                       headers=headers) as response:
 *                 try:             # <<<<<<<<<<<<<<
 *                     if response.status == 201:
 *                         return response
 */
                    }
                    __pyx_L26_error:;
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":959
 *                     else:
 *                         raise IOError
 *                 except Exception:             # <<<<<<<<<<<<<<
 *                     if response.status == 502:
 *                         raise IOError(f"Error fetching data from {url}. "
 */
                    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
                    if (__pyx_t_4) {
                      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_3) < 0) __PYX_ERR(0, 959, __pyx_L28_except_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_3);

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":960
 *                         raise IOError
 *                 except Exception:
 *                     if response.status == 502:             # <<<<<<<<<<<<<<
 *                         raise IOError(f"Error fetching data from {url}. "
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")
 */
                      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L28_except_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __pyx_t_18 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_502, 0x1F6, 0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 960, __pyx_L28_except_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 960, __pyx_L28_except_error)
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      if (unlikely(__pyx_t_17)) {

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":961
 *                 except Exception:
 *                     if response.status == 502:
 *                         raise IOError(f"Error fetching data from {url}. "             # <<<<<<<<<<<<<<
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")
 *                     else:
 */
                        __pyx_t_18 = PyTuple_New(5); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 961, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_18);
                        __pyx_t_19 = 0;
                        __pyx_t_20 = 127;
                        __Pyx_INCREF(__pyx_kp_u_Error_fetching_data_from);
                        __pyx_t_19 += 25;
                        __Pyx_GIVEREF(__pyx_kp_u_Error_fetching_data_from);
                        PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_kp_u_Error_fetching_data_from);
                        __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_url); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_20;
                        __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
                        __Pyx_GIVEREF(__pyx_t_2);
                        PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_2);
                        __pyx_t_2 = 0;
                        __Pyx_INCREF(__pyx_kp_u_HTTP_status_is);
                        __pyx_t_19 += 17;
                        __Pyx_GIVEREF(__pyx_kp_u_HTTP_status_is);
                        PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_kp_u_HTTP_status_is);

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":962
 *                     if response.status == 502:
 *                         raise IOError(f"Error fetching data from {url}. "
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")             # <<<<<<<<<<<<<<
 *                     else:
 *                         response_text = await response.text()
 */
                        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 962, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                        __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
                        __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
                        __Pyx_GIVEREF(__pyx_t_21);
                        PyTuple_SET_ITEM(__pyx_t_18, 3, __pyx_t_21);
                        __pyx_t_21 = 0;
                        __Pyx_INCREF(__pyx_kp_u_Server_Error_Bad_Gateway);
                        __pyx_t_19 += 29;
                        __Pyx_GIVEREF(__pyx_kp_u_Server_Error_Bad_Gateway);
                        PyTuple_SET_ITEM(__pyx_t_18, 4, __pyx_kp_u_Server_Error_Bad_Gateway);

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":961
 *                 except Exception:
 *                     if response.status == 502:
 *                         raise IOError(f"Error fetching data from {url}. "             # <<<<<<<<<<<<<<
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")
 *                     else:
 */
                        __pyx_t_21 = __Pyx_PyUnicode_Join(__pyx_t_18, 5, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 961, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __pyx_t_18 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_21); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 961, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_18);
                        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_Raise(__pyx_t_18, 0, 0, 0);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __PYX_ERR(0, 961, __pyx_L28_except_error)

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":960
 *                         raise IOError
 *                 except Exception:
 *                     if response.status == 502:             # <<<<<<<<<<<<<<
 *                         raise IOError(f"Error fetching data from {url}. "
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")
 */
                      }

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":964
 *                                       f"HTTP status is {response.status} - Server Error: Bad Gateway.")
 *                     else:
 *                         response_text = await response.text()             # <<<<<<<<<<<<<<
 *                         raise IOError(f"Error fetching data from {url}. "
 *                                       f"HTTP status is {response.status} - {response_text}.")
 */
                      /*else*/ {
                        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 964, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __pyx_t_2 = NULL;
                        __pyx_t_4 = 0;
                        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
                          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_21);
                          if (likely(__pyx_t_2)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                            __Pyx_INCREF(__pyx_t_2);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_21, function);
                            __pyx_t_4 = 1;
                          }
                        }
                        {
                          PyObject *__pyx_callargs[1] = {__pyx_t_2, };
                          __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 964, __pyx_L28_except_error)
                          __Pyx_GOTREF(__pyx_t_18);
                          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        }
                        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_18);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __Pyx_XGOTREF(__pyx_r);
                        if (likely(__pyx_r)) {
                          __Pyx_XGIVEREF(__pyx_t_1);
                          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                          __Pyx_XGIVEREF(__pyx_t_3);
                          __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
                          __Pyx_XGIVEREF(__pyx_t_5);
                          __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
                          __Pyx_XGIVEREF(__pyx_t_6);
                          __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
                          __Pyx_XGIVEREF(__pyx_t_7);
                          __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
                          __Pyx_XGIVEREF(__pyx_t_8);
                          __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
                          __Pyx_XGIVEREF(__pyx_t_9);
                          __pyx_cur_scope->__pyx_t_6 = __pyx_t_9;
                          __Pyx_XGIVEREF(__pyx_t_10);
                          __pyx_cur_scope->__pyx_t_7 = __pyx_t_10;
                          __Pyx_XGIVEREF(__pyx_t_11);
                          __pyx_cur_scope->__pyx_t_8 = __pyx_t_11;
                          __Pyx_XGIVEREF(__pyx_t_12);
                          __pyx_cur_scope->__pyx_t_9 = __pyx_t_12;
                          __Pyx_XGIVEREF(__pyx_t_13);
                          __pyx_cur_scope->__pyx_t_10 = __pyx_t_13;
                          __Pyx_XGIVEREF(__pyx_t_14);
                          __pyx_cur_scope->__pyx_t_11 = __pyx_t_14;
                          __Pyx_XGIVEREF(__pyx_t_15);
                          __pyx_cur_scope->__pyx_t_12 = __pyx_t_15;
                          __Pyx_XGIVEREF(__pyx_t_16);
                          __pyx_cur_scope->__pyx_t_13 = __pyx_t_16;
                          __Pyx_XGIVEREF(__pyx_r);
                          __Pyx_RefNannyFinishContext();
                          __Pyx_Coroutine_SwapException(__pyx_generator);
                          /* return from generator, awaiting value */
                          __pyx_generator->resume_label = 4;
                          return __pyx_r;
                          __pyx_L37_resume_from_await:;
                          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                          __pyx_cur_scope->__pyx_t_0 = 0;
                          __Pyx_XGOTREF(__pyx_t_1);
                          __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
                          __pyx_cur_scope->__pyx_t_1 = 0;
                          __Pyx_XGOTREF(__pyx_t_3);
                          __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
                          __pyx_cur_scope->__pyx_t_2 = 0;
                          __Pyx_XGOTREF(__pyx_t_5);
                          __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
                          __pyx_cur_scope->__pyx_t_3 = 0;
                          __Pyx_XGOTREF(__pyx_t_6);
                          __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
                          __pyx_cur_scope->__pyx_t_4 = 0;
                          __Pyx_XGOTREF(__pyx_t_7);
                          __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
                          __pyx_cur_scope->__pyx_t_5 = 0;
                          __Pyx_XGOTREF(__pyx_t_8);
                          __pyx_t_9 = __pyx_cur_scope->__pyx_t_6;
                          __pyx_cur_scope->__pyx_t_6 = 0;
                          __Pyx_XGOTREF(__pyx_t_9);
                          __pyx_t_10 = __pyx_cur_scope->__pyx_t_7;
                          __pyx_cur_scope->__pyx_t_7 = 0;
                          __Pyx_XGOTREF(__pyx_t_10);
                          __pyx_t_11 = __pyx_cur_scope->__pyx_t_8;
                          __pyx_cur_scope->__pyx_t_8 = 0;
                          __Pyx_XGOTREF(__pyx_t_11);
                          __pyx_t_12 = __pyx_cur_scope->__pyx_t_9;
                          __pyx_cur_scope->__pyx_t_9 = 0;
                          __Pyx_XGOTREF(__pyx_t_12);
                          __pyx_t_13 = __pyx_cur_scope->__pyx_t_10;
                          __pyx_cur_scope->__pyx_t_10 = 0;
                          __Pyx_XGOTREF(__pyx_t_13);
                          __pyx_t_14 = __pyx_cur_scope->__pyx_t_11;
                          __pyx_cur_scope->__pyx_t_11 = 0;
                          __Pyx_XGOTREF(__pyx_t_14);
                          __pyx_t_15 = __pyx_cur_scope->__pyx_t_12;
                          __pyx_cur_scope->__pyx_t_12 = 0;
                          __Pyx_XGOTREF(__pyx_t_15);
                          __pyx_t_16 = __pyx_cur_scope->__pyx_t_13;
                          __pyx_cur_scope->__pyx_t_13 = 0;
                          __Pyx_XGOTREF(__pyx_t_16);
                          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 964, __pyx_L28_except_error)
                          __pyx_t_18 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_18);
                        } else {
                          __pyx_t_18 = NULL;
                          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_18) < 0) __PYX_ERR(0, 964, __pyx_L28_except_error)
                          __Pyx_GOTREF(__pyx_t_18);
                        }
                        __Pyx_GIVEREF(__pyx_t_18);
                        __pyx_cur_scope->__pyx_v_response_text = __pyx_t_18;
                        __pyx_t_18 = 0;

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":965
 *                     else:
 *                         response_text = await response.text()
 *                         raise IOError(f"Error fetching data from {url}. "             # <<<<<<<<<<<<<<
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 */
                        __pyx_t_18 = PyTuple_New(7); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 965, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_18);
                        __pyx_t_19 = 0;
                        __pyx_t_20 = 127;
                        __Pyx_INCREF(__pyx_kp_u_Error_fetching_data_from);
                        __pyx_t_19 += 25;
                        __Pyx_GIVEREF(__pyx_kp_u_Error_fetching_data_from);
                        PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_kp_u_Error_fetching_data_from);
                        __pyx_t_21 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_url); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 965, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_21) : __pyx_t_20;
                        __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_21);
                        __Pyx_GIVEREF(__pyx_t_21);
                        PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_21);
                        __pyx_t_21 = 0;
                        __Pyx_INCREF(__pyx_kp_u_HTTP_status_is);
                        __pyx_t_19 += 17;
                        __Pyx_GIVEREF(__pyx_kp_u_HTTP_status_is);
                        PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_kp_u_HTTP_status_is);

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":966
 *                         response_text = await response.text()
 *                         raise IOError(f"Error fetching data from {url}. "
 *                                       f"HTTP status is {response.status} - {response_text}.")             # <<<<<<<<<<<<<<
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:
 */
                        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 966, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_21, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_20;
                        __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
                        __Pyx_GIVEREF(__pyx_t_2);
                        PyTuple_SET_ITEM(__pyx_t_18, 3, __pyx_t_2);
                        __pyx_t_2 = 0;
                        __Pyx_INCREF(__pyx_kp_u__20);
                        __pyx_t_19 += 3;
                        __Pyx_GIVEREF(__pyx_kp_u__20);
                        PyTuple_SET_ITEM(__pyx_t_18, 4, __pyx_kp_u__20);
                        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_response_text, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_20;
                        __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
                        __Pyx_GIVEREF(__pyx_t_2);
                        PyTuple_SET_ITEM(__pyx_t_18, 5, __pyx_t_2);
                        __pyx_t_2 = 0;
                        __Pyx_INCREF(__pyx_kp_u__15);
                        __pyx_t_19 += 1;
                        __Pyx_GIVEREF(__pyx_kp_u__15);
                        PyTuple_SET_ITEM(__pyx_t_18, 6, __pyx_kp_u__15);

                        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":965
 *                     else:
 *                         response_text = await response.text()
 *                         raise IOError(f"Error fetching data from {url}. "             # <<<<<<<<<<<<<<
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 */
                        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_18, 7, __pyx_t_19, __pyx_t_20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __pyx_t_18 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 965, __pyx_L28_except_error)
                        __Pyx_GOTREF(__pyx_t_18);
                        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                        __Pyx_Raise(__pyx_t_18, 0, 0, 0);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __PYX_ERR(0, 965, __pyx_L28_except_error)
                      }
                    }
                    goto __pyx_L28_except_error;
                    __pyx_L28_except_error:;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":951
 *                                       json=data,
 *                                       headers=headers) as response:
 *                 try:             # <<<<<<<<<<<<<<
 *                     if response.status == 201:
 *                         return response
 */
                    __Pyx_XGIVEREF(__pyx_t_14);
                    __Pyx_XGIVEREF(__pyx_t_15);
                    __Pyx_XGIVEREF(__pyx_t_16);
                    __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
                    goto __pyx_L20_error;
                    __pyx_L30_try_return:;
                    __Pyx_XGIVEREF(__pyx_t_14);
                    __Pyx_XGIVEREF(__pyx_t_15);
                    __Pyx_XGIVEREF(__pyx_t_16);
                    __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
                    goto __pyx_L24_try_return;
                  }

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":946
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,
 */
                }
                __pyx_L20_error:;
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 946, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_18 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 946, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_18, NULL);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 946, __pyx_L22_except_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_16);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_XGOTREF(__pyx_r);
                  if (likely(__pyx_r)) {
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
                    __Pyx_XGIVEREF(__pyx_t_6);
                    __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
                    __Pyx_XGIVEREF(__pyx_t_7);
                    __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
                    __Pyx_XGIVEREF(__pyx_t_8);
                    __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
                    __Pyx_XGIVEREF(__pyx_t_9);
                    __pyx_cur_scope->__pyx_t_6 = __pyx_t_9;
                    __Pyx_XGIVEREF(__pyx_t_10);
                    __pyx_cur_scope->__pyx_t_7 = __pyx_t_10;
                    __Pyx_XGIVEREF(__pyx_t_11);
                    __pyx_cur_scope->__pyx_t_8 = __pyx_t_11;
                    __Pyx_XGIVEREF(__pyx_t_12);
                    __pyx_cur_scope->__pyx_t_9 = __pyx_t_12;
                    __Pyx_XGIVEREF(__pyx_t_13);
                    __pyx_cur_scope->__pyx_t_10 = __pyx_t_13;
                    __Pyx_XGIVEREF(__pyx_t_16);
                    __pyx_cur_scope->__pyx_t_11 = __pyx_t_16;
                    __Pyx_XGIVEREF(__pyx_r);
                    __Pyx_RefNannyFinishContext();
                    __Pyx_Coroutine_SwapException(__pyx_generator);
                    /* return from generator, awaiting value */
                    __pyx_generator->resume_label = 5;
                    return __pyx_r;
                    __pyx_L41_resume_from_await:;
                    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                    __pyx_cur_scope->__pyx_t_0 = 0;
                    __Pyx_XGOTREF(__pyx_t_1);
                    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
                    __pyx_cur_scope->__pyx_t_1 = 0;
                    __Pyx_XGOTREF(__pyx_t_3);
                    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
                    __pyx_cur_scope->__pyx_t_2 = 0;
                    __Pyx_XGOTREF(__pyx_t_5);
                    __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
                    __pyx_cur_scope->__pyx_t_3 = 0;
                    __Pyx_XGOTREF(__pyx_t_6);
                    __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
                    __pyx_cur_scope->__pyx_t_4 = 0;
                    __Pyx_XGOTREF(__pyx_t_7);
                    __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
                    __pyx_cur_scope->__pyx_t_5 = 0;
                    __Pyx_XGOTREF(__pyx_t_8);
                    __pyx_t_9 = __pyx_cur_scope->__pyx_t_6;
                    __pyx_cur_scope->__pyx_t_6 = 0;
                    __Pyx_XGOTREF(__pyx_t_9);
                    __pyx_t_10 = __pyx_cur_scope->__pyx_t_7;
                    __pyx_cur_scope->__pyx_t_7 = 0;
                    __Pyx_XGOTREF(__pyx_t_10);
                    __pyx_t_11 = __pyx_cur_scope->__pyx_t_8;
                    __pyx_cur_scope->__pyx_t_8 = 0;
                    __Pyx_XGOTREF(__pyx_t_11);
                    __pyx_t_12 = __pyx_cur_scope->__pyx_t_9;
                    __pyx_cur_scope->__pyx_t_9 = 0;
                    __Pyx_XGOTREF(__pyx_t_12);
                    __pyx_t_13 = __pyx_cur_scope->__pyx_t_10;
                    __pyx_cur_scope->__pyx_t_10 = 0;
                    __Pyx_XGOTREF(__pyx_t_13);
                    __pyx_t_16 = __pyx_cur_scope->__pyx_t_11;
                    __pyx_cur_scope->__pyx_t_11 = 0;
                    __Pyx_XGOTREF(__pyx_t_16);
                    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 946, __pyx_L22_except_error)
                    __pyx_t_18 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_18);
                  } else {
                    __pyx_t_18 = NULL;
                    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_18) < 0) __PYX_ERR(0, 946, __pyx_L22_except_error)
                    __Pyx_GOTREF(__pyx_t_18);
                  }
                  __pyx_t_16 = __pyx_t_18;
                  __pyx_t_18 = 0;
                  __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (__pyx_t_17 < 0) __PYX_ERR(0, 946, __pyx_L22_except_error)
                  __pyx_t_22 = ((!(__pyx_t_17 != 0)) != 0);
                  if (unlikely(__pyx_t_22)) {
                    __Pyx_GIVEREF(__pyx_t_3);
                    __Pyx_GIVEREF(__pyx_t_6);
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_6, __pyx_t_1);
                    __pyx_t_3 = 0; __pyx_t_6 = 0; __pyx_t_1 = 0; 
                    __PYX_ERR(0, 946, __pyx_L22_except_error)
                  }
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  goto __pyx_L21_exception_handled;
                }
                __pyx_L22_except_error:;
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
                goto __pyx_L9_error;
                __pyx_L24_try_return:;
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
                goto __pyx_L17_return;
                __pyx_L21_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_10) {
                  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__21, NULL);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 946, __pyx_L9_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_13);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_XGOTREF(__pyx_r);
                  if (likely(__pyx_r)) {
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
                    __Pyx_XGIVEREF(__pyx_t_7);
                    __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
                    __Pyx_XGIVEREF(__pyx_t_8);
                    __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
                    __Pyx_XGIVEREF(__pyx_t_9);
                    __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
                    __Pyx_XGIVEREF(__pyx_t_10);
                    __pyx_cur_scope->__pyx_t_4 = __pyx_t_10;
                    __Pyx_XGIVEREF(__pyx_t_13);
                    __pyx_cur_scope->__pyx_t_5 = __pyx_t_13;
                    __Pyx_XGIVEREF(__pyx_r);
                    __Pyx_RefNannyFinishContext();
                    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                    /* return from generator, awaiting value */
                    __pyx_generator->resume_label = 6;
                    return __pyx_r;
                    __pyx_L42_resume_from_await:;
                    __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
                    __pyx_cur_scope->__pyx_t_0 = 0;
                    __Pyx_XGOTREF(__pyx_t_5);
                    __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
                    __pyx_cur_scope->__pyx_t_1 = 0;
                    __Pyx_XGOTREF(__pyx_t_7);
                    __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
                    __pyx_cur_scope->__pyx_t_2 = 0;
                    __Pyx_XGOTREF(__pyx_t_8);
                    __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
                    __pyx_cur_scope->__pyx_t_3 = 0;
                    __Pyx_XGOTREF(__pyx_t_9);
                    __pyx_t_10 = __pyx_cur_scope->__pyx_t_4;
                    __pyx_cur_scope->__pyx_t_4 = 0;
                    __Pyx_XGOTREF(__pyx_t_10);
                    __pyx_t_13 = __pyx_cur_scope->__pyx_t_5;
                    __pyx_cur_scope->__pyx_t_5 = 0;
                    __Pyx_XGOTREF(__pyx_t_13);
                    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 946, __pyx_L9_error)
                    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
                  } else {
                    __pyx_t_1 = NULL;
                    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 946, __pyx_L9_error)
                    __Pyx_GOTREF(__pyx_t_1);
                  }
                  __pyx_t_13 = __pyx_t_1;
                  __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                }
                goto __pyx_L19;
              }
              __pyx_L17_return: {
                __Pyx_PyThreadState_assign
                __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
                if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
                if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
                __Pyx_XGOTREF(__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_11);
                __Pyx_XGOTREF(__pyx_t_16);
                __Pyx_XGOTREF(__pyx_t_15);
                __Pyx_XGOTREF(__pyx_t_14);
                __pyx_t_23 = __pyx_r;
                __pyx_r = 0;
                if (__pyx_t_10) {
                  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__21, NULL);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 946, __pyx_L9_error)
                  __Pyx_GOTREF(__pyx_t_24);
                  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_24);
                  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                  __Pyx_XGOTREF(__pyx_r);
                  if (likely(__pyx_r)) {
                    __Pyx_XGIVEREF(__pyx_t_5);
                    __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
                    __Pyx_XGIVEREF(__pyx_t_7);
                    __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
                    __Pyx_XGIVEREF(__pyx_t_8);
                    __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
                    __Pyx_XGIVEREF(__pyx_t_9);
                    __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
                    __Pyx_XGIVEREF(__pyx_t_10);
                    __pyx_cur_scope->__pyx_t_4 = __pyx_t_10;
                    __Pyx_XGIVEREF(__pyx_t_11);
                    __pyx_cur_scope->__pyx_t_5 = __pyx_t_11;
                    __Pyx_XGIVEREF(__pyx_t_12);
                    __pyx_cur_scope->__pyx_t_6 = __pyx_t_12;
                    __Pyx_XGIVEREF(__pyx_t_13);
                    __pyx_cur_scope->__pyx_t_7 = __pyx_t_13;
                    __Pyx_XGIVEREF(__pyx_t_14);
                    __pyx_cur_scope->__pyx_t_8 = __pyx_t_14;
                    __Pyx_XGIVEREF(__pyx_t_15);
                    __pyx_cur_scope->__pyx_t_9 = __pyx_t_15;
                    __Pyx_XGIVEREF(__pyx_t_16);
                    __pyx_cur_scope->__pyx_t_10 = __pyx_t_16;
                    __Pyx_XGIVEREF(__pyx_t_23);
                    __pyx_cur_scope->__pyx_t_11 = __pyx_t_23;
                    __Pyx_XGIVEREF(__pyx_t_24);
                    __pyx_cur_scope->__pyx_t_12 = __pyx_t_24;
                    __Pyx_XGIVEREF(__pyx_r);
                    __Pyx_RefNannyFinishContext();
                    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                    /* return from generator, awaiting value */
                    __pyx_generator->resume_label = 7;
                    return __pyx_r;
                    __pyx_L43_resume_from_await:;
                    __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
                    __pyx_cur_scope->__pyx_t_0 = 0;
                    __Pyx_XGOTREF(__pyx_t_5);
                    __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
                    __pyx_cur_scope->__pyx_t_1 = 0;
                    __Pyx_XGOTREF(__pyx_t_7);
                    __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
                    __pyx_cur_scope->__pyx_t_2 = 0;
                    __Pyx_XGOTREF(__pyx_t_8);
                    __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
                    __pyx_cur_scope->__pyx_t_3 = 0;
                    __Pyx_XGOTREF(__pyx_t_9);
                    __pyx_t_10 = __pyx_cur_scope->__pyx_t_4;
                    __pyx_cur_scope->__pyx_t_4 = 0;
                    __Pyx_XGOTREF(__pyx_t_10);
                    __pyx_t_11 = __pyx_cur_scope->__pyx_t_5;
                    __pyx_cur_scope->__pyx_t_5 = 0;
                    __Pyx_XGOTREF(__pyx_t_11);
                    __pyx_t_12 = __pyx_cur_scope->__pyx_t_6;
                    __pyx_cur_scope->__pyx_t_6 = 0;
                    __Pyx_XGOTREF(__pyx_t_12);
                    __pyx_t_13 = __pyx_cur_scope->__pyx_t_7;
                    __pyx_cur_scope->__pyx_t_7 = 0;
                    __Pyx_XGOTREF(__pyx_t_13);
                    __pyx_t_14 = __pyx_cur_scope->__pyx_t_8;
                    __pyx_cur_scope->__pyx_t_8 = 0;
                    __Pyx_XGOTREF(__pyx_t_14);
                    __pyx_t_15 = __pyx_cur_scope->__pyx_t_9;
                    __pyx_cur_scope->__pyx_t_9 = 0;
                    __Pyx_XGOTREF(__pyx_t_15);
                    __pyx_t_16 = __pyx_cur_scope->__pyx_t_10;
                    __pyx_cur_scope->__pyx_t_10 = 0;
                    __Pyx_XGOTREF(__pyx_t_16);
                    __pyx_t_23 = __pyx_cur_scope->__pyx_t_11;
                    __pyx_cur_scope->__pyx_t_11 = 0;
                    __Pyx_XGOTREF(__pyx_t_23);
                    __pyx_t_24 = __pyx_cur_scope->__pyx_t_12;
                    __pyx_cur_scope->__pyx_t_12 = 0;
                    __Pyx_XGOTREF(__pyx_t_24);
                    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 946, __pyx_L9_error)
                    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
                  } else {
                    __pyx_t_1 = NULL;
                    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 946, __pyx_L9_error)
                    __Pyx_GOTREF(__pyx_t_1);
                  }
                  __pyx_t_24 = __pyx_t_1;
                  __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                }
                __pyx_r = __pyx_t_23;
                __pyx_t_23 = 0;
                if (PY_MAJOR_VERSION >= 3) {
                  __Pyx_XGIVEREF(__pyx_t_16);
                  __Pyx_XGIVEREF(__pyx_t_15);
                  __Pyx_XGIVEREF(__pyx_t_14);
                  __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_15, __pyx_t_14);
                }
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_11);
                __Pyx_ErrRestore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
                __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0;
                goto __pyx_L13_try_return;
              }
              __pyx_L19:;
            }
            goto __pyx_L44;
            __pyx_L15_error:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L9_error;
            __pyx_L44:;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":945
 *                            data: Optional[Dict[str, Any]] = None,
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:             # <<<<<<<<<<<<<<
 *             async with client.request(http_method,
 *                                       url=url,
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_3) < 0) __PYX_ERR(0, 945, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_18 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 945, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_18, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 945, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __Pyx_XGIVEREF(__pyx_t_3);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_6);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_SwapException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 8;
            return __pyx_r;
            __pyx_L48_resume_from_await:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_6);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 945, __pyx_L11_except_error)
            __pyx_t_18 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_18);
          } else {
            __pyx_t_18 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_18) < 0) __PYX_ERR(0, 945, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_18);
          }
          __pyx_t_10 = __pyx_t_18;
          __pyx_t_18 = 0;
          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_22 < 0) __PYX_ERR(0, 945, __pyx_L11_except_error)
          __pyx_t_17 = ((!(__pyx_t_22 != 0)) != 0);
          if (unlikely(__pyx_t_17)) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_6, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_6 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 945, __pyx_L11_except_error)
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L10_exception_handled;
        }
        __pyx_L11_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L13_try_return:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L6_return;
        __pyx_L10_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__21, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 9;
            return __pyx_r;
            __pyx_L49_resume_from_await:;
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 945, __pyx_L1_error)
            __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
          } else {
            __pyx_t_3 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __pyx_t_9 = __pyx_t_3;
          __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L8;
      }
      __pyx_L6_return: {
        __Pyx_PyThreadState_assign
        __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_7 = 0; __pyx_t_10 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_14, &__pyx_t_15);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __pyx_t_16 = __pyx_r;
        __pyx_r = 0;
        if (__pyx_t_5) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__21, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 945, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_t_15);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_15;
            __Pyx_XGIVEREF(__pyx_t_16);
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_16;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 10;
            return __pyx_r;
            __pyx_L50_resume_from_await:;
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_15 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_16 = __pyx_cur_scope->__pyx_t_8;
            __pyx_cur_scope->__pyx_t_8 = 0;
            __Pyx_XGOTREF(__pyx_t_16);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 945, __pyx_L1_error)
            __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
          } else {
            __pyx_t_3 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __pyx_t_11 = __pyx_t_3;
          __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_r = __pyx_t_16;
        __pyx_t_16 = 0;
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_14, __pyx_t_15);
        }
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ErrRestore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_7 = 0; __pyx_t_10 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
        goto __pyx_L0;
      }
      __pyx_L8:;
    }
    goto __pyx_L51;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L51:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("_api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":968
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:             # <<<<<<<<<<<<<<
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex = {"get_order_hash_hex", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_unsigned_order = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_hash_hex (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unsigned_order,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_unsigned_order,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unsigned_order)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_order_hash_hex") < 0)) __PYX_ERR(0, 968, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_unsigned_order = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_order_hash_hex", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 968, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_order_hash_hex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_49get_order_hash_hex(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_unsigned_order);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_49get_order_hash_hex(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_unsigned_order) {
  PyObject *__pyx_v_order_struct = NULL;
  PyObject *__pyx_v_order_hash_hex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_order_hash_hex", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":969
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:
 *         order_struct = jsdict_order_to_struct(unsigned_order)             # <<<<<<<<<<<<<<
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 *             order=order_struct,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_unsigned_order};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_order_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":970
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(             # <<<<<<<<<<<<<<
 *             order=order_struct,
 *             exchange_address=self._exchange_address.lower(),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_generate_order_hash_hex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":971
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 *             order=order_struct,             # <<<<<<<<<<<<<<
 *             exchange_address=self._exchange_address.lower(),
 *             chain_id=unsigned_order["chainId"]
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_v_order_struct) < 0) __PYX_ERR(0, 971, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":972
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 *             order=order_struct,
 *             exchange_address=self._exchange_address.lower(),             # <<<<<<<<<<<<<<
 *             chain_id=unsigned_order["chainId"]
 *         )
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_exchange_address, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_exchange_address, __pyx_t_3) < 0) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":973
 *             order=order_struct,
 *             exchange_address=self._exchange_address.lower(),
 *             chain_id=unsigned_order["chainId"]             # <<<<<<<<<<<<<<
 *         )
 *         return order_hash_hex
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_unsigned_order, __pyx_n_u_chainId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_chain_id, __pyx_t_3) < 0) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":970
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(             # <<<<<<<<<<<<<<
 *             order=order_struct,
 *             exchange_address=self._exchange_address.lower(),
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_u_0x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_hash_hex = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":975
 *             chain_id=unsigned_order["chainId"]
 *         )
 *         return order_hash_hex             # <<<<<<<<<<<<<<
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_order_hash_hex))||((__pyx_v_order_hash_hex) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_order_hash_hex))) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_order_hash_hex);
  __pyx_r = ((PyObject*)__pyx_v_order_hash_hex);
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":968
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:             # <<<<<<<<<<<<<<
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_order_hash_hex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_struct);
  __Pyx_XDECREF(__pyx_v_order_hash_hex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":977
 *         return order_hash_hex
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:             # <<<<<<<<<<<<<<
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature = {"get_zero_ex_signature", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_hash_hex = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_zero_ex_signature (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_hash_hex,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_hash_hex,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_hash_hex)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_zero_ex_signature") < 0)) __PYX_ERR(0, 977, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_order_hash_hex = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_zero_ex_signature", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_zero_ex_signature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_hash_hex), (&PyUnicode_Type), 1, "order_hash_hex", 1))) __PYX_ERR(0, 977, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_51get_zero_ex_signature(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_order_hash_hex);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_51get_zero_ex_signature(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_hash_hex) {
  PyObject *__pyx_v_signature = NULL;
  PyObject *__pyx_v_fixed_signature = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_zero_ex_signature", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":978
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)             # <<<<<<<<<<<<<<
 *         fixed_signature = fix_signature(self._provider,
 *                                         self._wallet.address,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sign_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_hexstr, __pyx_v_order_hash_hex) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_signature = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":979
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,             # <<<<<<<<<<<<<<
 *                                         self._wallet.address,
 *                                         order_hash_hex,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fix_signature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":980
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,
 *                                         self._wallet.address,             # <<<<<<<<<<<<<<
 *                                         order_hash_hex,
 *                                         signature,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_address); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":983
 *                                         order_hash_hex,
 *                                         signature,
 *                                         self._chain_id)             # <<<<<<<<<<<<<<
 *         return fixed_signature
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_chain_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_5, __pyx_v_self->_provider, __pyx_t_2, __pyx_v_order_hash_hex, __pyx_v_signature, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 5+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_fixed_signature = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":984
 *                                         signature,
 *                                         self._chain_id)
 *         return fixed_signature             # <<<<<<<<<<<<<<
 * 
 *     cdef list c_get_orders_for_amount_price(self,
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_fixed_signature))||((__pyx_v_fixed_signature) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_fixed_signature))) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_fixed_signature);
  __pyx_r = ((PyObject*)__pyx_v_fixed_signature);
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":977
 *         return order_hash_hex
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:             # <<<<<<<<<<<<<<
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_zero_ex_signature", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_signature);
  __Pyx_XDECREF(__pyx_v_fixed_signature);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":986
 *         return fixed_signature
 * 
 *     cdef list c_get_orders_for_amount_price(self,             # <<<<<<<<<<<<<<
 *                                             str trading_pair,
 *                                             object trade_type,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_orders_for_amount_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_v_amount_filled = 0;
  PyObject *__pyx_v_active_orders = 0;
  PyObject *__pyx_v_current_price = 0;
  PyObject *__pyx_v_found_orders = 0;
  PyObject *__pyx_v_found_hashes = 0;
  PyObject *__pyx_v_active_asks = NULL;
  PyObject *__pyx_v_ask_keys = NULL;
  PyObject *__pyx_v_order_hash = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_v_active_bids = NULL;
  PyObject *__pyx_v_bid_keys = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_orders_for_amount_price", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":992
 *                                             object price):
 *         cdef:
 *             object amount_filled = s_decimal_0             # <<<<<<<<<<<<<<
 *             object active_orders
 *             object current_item
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_amount_filled = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":996
 *             object current_item
 *             object current_price
 *             list found_orders = []             # <<<<<<<<<<<<<<
 *             list found_hashes = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_found_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":997
 *             object current_price
 *             list found_orders = []
 *             list found_hashes = []             # <<<<<<<<<<<<<<
 * 
 *         active_orders = self._order_book_tracker.get_active_order_tracker(trading_pair=trading_pair)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_found_hashes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":999
 *             list found_hashes = []
 * 
 *         active_orders = self._order_book_tracker.get_active_order_tracker(trading_pair=trading_pair)             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_get_active_order_tracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_v_trading_pair) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_active_orders = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1001
 *         active_orders = self._order_book_tracker.get_active_order_tracker(trading_pair=trading_pair)
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if trade_type is TradeType.BUY:
 *                 active_asks = active_orders.active_asks
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1002
 * 
 *         try:
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 active_asks = active_orders.active_asks
 *                 ask_keys = sorted(active_asks.keys())
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = (__pyx_v_trade_type == __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1003
 *         try:
 *             if trade_type is TradeType.BUY:
 *                 active_asks = active_orders.active_asks             # <<<<<<<<<<<<<<
 *                 ask_keys = sorted(active_asks.keys())
 *                 for current_price in ask_keys:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_orders, __pyx_n_s_active_asks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1003, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_active_asks = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1004
 *             if trade_type is TradeType.BUY:
 *                 active_asks = active_orders.active_asks
 *                 ask_keys = sorted(active_asks.keys())             # <<<<<<<<<<<<<<
 *                 for current_price in ask_keys:
 *                     # Market orders don't care about price
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_asks, __pyx_n_s_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_9, };
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_1 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_11 = PyList_Sort(__pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1004, __pyx_L3_error)
        __pyx_v_ask_keys = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1005
 *                 active_asks = active_orders.active_asks
 *                 ask_keys = sorted(active_asks.keys())
 *                 for current_price in ask_keys:             # <<<<<<<<<<<<<<
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price > price:
 */
        __pyx_t_2 = __pyx_v_ask_keys; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
        for (;;) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 1005, __pyx_L3_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          __Pyx_XDECREF_SET(__pyx_v_current_price, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1007
 *                 for current_price in ask_keys:
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price > price:             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *                     if current_price not in active_asks:
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_price, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_9, };
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1007, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_13 = ((!__pyx_t_7) != 0);
          if (__pyx_t_13) {
          } else {
            __pyx_t_8 = __pyx_t_13;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_1 = PyObject_RichCompare(__pyx_v_current_price, __pyx_v_price, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L3_error)
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1007, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_8 = __pyx_t_13;
          __pyx_L13_bool_binop_done:;
          if (unlikely(__pyx_t_8)) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1008
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price > price:
 *                         raise StopIteration             # <<<<<<<<<<<<<<
 *                     if current_price not in active_asks:
 *                         continue
 */
            __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
            __PYX_ERR(0, 1008, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1007
 *                 for current_price in ask_keys:
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price > price:             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *                     if current_price not in active_asks:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1009
 *                     if not price.is_nan() and current_price > price:
 *                         raise StopIteration
 *                     if current_price not in active_asks:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for order_hash in active_asks[current_price]:
 */
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_current_price, __pyx_v_active_asks, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1009, __pyx_L3_error)
          __pyx_t_13 = (__pyx_t_8 != 0);
          if (__pyx_t_13) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1010
 *                         raise StopIteration
 *                     if current_price not in active_asks:
 *                         continue             # <<<<<<<<<<<<<<
 *                     for order_hash in active_asks[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 */
            goto __pyx_L10_continue;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1009
 *                     if not price.is_nan() and current_price > price:
 *                         raise StopIteration
 *                     if current_price not in active_asks:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for order_hash in active_asks[current_price]:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1011
 *                     if current_price not in active_asks:
 *                         continue
 *                     for order_hash in active_asks[current_price]:             # <<<<<<<<<<<<<<
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 */
          __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_active_asks, __pyx_v_current_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_14 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_14 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1011, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_15 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1011, __pyx_L3_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_1); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 1011, __pyx_L3_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_14); __Pyx_INCREF(__pyx_t_1); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 1011, __pyx_L3_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_15(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1011, __pyx_L3_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_order_hash, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1012
 *                         continue
 *                     for order_hash in active_asks[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:             # <<<<<<<<<<<<<<
 *                             continue
 *                         order = active_asks[current_price][order_hash]
 */
            __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_hash, __pyx_v_self->_filled_order_hashes, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1012, __pyx_L3_error)
            __pyx_t_7 = (__pyx_t_8 != 0);
            if (!__pyx_t_7) {
            } else {
              __pyx_t_13 = __pyx_t_7;
              goto __pyx_L19_bool_binop_done;
            }
            __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_hash, __pyx_v_found_hashes, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1012, __pyx_L3_error)
            __pyx_t_8 = (__pyx_t_7 != 0);
            __pyx_t_13 = __pyx_t_8;
            __pyx_L19_bool_binop_done:;
            if (__pyx_t_13) {

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1013
 *                     for order_hash in active_asks[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue             # <<<<<<<<<<<<<<
 *                         order = active_asks[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 */
              goto __pyx_L16_continue;

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1012
 *                         continue
 *                     for order_hash in active_asks[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:             # <<<<<<<<<<<<<<
 *                             continue
 *                         order = active_asks[current_price][order_hash]
 */
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1014
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 *                         order = active_asks[current_price][order_hash]             # <<<<<<<<<<<<<<
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)
 */
            __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_active_asks, __pyx_v_current_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_order_hash); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1014, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_9);
            __pyx_t_9 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1015
 *                             continue
 *                         order = active_asks[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])             # <<<<<<<<<<<<<<
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_v_order, __pyx_n_u_remainingBaseTokenAmount); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1015, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = NULL;
            __pyx_t_10 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_10 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_16};
              __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1015, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_amount_filled, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF_SET(__pyx_v_amount_filled, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1016
 *                         order = active_asks[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)             # <<<<<<<<<<<<<<
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:
 */
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_found_orders, __pyx_v_order); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1016, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1017
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)             # <<<<<<<<<<<<<<
 *                         if amount_filled >= amount:
 *                             raise StopIteration
 */
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_found_hashes, __pyx_v_order_hash); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1017, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1018
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:             # <<<<<<<<<<<<<<
 *                             raise StopIteration
 *             if trade_type is TradeType.SELL:
 */
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_amount_filled, __pyx_v_amount, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L3_error)
            __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1018, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(__pyx_t_13)) {

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1019
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:
 *                             raise StopIteration             # <<<<<<<<<<<<<<
 *             if trade_type is TradeType.SELL:
 *                 active_bids = active_orders.active_bids
 */
              __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
              __PYX_ERR(0, 1019, __pyx_L3_error)

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1018
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:             # <<<<<<<<<<<<<<
 *                             raise StopIteration
 *             if trade_type is TradeType.SELL:
 */
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1011
 *                     if current_price not in active_asks:
 *                         continue
 *                     for order_hash in active_asks[current_price]:             # <<<<<<<<<<<<<<
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 */
            __pyx_L16_continue:;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1005
 *                 active_asks = active_orders.active_asks
 *                 ask_keys = sorted(active_asks.keys())
 *                 for current_price in ask_keys:             # <<<<<<<<<<<<<<
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price > price:
 */
          __pyx_L10_continue:;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1002
 * 
 *         try:
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 active_asks = active_orders.active_asks
 *                 ask_keys = sorted(active_asks.keys())
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1020
 *                         if amount_filled >= amount:
 *                             raise StopIteration
 *             if trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                 active_bids = active_orders.active_bids
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1020, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SELL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1020, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_13 = (__pyx_v_trade_type == __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = (__pyx_t_13 != 0);
      if (__pyx_t_8) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1021
 *                             raise StopIteration
 *             if trade_type is TradeType.SELL:
 *                 active_bids = active_orders.active_bids             # <<<<<<<<<<<<<<
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)
 *                 for current_price in bid_keys:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_orders, __pyx_n_s_active_bids); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_v_active_bids = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1022
 *             if trade_type is TradeType.SELL:
 *                 active_bids = active_orders.active_bids
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)             # <<<<<<<<<<<<<<
 *                 for current_price in bid_keys:
 *                     # Market orders don't care about price
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_bids, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_1, };
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 1022, __pyx_L3_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_bid_keys = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1023
 *                 active_bids = active_orders.active_bids
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)
 *                 for current_price in bid_keys:             # <<<<<<<<<<<<<<
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price < price:
 */
        if (likely(PyList_CheckExact(__pyx_v_bid_keys)) || PyTuple_CheckExact(__pyx_v_bid_keys)) {
          __pyx_t_1 = __pyx_v_bid_keys; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
          __pyx_t_15 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_bid_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_15 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1023, __pyx_L3_error)
        }
        for (;;) {
          if (likely(!__pyx_t_15)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 1023, __pyx_L3_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 1023, __pyx_L3_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_15(__pyx_t_1);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1023, __pyx_L3_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_current_price, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1025
 *                 for current_price in bid_keys:
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price < price:             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *                     if current_price not in active_bids:
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_price, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1025, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_9, };
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1025, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1025, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_7 = ((!__pyx_t_13) != 0);
          if (__pyx_t_7) {
          } else {
            __pyx_t_8 = __pyx_t_7;
            goto __pyx_L26_bool_binop_done;
          }
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_current_price, __pyx_v_price, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1025, __pyx_L3_error)
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1025, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_8 = __pyx_t_7;
          __pyx_L26_bool_binop_done:;
          if (unlikely(__pyx_t_8)) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1026
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price < price:
 *                         raise StopIteration             # <<<<<<<<<<<<<<
 *                     if current_price not in active_bids:
 *                         continue
 */
            __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
            __PYX_ERR(0, 1026, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1025
 *                 for current_price in bid_keys:
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price < price:             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *                     if current_price not in active_bids:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1027
 *                     if not price.is_nan() and current_price < price:
 *                         raise StopIteration
 *                     if current_price not in active_bids:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for order_hash in active_bids[current_price]:
 */
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_current_price, __pyx_v_active_bids, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1027, __pyx_L3_error)
          __pyx_t_7 = (__pyx_t_8 != 0);
          if (__pyx_t_7) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1028
 *                         raise StopIteration
 *                     if current_price not in active_bids:
 *                         continue             # <<<<<<<<<<<<<<
 *                     for order_hash in active_bids[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 */
            goto __pyx_L23_continue;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1027
 *                     if not price.is_nan() and current_price < price:
 *                         raise StopIteration
 *                     if current_price not in active_bids:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for order_hash in active_bids[current_price]:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1029
 *                     if current_price not in active_bids:
 *                         continue
 *                     for order_hash in active_bids[current_price]:             # <<<<<<<<<<<<<<
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 */
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_active_bids, __pyx_v_current_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1029, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_14 = 0;
            __pyx_t_18 = NULL;
          } else {
            __pyx_t_14 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1029, __pyx_L3_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_18)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 1029, __pyx_L3_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1029, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely((0 < 0))) __PYX_ERR(0, 1029, __pyx_L3_error)
                #else
                __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1029, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_18(__pyx_t_2);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1029, __pyx_L3_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_order_hash, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1030
 *                         continue
 *                     for order_hash in active_bids[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:             # <<<<<<<<<<<<<<
 *                             continue
 *                         order = active_bids[current_price][order_hash]
 */
            __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_hash, __pyx_v_self->_filled_order_hashes, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1030, __pyx_L3_error)
            __pyx_t_13 = (__pyx_t_8 != 0);
            if (!__pyx_t_13) {
            } else {
              __pyx_t_7 = __pyx_t_13;
              goto __pyx_L32_bool_binop_done;
            }
            __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_hash, __pyx_v_found_hashes, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1030, __pyx_L3_error)
            __pyx_t_8 = (__pyx_t_13 != 0);
            __pyx_t_7 = __pyx_t_8;
            __pyx_L32_bool_binop_done:;
            if (__pyx_t_7) {

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1031
 *                     for order_hash in active_bids[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue             # <<<<<<<<<<<<<<
 *                         order = active_bids[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 */
              goto __pyx_L29_continue;

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1030
 *                         continue
 *                     for order_hash in active_bids[current_price]:
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:             # <<<<<<<<<<<<<<
 *                             continue
 *                         order = active_bids[current_price][order_hash]
 */
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1032
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 *                         order = active_bids[current_price][order_hash]             # <<<<<<<<<<<<<<
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)
 */
            __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_active_bids, __pyx_v_current_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_order_hash); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_9);
            __pyx_t_9 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1033
 *                             continue
 *                         order = active_bids[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])             # <<<<<<<<<<<<<<
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1033, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_v_order, __pyx_n_u_remainingBaseTokenAmount); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1033, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = NULL;
            __pyx_t_10 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_10 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_16};
              __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1033, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_amount_filled, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1033, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF_SET(__pyx_v_amount_filled, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1034
 *                         order = active_bids[current_price][order_hash]
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)             # <<<<<<<<<<<<<<
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:
 */
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_found_orders, __pyx_v_order); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1034, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1035
 *                         amount_filled += Decimal(order["remainingBaseTokenAmount"])
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)             # <<<<<<<<<<<<<<
 *                         if amount_filled >= amount:
 *                             raise StopIteration
 */
            __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_found_hashes, __pyx_v_order_hash); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1035, __pyx_L3_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1036
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:             # <<<<<<<<<<<<<<
 *                             raise StopIteration
 *         except StopIteration:
 */
            __pyx_t_3 = PyObject_RichCompare(__pyx_v_amount_filled, __pyx_v_amount, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L3_error)
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1036, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(__pyx_t_7)) {

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1037
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:
 *                             raise StopIteration             # <<<<<<<<<<<<<<
 *         except StopIteration:
 *             pass
 */
              __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
              __PYX_ERR(0, 1037, __pyx_L3_error)

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1036
 *                         found_orders.append(order)
 *                         found_hashes.append(order_hash)
 *                         if amount_filled >= amount:             # <<<<<<<<<<<<<<
 *                             raise StopIteration
 *         except StopIteration:
 */
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1029
 *                     if current_price not in active_bids:
 *                         continue
 *                     for order_hash in active_bids[current_price]:             # <<<<<<<<<<<<<<
 *                         if order_hash in self._filled_order_hashes or order_hash in found_hashes:
 *                             continue
 */
            __pyx_L29_continue:;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1023
 *                 active_bids = active_orders.active_bids
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)
 *                 for current_price in bid_keys:             # <<<<<<<<<<<<<<
 *                     # Market orders don't care about price
 *                     if not price.is_nan() and current_price < price:
 */
          __pyx_L23_continue:;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1020
 *                         if amount_filled >= amount:
 *                             raise StopIteration
 *             if trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                 active_bids = active_orders.active_bids
 *                 bid_keys = sorted(active_bids.keys(), reverse=True)
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1001
 *         active_orders = self._order_book_tracker.get_active_order_tracker(trading_pair=trading_pair)
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if trade_type is TradeType.BUY:
 *                 active_asks = active_orders.active_asks
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1038
 *                         if amount_filled >= amount:
 *                             raise StopIteration
 *         except StopIteration:             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_10) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1001
 *         active_orders = self._order_book_tracker.get_active_order_tracker(trading_pair=trading_pair)
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if trade_type is TradeType.BUY:
 *                 active_asks = active_orders.active_asks
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1041
 *             pass
 * 
 *         return found_orders             # <<<<<<<<<<<<<<
 * 
 *     async def submit_market_order(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_found_orders);
  __pyx_r = __pyx_v_found_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":986
 *         return fixed_signature
 * 
 *     cdef list c_get_orders_for_amount_price(self,             # <<<<<<<<<<<<<<
 *                                             str trading_pair,
 *                                             object trade_type,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_get_orders_for_amount_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_amount_filled);
  __Pyx_XDECREF(__pyx_v_active_orders);
  __Pyx_XDECREF(__pyx_v_current_price);
  __Pyx_XDECREF(__pyx_v_found_orders);
  __Pyx_XDECREF(__pyx_v_found_hashes);
  __Pyx_XDECREF(__pyx_v_active_asks);
  __Pyx_XDECREF(__pyx_v_ask_keys);
  __Pyx_XDECREF(__pyx_v_order_hash);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_active_bids);
  __Pyx_XDECREF(__pyx_v_bid_keys);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_55generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1043
 *         return found_orders
 * 
 *     async def submit_market_order(self,             # <<<<<<<<<<<<<<
 *                                   trading_pair: str,
 *                                   trade_type: TradeType,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order = {"submit_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_trade_type = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_market_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_trade_type,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_trade_type,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trade_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_market_order", 1, 4, 4, 1); __PYX_ERR(0, 1043, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_market_order", 1, 4, 4, 2); __PYX_ERR(0, 1043, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_market_order", 1, 4, 4, 3); __PYX_ERR(0, 1043, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "submit_market_order") < 0)) __PYX_ERR(0, 1043, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_trade_type = values[1];
    __pyx_v_amount = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_market_order", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1043, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.submit_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1044, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_53submit_market_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_trade_type, __pyx_v_amount, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_53submit_market_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("submit_market_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1043, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_trade_type = __pyx_v_trade_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trade_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trade_type);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_55generator11, __pyx_codeobj__22, (PyObject *) __pyx_cur_scope, __pyx_n_s_submit_market_order, __pyx_n_s_BambooRelayExchange_submit_marke, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.submit_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_55generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_market_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_await;
    case 2: goto __pyx_L33_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1043, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1048
 *                                   amount: Decimal,
 *                                   price: Decimal) -> Tuple[Decimal, Decimal, str, int, bool]:
 *         if trade_type is not TradeType.BUY and trade_type is not TradeType.SELL:             # <<<<<<<<<<<<<<
 *             raise ValueError("Invalid trade_type. Aborting.")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BUY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_trade_type != __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SELL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_trade_type != __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1049
 *                                   price: Decimal) -> Tuple[Decimal, Decimal, str, int, bool]:
 *         if trade_type is not TradeType.BUY and trade_type is not TradeType.SELL:
 *             raise ValueError("Invalid trade_type. Aborting.")             # <<<<<<<<<<<<<<
 * 
 *         valid_orders = self.c_get_orders_for_amount_price(trading_pair=trading_pair,
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1049, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1048
 *                                   amount: Decimal,
 *                                   price: Decimal) -> Tuple[Decimal, Decimal, str, int, bool]:
 *         if trade_type is not TradeType.BUY and trade_type is not TradeType.SELL:             # <<<<<<<<<<<<<<
 *             raise ValueError("Invalid trade_type. Aborting.")
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1054
 *                                                           trade_type=trade_type,
 *                                                           amount=amount,
 *                                                           price=Decimal(price))             # <<<<<<<<<<<<<<
 * 
 *         if len(valid_orders) == 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_price};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1051
 *             raise ValueError("Invalid trade_type. Aborting.")
 * 
 *         valid_orders = self.c_get_orders_for_amount_price(trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                                           trade_type=trade_type,
 *                                                           amount=amount,
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_orders_for_amount_price(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_trade_type, __pyx_cur_scope->__pyx_v_amount, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_valid_orders = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1056
 *                                                           price=Decimal(price))
 * 
 *         if len(valid_orders) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No valid orders found for amount {amount} and price {price}.")
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_valid_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1056, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_valid_orders); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1056, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_8 == 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1057
 * 
 *         if len(valid_orders) == 0:
 *             raise ValueError(f"No valid orders found for amount {amount} and price {price}.")             # <<<<<<<<<<<<<<
 * 
 *         # Skip API use orderbook
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_valid_orders_found_for_amount);
    __pyx_t_8 += 33;
    __Pyx_GIVEREF(__pyx_kp_u_No_valid_orders_found_for_amount);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_No_valid_orders_found_for_amount);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_and_price);
    __pyx_t_8 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_and_price);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_and_price);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__15);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1057, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1056
 *                                                           price=Decimal(price))
 * 
 *         if len(valid_orders) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No valid orders found for amount {amount} and price {price}.")
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1060
 * 
 *         # Skip API use orderbook
 *         total_base_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         total_quote_token_amount = s_decimal_0
 *         taker_asset_fill_amount = s_decimal_0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_total_base_token_amount = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1061
 *         # Skip API use orderbook
 *         total_base_token_amount = s_decimal_0
 *         total_quote_token_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         taker_asset_fill_amount = s_decimal_0
 *         calculated_price = s_decimal_0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_total_quote_token_amount = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1062
 *         total_base_token_amount = s_decimal_0
 *         total_quote_token_amount = s_decimal_0
 *         taker_asset_fill_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         calculated_price = s_decimal_0
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_taker_asset_fill_amount = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1063
 *         total_quote_token_amount = s_decimal_0
 *         taker_asset_fill_amount = s_decimal_0
 *         calculated_price = s_decimal_0             # <<<<<<<<<<<<<<
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_calculated_price = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1064
 *         taker_asset_fill_amount = s_decimal_0
 *         calculated_price = s_decimal_0
 *         trading_pair_rules = self.trading_rules.get(trading_pair)             # <<<<<<<<<<<<<<
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_trading_rules); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_trading_pair};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_trading_pair_rules = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1065
 *         calculated_price = s_decimal_0
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment             # <<<<<<<<<<<<<<
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 *         max_base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_pair_rules, __pyx_n_s_min_base_amount_increment); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_base_asset_increment = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1066
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))             # <<<<<<<<<<<<<<
 *         max_base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_math); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ceil); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_math); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_log10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Float(__pyx_cur_scope->__pyx_v_base_asset_increment); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_t_11 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_base_asset_decimals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1067
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 *         max_base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")             # <<<<<<<<<<<<<<
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_amount};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_base_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_max_base_amount_with_decimals = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1068
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 *         max_base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment             # <<<<<<<<<<<<<<
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         is_coordinated = False
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_pair_rules, __pyx_n_s_min_quote_amount_increment); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_quote_asset_increment = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1069
 *         max_base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))             # <<<<<<<<<<<<<<
 *         is_coordinated = False
 *         tx_hash = ""
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ceil); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_math); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_log10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Float(__pyx_cur_scope->__pyx_v_quote_asset_increment); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_t_11 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_2};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_quote_asset_decimals = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1070
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         is_coordinated = False             # <<<<<<<<<<<<<<
 *         tx_hash = ""
 *         protocol_fee = s_decimal_0
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_cur_scope->__pyx_v_is_coordinated = Py_False;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1071
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         is_coordinated = False
 *         tx_hash = ""             # <<<<<<<<<<<<<<
 *         protocol_fee = s_decimal_0
 * 
 */
  __Pyx_INCREF(__pyx_kp_u__13);
  __Pyx_GIVEREF(__pyx_kp_u__13);
  __pyx_cur_scope->__pyx_v_tx_hash = __pyx_kp_u__13;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1072
 *         is_coordinated = False
 *         tx_hash = ""
 *         protocol_fee = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         # Single fill logic
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_protocol_fee = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1075
 * 
 *         # Single fill logic
 *         if len(valid_orders) == 1:             # <<<<<<<<<<<<<<
 *             apiOrder = valid_orders[0]
 *             signed_market_order = apiOrder["zeroExOrder"]
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_valid_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1075, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_valid_orders); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_8 == 1) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1076
 *         # Single fill logic
 *         if len(valid_orders) == 1:
 *             apiOrder = valid_orders[0]             # <<<<<<<<<<<<<<
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signature = signed_market_order["signature"]
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_valid_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1076, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_valid_orders, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_apiOrder = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1077
 *         if len(valid_orders) == 1:
 *             apiOrder = valid_orders[0]
 *             signed_market_order = apiOrder["zeroExOrder"]             # <<<<<<<<<<<<<<
 *             signature = signed_market_order["signature"]
 *             is_coordinated = apiOrder["isCoordinated"]
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_zeroExOrder); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_signed_market_order = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1078
 *             apiOrder = valid_orders[0]
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signature = signed_market_order["signature"]             # <<<<<<<<<<<<<<
 *             is_coordinated = apiOrder["isCoordinated"]
 *             order = jsdict_order_to_struct(signed_market_order)
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_signed_market_order, __pyx_n_u_signature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_signature = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1079
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signature = signed_market_order["signature"]
 *             is_coordinated = apiOrder["isCoordinated"]             # <<<<<<<<<<<<<<
 *             order = jsdict_order_to_struct(signed_market_order)
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_isCoordinated); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_is_coordinated);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_is_coordinated, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1080
 *             signature = signed_market_order["signature"]
 *             is_coordinated = apiOrder["isCoordinated"]
 *             order = jsdict_order_to_struct(signed_market_order)             # <<<<<<<<<<<<<<
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_signed_market_order};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_order = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1081
 *             is_coordinated = apiOrder["isCoordinated"]
 *             order = jsdict_order_to_struct(signed_market_order)
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])             # <<<<<<<<<<<<<<
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])
 *             calculated_price = remaining_base_token_amount / remaining_quote_token_amount
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_remainingBaseTokenAmount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_remaining_base_token_amount = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1082
 *             order = jsdict_order_to_struct(signed_market_order)
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])             # <<<<<<<<<<<<<<
 *             calculated_price = remaining_base_token_amount / remaining_quote_token_amount
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_remainingQuoteTokenAmount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1082, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_remaining_quote_token_amount = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1083
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])
 *             calculated_price = remaining_base_token_amount / remaining_quote_token_amount             # <<<<<<<<<<<<<<
 * 
 *             if not price.is_nan() and calculated_price > price:
 */
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_cur_scope->__pyx_v_remaining_quote_token_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_calculated_price);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1085
 *             calculated_price = remaining_base_token_amount / remaining_quote_token_amount
 * 
 *             if not price.is_nan() and calculated_price > price:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                                  f"worse than requested price {price}")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_price, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_2, };
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = ((!__pyx_t_4) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_cur_scope->__pyx_v_price, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __pyx_t_5;
    __pyx_L10_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1086
 * 
 *             if not price.is_nan() and calculated_price > price:
 *                 raise ValueError(f"Incorrect values for market order, price {calculated_price} is "             # <<<<<<<<<<<<<<
 *                                  f"worse than requested price {price}")
 * 
 */
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = 0;
      __pyx_t_9 = 127;
      __Pyx_INCREF(__pyx_kp_u_Incorrect_values_for_market_orde);
      __pyx_t_8 += 41;
      __Pyx_GIVEREF(__pyx_kp_u_Incorrect_values_for_market_orde);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Incorrect_values_for_market_orde);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_worse_than_requested_price);
      __pyx_t_8 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_is_worse_than_requested_price);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_is_worse_than_requested_price);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1087
 *             if not price.is_nan() and calculated_price > price:
 *                 raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                                  f"worse than requested price {price}")             # <<<<<<<<<<<<<<
 * 
 *             # Sanity check on rates returned
 */
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1086
 * 
 *             if not price.is_nan() and calculated_price > price:
 *                 raise ValueError(f"Incorrect values for market order, price {calculated_price} is "             # <<<<<<<<<<<<<<
 *                                  f"worse than requested price {price}")
 * 
 */
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_6, 4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1086, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1085
 *             calculated_price = remaining_base_token_amount / remaining_quote_token_amount
 * 
 *             if not price.is_nan() and calculated_price > price:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                                  f"worse than requested price {price}")
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1090
 * 
 *             # Sanity check on rates returned
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_BUY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_trade_type == __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_1 != 0);
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1091
 *             # Sanity check on rates returned
 *             if trade_type is TradeType.BUY:
 *                 if amount > remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1091, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1092
 *             if trade_type is TradeType.BUY:
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount             # <<<<<<<<<<<<<<
 *                     total_quote_token_amount = remaining_quote_token_amount
 *                     taker_asset_fill_amount = (remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1093
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount             # <<<<<<<<<<<<<<
 *                     taker_asset_fill_amount = (remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *                 else:
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_quote_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1094
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 *                     taker_asset_fill_amount = (remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)             # <<<<<<<<<<<<<<
 *                 else:
 *                     total_base_token_amount = amount
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_quote_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_11};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1094, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_rounding, __pyx_t_11) < 0) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1091
 *             # Sanity check on rates returned
 *             if trade_type is TradeType.BUY:
 *                 if amount > remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 */
        goto __pyx_L13;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1096
 *                     taker_asset_fill_amount = (remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *                 else:
 *                     total_base_token_amount = amount             # <<<<<<<<<<<<<<
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = (total_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1097
 *                 else:
 *                     total_base_token_amount = amount
 *                     total_quote_token_amount = amount * calculated_price             # <<<<<<<<<<<<<<
 *                     taker_asset_fill_amount = (total_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *             else:
 */
        __pyx_t_11 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_calculated_price); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_quote_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1098
 *                     total_base_token_amount = amount
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = (total_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)             # <<<<<<<<<<<<<<
 *             else:
 *                 if amount > remaining_base_token_amount:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_quote_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1098, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_rounding, __pyx_t_2) < 0) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
      }
      __pyx_L13:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1090
 * 
 *             # Sanity check on rates returned
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount
 */
      goto __pyx_L12;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1100
 *                     taker_asset_fill_amount = (total_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *             else:
 *                 if amount > remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 */
    /*else*/ {
      __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1101
 *             else:
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount             # <<<<<<<<<<<<<<
 *                     total_quote_token_amount = remaining_quote_token_amount
 *                     taker_asset_fill_amount = (remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1102
 *                 if amount > remaining_base_token_amount:
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount             # <<<<<<<<<<<<<<
 *                     taker_asset_fill_amount = (remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *                 else:
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_quote_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1103
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 *                     taker_asset_fill_amount = (remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)             # <<<<<<<<<<<<<<
 *                 else:
 *                     total_base_token_amount = amount
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_base_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_rounding, __pyx_t_3) < 0) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1100
 *                     taker_asset_fill_amount = (total_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *             else:
 *                 if amount > remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                     total_base_token_amount = remaining_base_token_amount
 *                     total_quote_token_amount = remaining_quote_token_amount
 */
        goto __pyx_L14;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1105
 *                     taker_asset_fill_amount = (remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR)
 *                 else:
 *                     total_base_token_amount = amount             # <<<<<<<<<<<<<<
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)
 */
      /*else*/ {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1106
 *                 else:
 *                     total_base_token_amount = amount
 *                     total_quote_token_amount = amount * calculated_price             # <<<<<<<<<<<<<<
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)
 *             if amount >= remaining_base_token_amount:
 */
        __pyx_t_3 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_calculated_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_quote_token_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1107
 *                     total_base_token_amount = amount
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)             # <<<<<<<<<<<<<<
 *             if amount >= remaining_base_token_amount:
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_max_base_amount_with_decimals, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_rounding, __pyx_t_2) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
      }
      __pyx_L14:;
    }
    __pyx_L12:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1108
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)
 *             if amount >= remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1109
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)
 *             if amount >= remaining_base_token_amount:
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])             # <<<<<<<<<<<<<<
 * 
 *             if is_coordinated:
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_filled_order_hashes == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 1109, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_orderHash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_self->_filled_order_hashes, __pyx_t_2); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1108
 *                     total_quote_token_amount = amount * calculated_price
 *                     taker_asset_fill_amount = max_base_amount_with_decimals.to_integral_exact(rounding=ROUND_FLOOR)
 *             if amount >= remaining_base_token_amount:             # <<<<<<<<<<<<<<
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1111
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 *             if is_coordinated:             # <<<<<<<<<<<<<<
 *                 tx_hash, protocol_fee = await self._coordinator.fill_order(order, taker_asset_fill_amount, signature)
 *             else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_coordinated); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1111, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1112
 * 
 *             if is_coordinated:
 *                 tx_hash, protocol_fee = await self._coordinator.fill_order(order, taker_asset_fill_amount, signature)             # <<<<<<<<<<<<<<
 *             else:
 *                 tx_hash, protocol_fee = self._exchange.fill_order(order, taker_asset_fill_amount, signature)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_coordinator, __pyx_n_s_fill_order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_order, __pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_cur_scope->__pyx_v_signature};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L17_resume_from_await:;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
      } else {
        __pyx_t_2 = NULL;
        if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1112, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
        index = 0; __pyx_t_6 = __pyx_t_14(__pyx_t_11); if (unlikely(!__pyx_t_6)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_3 = __pyx_t_14(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_11), 2) < 0) __PYX_ERR(0, 1112, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L19_unpacking_done;
        __pyx_L18_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1112, __pyx_L1_error)
        __pyx_L19_unpacking_done:;
      }
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tx_hash);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_protocol_fee);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_protocol_fee, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1111
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 *             if is_coordinated:             # <<<<<<<<<<<<<<
 *                 tx_hash, protocol_fee = await self._coordinator.fill_order(order, taker_asset_fill_amount, signature)
 *             else:
 */
      goto __pyx_L16;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1114
 *                 tx_hash, protocol_fee = await self._coordinator.fill_order(order, taker_asset_fill_amount, signature)
 *             else:
 *                 tx_hash, protocol_fee = self._exchange.fill_order(order, taker_asset_fill_amount, signature)             # <<<<<<<<<<<<<<
 * 
 *             return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_exchange, __pyx_n_s_fill_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_order, __pyx_cur_scope->__pyx_v_taker_asset_fill_amount, __pyx_cur_scope->__pyx_v_signature};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1114, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
        index = 0; __pyx_t_3 = __pyx_t_14(__pyx_t_11); if (unlikely(!__pyx_t_3)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 1; __pyx_t_6 = __pyx_t_14(__pyx_t_11); if (unlikely(!__pyx_t_6)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_11), 2) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L21_unpacking_done;
        __pyx_L20_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1114, __pyx_L1_error)
        __pyx_L21_unpacking_done:;
      }
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tx_hash);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_protocol_fee);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_protocol_fee, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
    }
    __pyx_L16:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1116
 *                 tx_hash, protocol_fee = self._exchange.fill_order(order, taker_asset_fill_amount, signature)
 * 
 *             return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated             # <<<<<<<<<<<<<<
 * 
 *         taker_asset_fill_amounts: List[Decimal] = []
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_total_base_token_amount);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_calculated_price);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_calculated_price);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_calculated_price);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tx_hash);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tx_hash);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_tx_hash);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_protocol_fee);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_protocol_fee);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_v_protocol_fee);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_coordinated);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_coordinated);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_cur_scope->__pyx_v_is_coordinated);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1075
 * 
 *         # Single fill logic
 *         if len(valid_orders) == 1:             # <<<<<<<<<<<<<<
 *             apiOrder = valid_orders[0]
 *             signed_market_order = apiOrder["zeroExOrder"]
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1118
 *             return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *         taker_asset_fill_amounts: List[Decimal] = []             # <<<<<<<<<<<<<<
 *         signatures: List[str] = []
 *         orders: List[ZeroExOrder] = []
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_taker_asset_fill_amounts = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1119
 * 
 *         taker_asset_fill_amounts: List[Decimal] = []
 *         signatures: List[str] = []             # <<<<<<<<<<<<<<
 *         orders: List[ZeroExOrder] = []
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_signatures = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1120
 *         taker_asset_fill_amounts: List[Decimal] = []
 *         signatures: List[str] = []
 *         orders: List[ZeroExOrder] = []             # <<<<<<<<<<<<<<
 * 
 *         # Else it's a multi fill
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_orders = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1123
 * 
 *         # Else it's a multi fill
 *         for apiOrder in valid_orders:             # <<<<<<<<<<<<<<
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signatures.append(signed_market_order["signature"])
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_valid_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1123, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_valid_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1123, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_apiOrder);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1124
 *         # Else it's a multi fill
 *         for apiOrder in valid_orders:
 *             signed_market_order = apiOrder["zeroExOrder"]             # <<<<<<<<<<<<<<
 *             signatures.append(signed_market_order["signature"])
 *             orders.append(jsdict_order_to_struct(signed_market_order))
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_zeroExOrder); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_signed_market_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_signed_market_order, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1125
 *         for apiOrder in valid_orders:
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signatures.append(signed_market_order["signature"])             # <<<<<<<<<<<<<<
 *             orders.append(jsdict_order_to_struct(signed_market_order))
 *             is_coordinated = is_coordinated or apiOrder["isCoordinated"]
 */
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_signed_market_order, __pyx_n_u_signature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_signatures, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1126
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signatures.append(signed_market_order["signature"])
 *             orders.append(jsdict_order_to_struct(signed_market_order))             # <<<<<<<<<<<<<<
 *             is_coordinated = is_coordinated or apiOrder["isCoordinated"]
 *             order = jsdict_order_to_struct(signed_market_order)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_signed_market_order};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_orders, __pyx_t_6); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1127
 *             signatures.append(signed_market_order["signature"])
 *             orders.append(jsdict_order_to_struct(signed_market_order))
 *             is_coordinated = is_coordinated or apiOrder["isCoordinated"]             # <<<<<<<<<<<<<<
 *             order = jsdict_order_to_struct(signed_market_order)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_coordinated); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
    if (!__pyx_t_5) {
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_coordinated);
      __pyx_t_6 = __pyx_cur_scope->__pyx_v_is_coordinated;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_isCoordinated); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_6 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_L24_bool_binop_done:;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_is_coordinated);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_is_coordinated, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1128
 *             orders.append(jsdict_order_to_struct(signed_market_order))
 *             is_coordinated = is_coordinated or apiOrder["isCoordinated"]
 *             order = jsdict_order_to_struct(signed_market_order)             # <<<<<<<<<<<<<<
 * 
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_signed_market_order};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1130
 *             order = jsdict_order_to_struct(signed_market_order)
 * 
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])             # <<<<<<<<<<<<<<
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_remainingBaseTokenAmount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_11};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1131
 * 
 *             remaining_base_token_amount = Decimal(apiOrder["remainingBaseTokenAmount"])
 *             remaining_quote_token_amount = Decimal(apiOrder["remainingQuoteTokenAmount"])             # <<<<<<<<<<<<<<
 * 
 *             # This would overfill the last order
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_remainingQuoteTokenAmount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_11};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1134
 * 
 *             # This would overfill the last order
 *             if remaining_base_token_amount + total_base_token_amount > amount:             # <<<<<<<<<<<<<<
 *                 order_price = remaining_quote_token_amount / remaining_base_token_amount
 *                 remaining_base_token_amount = amount - total_base_token_amount
 */
    __pyx_t_6 = PyNumber_Add(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_cur_scope->__pyx_v_total_base_token_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_cur_scope->__pyx_v_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1135
 *             # This would overfill the last order
 *             if remaining_base_token_amount + total_base_token_amount > amount:
 *                 order_price = remaining_quote_token_amount / remaining_base_token_amount             # <<<<<<<<<<<<<<
 *                 remaining_base_token_amount = amount - total_base_token_amount
 *                 remaining_quote_token_amount = remaining_base_token_amount * order_price
 */
      __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_price);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_price, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1136
 *             if remaining_base_token_amount + total_base_token_amount > amount:
 *                 order_price = remaining_quote_token_amount / remaining_base_token_amount
 *                 remaining_base_token_amount = amount - total_base_token_amount             # <<<<<<<<<<<<<<
 *                 remaining_quote_token_amount = remaining_base_token_amount * order_price
 *             else:
 */
      __pyx_t_3 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_total_base_token_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_remaining_base_token_amount);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1137
 *                 order_price = remaining_quote_token_amount / remaining_base_token_amount
 *                 remaining_base_token_amount = amount - total_base_token_amount
 *                 remaining_quote_token_amount = remaining_base_token_amount * order_price             # <<<<<<<<<<<<<<
 *             else:
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 */
      __pyx_t_3 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_cur_scope->__pyx_v_order_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1134
 * 
 *             # This would overfill the last order
 *             if remaining_base_token_amount + total_base_token_amount > amount:             # <<<<<<<<<<<<<<
 *                 order_price = remaining_quote_token_amount / remaining_base_token_amount
 *                 remaining_base_token_amount = amount - total_base_token_amount
 */
      goto __pyx_L26;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1139
 *                 remaining_quote_token_amount = remaining_base_token_amount * order_price
 *             else:
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])             # <<<<<<<<<<<<<<
 * 
 *             if trade_type is TradeType.BUY:
 */
    /*else*/ {
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_filled_order_hashes == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 1139, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_apiOrder, __pyx_n_u_orderHash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_self->_filled_order_hashes, __pyx_t_3); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1139, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L26:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1141
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 taker_asset_fill_amounts.append((remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_cur_scope->__pyx_v_trade_type == __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = (__pyx_t_5 != 0);
    if (__pyx_t_1) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1142
 * 
 *             if trade_type is TradeType.BUY:
 *                 taker_asset_fill_amounts.append((remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))             # <<<<<<<<<<<<<<
 *             else:
 *                 taker_asset_fill_amounts.append((remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_quote_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_remaining_quote_token_amount, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_rounding, __pyx_t_10) < 0) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_taker_asset_fill_amounts, __pyx_t_10); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1141
 *                 self._filled_order_hashes.append(apiOrder["orderHash"])
 * 
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 taker_asset_fill_amounts.append((remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))
 *             else:
 */
      goto __pyx_L27;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1144
 *                 taker_asset_fill_amounts.append((remaining_quote_token_amount * Decimal(f"1e{quote_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))
 *             else:
 *                 taker_asset_fill_amounts.append((remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))             # <<<<<<<<<<<<<<
 * 
 *             total_base_token_amount += remaining_base_token_amount
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_base_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_remaining_base_token_amount, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_to_integral_exact); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_rounding, __pyx_t_11) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_taker_asset_fill_amounts, __pyx_t_11); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_L27:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1146
 *                 taker_asset_fill_amounts.append((remaining_base_token_amount * Decimal(f"1e{base_asset_decimals}")).to_integral_exact(rounding=ROUND_FLOOR))
 * 
 *             total_base_token_amount += remaining_base_token_amount             # <<<<<<<<<<<<<<
 *             total_quote_token_amount += remaining_quote_token_amount
 * 
 */
    __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_remaining_base_token_amount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1147
 * 
 *             total_base_token_amount += remaining_base_token_amount
 *             total_quote_token_amount += remaining_quote_token_amount             # <<<<<<<<<<<<<<
 * 
 *             if total_base_token_amount >= amount:
 */
    __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_cur_scope->__pyx_v_remaining_quote_token_amount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_total_quote_token_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_total_quote_token_amount, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1149
 *             total_quote_token_amount += remaining_quote_token_amount
 * 
 *             if total_base_token_amount >= amount:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_11 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_amount, Py_GE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_1) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1150
 * 
 *             if total_base_token_amount >= amount:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         calculated_price = total_base_token_amount / total_quote_token_amount
 */
      goto __pyx_L23_break;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1149
 *             total_quote_token_amount += remaining_quote_token_amount
 * 
 *             if total_base_token_amount >= amount:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1123
 * 
 *         # Else it's a multi fill
 *         for apiOrder in valid_orders:             # <<<<<<<<<<<<<<
 *             signed_market_order = apiOrder["zeroExOrder"]
 *             signatures.append(signed_market_order["signature"])
 */
  }
  __pyx_L23_break:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1152
 *                 break
 * 
 *         calculated_price = total_base_token_amount / total_quote_token_amount             # <<<<<<<<<<<<<<
 * 
 *         # Sanity check on rates returned
 */
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_total_quote_token_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_calculated_price);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1155
 * 
 *         # Sanity check on rates returned
 *         if total_base_token_amount > amount:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "
 *                              f"is greater than requested amount {amount}")
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_cur_scope->__pyx_v_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1156
 *         # Sanity check on rates returned
 *         if total_base_token_amount > amount:
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "             # <<<<<<<<<<<<<<
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_API_returned_incorrect_values_fo);
    __pyx_t_8 += 67;
    __Pyx_GIVEREF(__pyx_kp_u_API_returned_incorrect_values_fo);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_API_returned_incorrect_values_fo);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_total_base_token_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_greater_than_requested_amoun);
    __pyx_t_8 += 34;
    __Pyx_GIVEREF(__pyx_kp_u_is_greater_than_requested_amoun);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_is_greater_than_requested_amoun);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1157
 *         if total_base_token_amount > amount:
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "
 *                              f"is greater than requested amount {amount}")             # <<<<<<<<<<<<<<
 *         elif not price.is_nan() and calculated_price > price:
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 */
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1156
 *         # Sanity check on rates returned
 *         if total_base_token_amount > amount:
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "             # <<<<<<<<<<<<<<
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:
 */
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1156, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1155
 * 
 *         # Sanity check on rates returned
 *         if total_base_token_amount > amount:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "
 *                              f"is greater than requested amount {amount}")
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1158
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                              f"worse than requested price {price}")
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_price, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_5) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L30_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_cur_scope->__pyx_v_price, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L30_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1159
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "             # <<<<<<<<<<<<<<
 *                              f"worse than requested price {price}")
 * 
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Incorrect_values_for_market_orde);
    __pyx_t_8 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_Incorrect_values_for_market_orde);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Incorrect_values_for_market_orde);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_calculated_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_worse_than_requested_price);
    __pyx_t_8 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_is_worse_than_requested_price);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_is_worse_than_requested_price);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1160
 *         elif not price.is_nan() and calculated_price > price:
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                              f"worse than requested price {price}")             # <<<<<<<<<<<<<<
 * 
 *         if is_coordinated:
 */
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1159
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "             # <<<<<<<<<<<<<<
 *                              f"worse than requested price {price}")
 * 
 */
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1159, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1158
 *             raise ValueError(f"API returned incorrect values for market order, total maker amount {total_base_token_amount} "
 *                              f"is greater than requested amount {amount}")
 *         elif not price.is_nan() and calculated_price > price:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Incorrect values for market order, price {calculated_price} is "
 *                              f"worse than requested price {price}")
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1162
 *                              f"worse than requested price {price}")
 * 
 *         if is_coordinated:             # <<<<<<<<<<<<<<
 *             tx_hash, protocol_fee = await self._coordinator.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_coordinated); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1162, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1163
 * 
 *         if is_coordinated:
 *             tx_hash, protocol_fee = await self._coordinator.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)             # <<<<<<<<<<<<<<
 *         else:
 *             tx_hash, protocol_fee = self._exchange.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_coordinator, __pyx_n_s_batch_fill_orders); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_orders, __pyx_cur_scope->__pyx_v_taker_asset_fill_amounts, __pyx_cur_scope->__pyx_v_signatures};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L33_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_2 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1163, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_11 = __pyx_t_14(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L34_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_3 = __pyx_t_14(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L34_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1163, __pyx_L1_error)
      __pyx_t_14 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L35_unpacking_done;
      __pyx_L34_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1163, __pyx_L1_error)
      __pyx_L35_unpacking_done:;
    }
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tx_hash);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_protocol_fee);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_protocol_fee, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1162
 *                              f"worse than requested price {price}")
 * 
 *         if is_coordinated:             # <<<<<<<<<<<<<<
 *             tx_hash, protocol_fee = await self._coordinator.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)
 *         else:
 */
    goto __pyx_L32;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1165
 *             tx_hash, protocol_fee = await self._coordinator.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)
 *         else:
 *             tx_hash, protocol_fee = self._exchange.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)             # <<<<<<<<<<<<<<
 * 
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_exchange, __pyx_n_s_batch_fill_orders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_orders, __pyx_cur_scope->__pyx_v_taker_asset_fill_amounts, __pyx_cur_scope->__pyx_v_signatures};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 3+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1165, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_3 = __pyx_t_14(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L36_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_11 = __pyx_t_14(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L36_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1165, __pyx_L1_error)
      __pyx_t_14 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L37_unpacking_done;
      __pyx_L36_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1165, __pyx_L1_error)
      __pyx_L37_unpacking_done:;
    }
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tx_hash);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_protocol_fee);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_protocol_fee, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;
  }
  __pyx_L32:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1167
 *             tx_hash, protocol_fee = self._exchange.batch_fill_orders(orders, taker_asset_fill_amounts, signatures)
 * 
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated             # <<<<<<<<<<<<<<
 * 
 *     async def submit_limit_order(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_total_base_token_amount);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_total_base_token_amount);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_calculated_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_calculated_price);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_calculated_price);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tx_hash);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tx_hash);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_tx_hash);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_protocol_fee);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_protocol_fee);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_v_protocol_fee);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_coordinated);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_coordinated);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_cur_scope->__pyx_v_is_coordinated);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1043
 *         return found_orders
 * 
 *     async def submit_market_order(self,             # <<<<<<<<<<<<<<
 *                                   trading_pair: str,
 *                                   trade_type: TradeType,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("submit_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_58generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1169
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *     async def submit_limit_order(self,             # <<<<<<<<<<<<<<
 *                                  trading_pair: str,
 *                                  trade_type: TradeType,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order = {"submit_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_trade_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_is_coordinated = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_expires = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_limit_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_trade_type,&__pyx_n_s_is_coordinated,&__pyx_n_s_amount,&__pyx_n_s_price,&__pyx_n_s_expires,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_trade_type,&__pyx_n_s_is_coordinated,&__pyx_n_s_amount,&__pyx_n_s_price,&__pyx_n_s_expires,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trade_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, 1); __PYX_ERR(0, 1169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_coordinated)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, 2); __PYX_ERR(0, 1169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, 3); __PYX_ERR(0, 1169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, 4); __PYX_ERR(0, 1169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_expires)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, 5); __PYX_ERR(0, 1169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "submit_limit_order") < 0)) __PYX_ERR(0, 1169, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_trade_type = values[1];
    __pyx_v_is_coordinated = values[2];
    __pyx_v_amount = values[3];
    __pyx_v_price = values[4];
    __pyx_v_expires = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_limit_order", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 1169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.submit_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1170, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_56submit_limit_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_trade_type, __pyx_v_is_coordinated, __pyx_v_amount, __pyx_v_price, __pyx_v_expires);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_56submit_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_trade_type, CYTHON_UNUSED PyObject *__pyx_v_is_coordinated, PyObject *__pyx_v_amount, PyObject *__pyx_v_price, PyObject *__pyx_v_expires) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("submit_limit_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1169, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_trade_type = __pyx_v_trade_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trade_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trade_type);
  __pyx_cur_scope->__pyx_v_is_coordinated = __pyx_v_is_coordinated;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_coordinated);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_coordinated);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  __pyx_cur_scope->__pyx_v_expires = __pyx_v_expires;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_expires);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_expires);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_58generator12, __pyx_codeobj__24, (PyObject *) __pyx_cur_scope, __pyx_n_s_submit_limit_order, __pyx_n_s_BambooRelayExchange_submit_limit, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.submit_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_58generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int64_t __pyx_t_15;
  double __pyx_t_16;
  int __pyx_t_17;
  char const *__pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_limit_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L12_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1169, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1177
 *                                  expires: int) -> Tuple[str, ZeroExOrder]:
 *         # It's faster to generate fresh orders client-side
 *         latest_salt = self._latest_salt             # <<<<<<<<<<<<<<
 * 
 *         if latest_salt < 0:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_cur_scope->__pyx_v_self->_latest_salt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_latest_salt = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1179
 *         latest_salt = self._latest_salt
 * 
 *         if latest_salt < 0:             # <<<<<<<<<<<<<<
 *             latest_salt = int(math.floor(time.time()))
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_latest_salt, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1180
 * 
 *         if latest_salt < 0:
 *             latest_salt = int(math.floor(time.time()))             # <<<<<<<<<<<<<<
 *         else:
 *             latest_salt = latest_salt + 1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_latest_salt);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_latest_salt, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1179
 *         latest_salt = self._latest_salt
 * 
 *         if latest_salt < 0:             # <<<<<<<<<<<<<<
 *             latest_salt = int(math.floor(time.time()))
 *         else:
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1182
 *             latest_salt = int(math.floor(time.time()))
 *         else:
 *             latest_salt = latest_salt + 1             # <<<<<<<<<<<<<<
 * 
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_latest_salt, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_latest_salt);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_latest_salt, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1184
 *             latest_salt = latest_salt + 1
 * 
 *         trading_pair_rules = self.trading_rules.get(trading_pair)             # <<<<<<<<<<<<<<
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_trading_rules); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_trading_pair};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_trading_pair_rules = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1185
 * 
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment             # <<<<<<<<<<<<<<
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 *         base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_pair_rules, __pyx_n_s_min_base_amount_increment); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_base_asset_increment = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1186
 *         trading_pair_rules = self.trading_rules.get(trading_pair)
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))             # <<<<<<<<<<<<<<
 *         base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ceil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_math); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_log10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Float(__pyx_cur_scope->__pyx_v_base_asset_increment); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_base_asset_decimals = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1187
 *         base_asset_increment = trading_pair_rules.min_base_amount_increment
 *         base_asset_decimals = -int(math.ceil(math.log10(float(base_asset_increment))))
 *         base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")             # <<<<<<<<<<<<<<
 * 
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_amount};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_base_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_base_amount_with_decimals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1189
 *         base_amount_with_decimals = Decimal(amount) * Decimal(f"1e{base_asset_decimals}")
 * 
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment             # <<<<<<<<<<<<<<
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         quote_amount = amount * price
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_pair_rules, __pyx_n_s_min_quote_amount_increment); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_quote_asset_increment = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1190
 * 
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))             # <<<<<<<<<<<<<<
 *         quote_amount = amount * price
 *         quote_amount_with_decimals = Decimal(quote_amount) * Decimal(f"1e{quote_asset_decimals}")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ceil); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_math); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_log10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Float(__pyx_cur_scope->__pyx_v_quote_asset_increment); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Negative(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_quote_asset_decimals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1191
 *         quote_asset_increment = trading_pair_rules.min_quote_amount_increment
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         quote_amount = amount * price             # <<<<<<<<<<<<<<
 *         quote_amount_with_decimals = Decimal(quote_amount) * Decimal(f"1e{quote_asset_decimals}")
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_quote_amount = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1192
 *         quote_asset_decimals = -int(math.ceil(math.log10(float(quote_asset_increment))))
 *         quote_amount = amount * price
 *         quote_amount_with_decimals = Decimal(quote_amount) * Decimal(f"1e{quote_asset_decimals}")             # <<<<<<<<<<<<<<
 * 
 *         maker_asset_amount = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_quote_amount};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_quote_asset_decimals, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_quote_amount_with_decimals = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1194
 *         quote_amount_with_decimals = Decimal(quote_amount) * Decimal(f"1e{quote_asset_decimals}")
 * 
 *         maker_asset_amount = 0             # <<<<<<<<<<<<<<
 *         taker_asset_amount = 0
 *         maker_asset_data = ""
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_maker_asset_amount = __pyx_int_0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1195
 * 
 *         maker_asset_amount = 0
 *         taker_asset_amount = 0             # <<<<<<<<<<<<<<
 *         maker_asset_data = ""
 *         taker_asset_data = ""
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_cur_scope->__pyx_v_taker_asset_amount = __pyx_int_0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1196
 *         maker_asset_amount = 0
 *         taker_asset_amount = 0
 *         maker_asset_data = ""             # <<<<<<<<<<<<<<
 *         taker_asset_data = ""
 * 
 */
  __Pyx_INCREF(__pyx_kp_u__13);
  __Pyx_GIVEREF(__pyx_kp_u__13);
  __pyx_cur_scope->__pyx_v_maker_asset_data = __pyx_kp_u__13;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1197
 *         taker_asset_amount = 0
 *         maker_asset_data = ""
 *         taker_asset_data = ""             # <<<<<<<<<<<<<<
 * 
 *         pair_split = trading_pair.split("-")
 */
  __Pyx_INCREF(__pyx_kp_u__13);
  __Pyx_GIVEREF(__pyx_kp_u__13);
  __pyx_cur_scope->__pyx_v_taker_asset_data = __pyx_kp_u__13;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1199
 *         taker_asset_data = ""
 * 
 *         pair_split = trading_pair.split("-")             # <<<<<<<<<<<<<<
 * 
 *         tokens = self._wallet.erc20_tokens
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_trading_pair == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
    __PYX_ERR(0, 1199, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_Split(__pyx_cur_scope->__pyx_v_trading_pair, __pyx_kp_u__5, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_pair_split = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1201
 *         pair_split = trading_pair.split("-")
 * 
 *         tokens = self._wallet.erc20_tokens             # <<<<<<<<<<<<<<
 *         base_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[0]].address.lower())
 *         quote_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[1]].address.lower())
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_erc20_tokens); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_tokens = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1202
 * 
 *         tokens = self._wallet.erc20_tokens
 *         base_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[0]].address.lower())             # <<<<<<<<<<<<<<
 *         quote_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[1]].address.lower())
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_remove_0x_prefix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_pair_split, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_address); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_lower); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyNumber_Add(__pyx_kp_u_0xf47261b00000000000000000000000, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_base_token_asset_data = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1203
 *         tokens = self._wallet.erc20_tokens
 *         base_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[0]].address.lower())
 *         quote_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[1]].address.lower())             # <<<<<<<<<<<<<<
 * 
 *         if trade_type is TradeType.BUY:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_remove_0x_prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_pair_split, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_address); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_0xf47261b00000000000000000000000, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_quote_token_asset_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1205
 *         quote_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[1]].address.lower())
 * 
 *         if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *             maker_asset_amount = int(quote_amount_with_decimals)
 *             taker_asset_amount = int(base_amount_with_decimals)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BUY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_trade_type == __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = (__pyx_t_2 != 0);
  if (__pyx_t_9) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1206
 * 
 *         if trade_type is TradeType.BUY:
 *             maker_asset_amount = int(quote_amount_with_decimals)             # <<<<<<<<<<<<<<
 *             taker_asset_amount = int(base_amount_with_decimals)
 *             maker_asset_data = quote_token_asset_data
 */
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_quote_amount_with_decimals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_maker_asset_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_maker_asset_amount, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1207
 *         if trade_type is TradeType.BUY:
 *             maker_asset_amount = int(quote_amount_with_decimals)
 *             taker_asset_amount = int(base_amount_with_decimals)             # <<<<<<<<<<<<<<
 *             maker_asset_data = quote_token_asset_data
 *             taker_asset_data = base_token_asset_data
 */
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_base_amount_with_decimals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_amount, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1208
 *             maker_asset_amount = int(quote_amount_with_decimals)
 *             taker_asset_amount = int(base_amount_with_decimals)
 *             maker_asset_data = quote_token_asset_data             # <<<<<<<<<<<<<<
 *             taker_asset_data = base_token_asset_data
 *         else:
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_quote_token_asset_data);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_maker_asset_data);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_maker_asset_data, __pyx_cur_scope->__pyx_v_quote_token_asset_data);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_quote_token_asset_data);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1209
 *             taker_asset_amount = int(base_amount_with_decimals)
 *             maker_asset_data = quote_token_asset_data
 *             taker_asset_data = base_token_asset_data             # <<<<<<<<<<<<<<
 *         else:
 *             maker_asset_amount = int(base_amount_with_decimals)
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_base_token_asset_data);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_data);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_data, __pyx_cur_scope->__pyx_v_base_token_asset_data);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_base_token_asset_data);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1205
 *         quote_token_asset_data = "0xf47261b0000000000000000000000000" + remove_0x_prefix(tokens[pair_split[1]].address.lower())
 * 
 *         if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *             maker_asset_amount = int(quote_amount_with_decimals)
 *             taker_asset_amount = int(base_amount_with_decimals)
 */
    goto __pyx_L5;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1211
 *             taker_asset_data = base_token_asset_data
 *         else:
 *             maker_asset_amount = int(base_amount_with_decimals)             # <<<<<<<<<<<<<<
 *             taker_asset_amount = int(quote_amount_with_decimals)
 *             maker_asset_data = base_token_asset_data
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_base_amount_with_decimals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_maker_asset_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_maker_asset_amount, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1212
 *         else:
 *             maker_asset_amount = int(base_amount_with_decimals)
 *             taker_asset_amount = int(quote_amount_with_decimals)             # <<<<<<<<<<<<<<
 *             maker_asset_data = base_token_asset_data
 *             taker_asset_data = quote_token_asset_data
 */
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_quote_amount_with_decimals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_amount);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_amount, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1213
 *             maker_asset_amount = int(base_amount_with_decimals)
 *             taker_asset_amount = int(quote_amount_with_decimals)
 *             maker_asset_data = base_token_asset_data             # <<<<<<<<<<<<<<
 *             taker_asset_data = quote_token_asset_data
 * 
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_base_token_asset_data);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_maker_asset_data);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_maker_asset_data, __pyx_cur_scope->__pyx_v_base_token_asset_data);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_base_token_asset_data);

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1214
 *             taker_asset_amount = int(quote_amount_with_decimals)
 *             maker_asset_data = base_token_asset_data
 *             taker_asset_data = quote_token_asset_data             # <<<<<<<<<<<<<<
 * 
 *         null_address = "0x0000000000000000000000000000000000000000"
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_quote_token_asset_data);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_taker_asset_data);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_taker_asset_data, __pyx_cur_scope->__pyx_v_quote_token_asset_data);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_quote_token_asset_data);
  }
  __pyx_L5:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1216
 *             taker_asset_data = quote_token_asset_data
 * 
 *         null_address = "0x0000000000000000000000000000000000000000"             # <<<<<<<<<<<<<<
 * 
 *         unsigned_limit_order = {
 */
  __Pyx_INCREF(__pyx_kp_u_0x000000000000000000000000000000);
  __Pyx_GIVEREF(__pyx_kp_u_0x000000000000000000000000000000);
  __pyx_cur_scope->__pyx_v_null_address = __pyx_kp_u_0x000000000000000000000000000000;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1219
 * 
 *         unsigned_limit_order = {
 *             'chainId': self._chain_id,             # <<<<<<<<<<<<<<
 *             'exchangeAddress': self._exchange_address.lower(),
 *             'makerAddress': self._wallet.address.lower(),
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->_chain_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_chainId, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1220
 *         unsigned_limit_order = {
 *             'chainId': self._chain_id,
 *             'exchangeAddress': self._exchange_address.lower(),             # <<<<<<<<<<<<<<
 *             'makerAddress': self._wallet.address.lower(),
 *             'takerAddress': null_address,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_exchange_address, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_exchangeAddress, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1221
 *             'chainId': self._chain_id,
 *             'exchangeAddress': self._exchange_address.lower(),
 *             'makerAddress': self._wallet.address.lower(),             # <<<<<<<<<<<<<<
 *             'takerAddress': null_address,
 *             'feeRecipientAddress': self._fee_recipient_address,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_address); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_makerAddress, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1222
 *             'exchangeAddress': self._exchange_address.lower(),
 *             'makerAddress': self._wallet.address.lower(),
 *             'takerAddress': null_address,             # <<<<<<<<<<<<<<
 *             'feeRecipientAddress': self._fee_recipient_address,
 *             'senderAddress': self._coordinator_address.lower() if self._use_coordinator else null_address,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_takerAddress, __pyx_cur_scope->__pyx_v_null_address) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1223
 *             'makerAddress': self._wallet.address.lower(),
 *             'takerAddress': null_address,
 *             'feeRecipientAddress': self._fee_recipient_address,             # <<<<<<<<<<<<<<
 *             'senderAddress': self._coordinator_address.lower() if self._use_coordinator else null_address,
 *             'makerAssetAmount': str(maker_asset_amount),
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_feeRecipientAddress, __pyx_cur_scope->__pyx_v_self->_fee_recipient_address) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1224
 *             'takerAddress': null_address,
 *             'feeRecipientAddress': self._fee_recipient_address,
 *             'senderAddress': self._coordinator_address.lower() if self._use_coordinator else null_address,             # <<<<<<<<<<<<<<
 *             'makerAssetAmount': str(maker_asset_amount),
 *             'takerAssetAmount': str(taker_asset_amount),
 */
  if ((__pyx_cur_scope->__pyx_v_self->_use_coordinator != 0)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_coordinator_address, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_null_address);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_null_address;
  }
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_senderAddress, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1225
 *             'feeRecipientAddress': self._fee_recipient_address,
 *             'senderAddress': self._coordinator_address.lower() if self._use_coordinator else null_address,
 *             'makerAssetAmount': str(maker_asset_amount),             # <<<<<<<<<<<<<<
 *             'takerAssetAmount': str(taker_asset_amount),
 *             'makerFee': '0',
 */
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_maker_asset_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_makerAssetAmount, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1226
 *             'senderAddress': self._coordinator_address.lower() if self._use_coordinator else null_address,
 *             'makerAssetAmount': str(maker_asset_amount),
 *             'takerAssetAmount': str(taker_asset_amount),             # <<<<<<<<<<<<<<
 *             'makerFee': '0',
 *             'takerFee': '0',
 */
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_taker_asset_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_takerAssetAmount, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_makerFee, __pyx_kp_u_0) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_takerFee, __pyx_kp_u_0) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1229
 *             'makerFee': '0',
 *             'takerFee': '0',
 *             'expirationTimeSeconds': str(expires),             # <<<<<<<<<<<<<<
 *             'salt': str(latest_salt),
 *             'makerAssetData': maker_asset_data,
 */
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_expires); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_expirationTimeSeconds, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1230
 *             'takerFee': '0',
 *             'expirationTimeSeconds': str(expires),
 *             'salt': str(latest_salt),             # <<<<<<<<<<<<<<
 *             'makerAssetData': maker_asset_data,
 *             'takerAssetData': taker_asset_data,
 */
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_latest_salt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_salt, __pyx_t_1) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1231
 *             'expirationTimeSeconds': str(expires),
 *             'salt': str(latest_salt),
 *             'makerAssetData': maker_asset_data,             # <<<<<<<<<<<<<<
 *             'takerAssetData': taker_asset_data,
 *             'makerFeeAssetData': maker_asset_data,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_makerAssetData, __pyx_cur_scope->__pyx_v_maker_asset_data) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1232
 *             'salt': str(latest_salt),
 *             'makerAssetData': maker_asset_data,
 *             'takerAssetData': taker_asset_data,             # <<<<<<<<<<<<<<
 *             'makerFeeAssetData': maker_asset_data,
 *             'takerFeeAssetData': maker_asset_data
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_takerAssetData, __pyx_cur_scope->__pyx_v_taker_asset_data) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1233
 *             'makerAssetData': maker_asset_data,
 *             'takerAssetData': taker_asset_data,
 *             'makerFeeAssetData': maker_asset_data,             # <<<<<<<<<<<<<<
 *             'takerFeeAssetData': maker_asset_data
 *         }
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_makerFeeAssetData, __pyx_cur_scope->__pyx_v_maker_asset_data) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1234
 *             'takerAssetData': taker_asset_data,
 *             'makerFeeAssetData': maker_asset_data,
 *             'takerFeeAssetData': maker_asset_data             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_takerFeeAssetData, __pyx_cur_scope->__pyx_v_maker_asset_data) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_unsigned_limit_order = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1237
 *         }
 * 
 *         order_hash_hex = self.get_order_hash_hex(unsigned_limit_order)             # <<<<<<<<<<<<<<
 *         signed_limit_order = copy.deepcopy(unsigned_limit_order)
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_order_hash_hex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_unsigned_limit_order};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_order_hash_hex = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1238
 * 
 *         order_hash_hex = self.get_order_hash_hex(unsigned_limit_order)
 *         signed_limit_order = copy.deepcopy(unsigned_limit_order)             # <<<<<<<<<<<<<<
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 *         signed_limit_order["signature"] = signature
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_unsigned_limit_order};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_signed_limit_order = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1239
 *         order_hash_hex = self.get_order_hash_hex(unsigned_limit_order)
 *         signed_limit_order = copy.deepcopy(unsigned_limit_order)
 *         signature = self.get_zero_ex_signature(order_hash_hex)             # <<<<<<<<<<<<<<
 *         signed_limit_order["signature"] = signature
 *         try:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_zero_ex_signature); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_order_hash_hex};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_signature = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1240
 *         signed_limit_order = copy.deepcopy(unsigned_limit_order)
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 *         signed_limit_order["signature"] = signature             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request(http_method="post",
 */
  if (unlikely((PyObject_SetItem(__pyx_cur_scope->__pyx_v_signed_limit_order, __pyx_n_u_signature, __pyx_cur_scope->__pyx_v_signature) < 0))) __PYX_ERR(0, 1240, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1241
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 *         signed_limit_order["signature"] = signature
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request(http_method="post",
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1242
 *         signed_limit_order["signature"] = signature
 *         try:
 *             await self._api_request(http_method="post",             # <<<<<<<<<<<<<<
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 *                                     data=signed_limit_order,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1242, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1242, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_http_method, __pyx_n_u_post) < 0) __PYX_ERR(0, 1242, __pyx_L6_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1243
 *         try:
 *             await self._api_request(http_method="post",
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",             # <<<<<<<<<<<<<<
 *                                     data=signed_limit_order,
 *                                     headers={"User-Agent": "hummingbot"})
 */
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1243, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_endpoint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1243, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1243, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_orders);
      __pyx_t_13 += 7;
      __Pyx_GIVEREF(__pyx_kp_u_orders);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_orders);
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1243, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_url, __pyx_t_3) < 0) __PYX_ERR(0, 1242, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1244
 *             await self._api_request(http_method="post",
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 *                                     data=signed_limit_order,             # <<<<<<<<<<<<<<
 *                                     headers={"User-Agent": "hummingbot"})
 *             self._latest_salt = latest_salt
 */
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_data, __pyx_cur_scope->__pyx_v_signed_limit_order) < 0) __PYX_ERR(0, 1242, __pyx_L6_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1245
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 *                                     data=signed_limit_order,
 *                                     headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 *             self._latest_salt = latest_salt
 *             order_hash = self._w3.toHex(hexstr=order_hash_hex)
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 1245, __pyx_L6_error)
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_headers, __pyx_t_3) < 0) __PYX_ERR(0, 1242, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1242
 *         signed_limit_order["signature"] = signature
 *         try:
 *             await self._api_request(http_method="post",             # <<<<<<<<<<<<<<
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 *                                     data=signed_limit_order,
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1242, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
        __Pyx_XGIVEREF(__pyx_t_11);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
        __Pyx_XGIVEREF(__pyx_t_12);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L12_resume_from_await:;
        __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_10);
        __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_11);
        __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_12);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1242, __pyx_L6_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 1242, __pyx_L6_error)
        }
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1246
 *                                     data=signed_limit_order,
 *                                     headers={"User-Agent": "hummingbot"})
 *             self._latest_salt = latest_salt             # <<<<<<<<<<<<<<
 *             order_hash = self._w3.toHex(hexstr=order_hash_hex)
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)
 */
      __pyx_t_15 = __Pyx_PyInt_As_int64_t(__pyx_cur_scope->__pyx_v_latest_salt); if (unlikely((__pyx_t_15 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1246, __pyx_L6_error)
      __pyx_cur_scope->__pyx_v_self->_latest_salt = __pyx_t_15;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1247
 *                                     headers={"User-Agent": "hummingbot"})
 *             self._latest_salt = latest_salt
 *             order_hash = self._w3.toHex(hexstr=order_hash_hex)             # <<<<<<<<<<<<<<
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)
 *             return order_hash, zero_ex_order
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_w3, __pyx_n_s_toHex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1247, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_hexstr, __pyx_cur_scope->__pyx_v_order_hash_hex) < 0) __PYX_ERR(0, 1247, __pyx_L6_error)
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1247, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_v_order_hash = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1248
 *             self._latest_salt = latest_salt
 *             order_hash = self._w3.toHex(hexstr=order_hash_hex)
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)             # <<<<<<<<<<<<<<
 *             return order_hash, zero_ex_order
 *         except Exception as ex:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1248, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_unsigned_limit_order};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_v_zero_ex_order = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1249
 *             order_hash = self._w3.toHex(hexstr=order_hash_hex)
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)
 *             return order_hash, zero_ex_order             # <<<<<<<<<<<<<<
 *         except Exception as ex:
 *             self._last_failed_limit_order_timestamp = self._current_timestamp
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_hash);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_hash);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_order_hash);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_zero_ex_order);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_zero_ex_order);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_zero_ex_order);
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L10_try_return;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1241
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 *         signed_limit_order["signature"] = signature
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request(http_method="post",
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 */
    }
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1250
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)
 *             return order_hash, zero_ex_order
 *         except Exception as ex:             # <<<<<<<<<<<<<<
 *             self._last_failed_limit_order_timestamp = self._current_timestamp
 *             raise ex
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_7) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.submit_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_3) < 0) __PYX_ERR(0, 1250, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_cur_scope->__pyx_v_ex = __pyx_t_6;
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1251
 *             return order_hash, zero_ex_order
 *         except Exception as ex:
 *             self._last_failed_limit_order_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             raise ex
 * 
 */
        __pyx_t_16 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
        __pyx_cur_scope->__pyx_v_self->_last_failed_limit_order_timestamp = __pyx_t_16;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1252
 *         except Exception as ex:
 *             self._last_failed_limit_order_timestamp = self._current_timestamp
 *             raise ex             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):
 */
        __Pyx_Raise(__pyx_cur_scope->__pyx_v_ex, 0, 0, 0);
        __PYX_ERR(0, 1252, __pyx_L18_error)
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1250
 *             zero_ex_order = jsdict_order_to_struct(unsigned_limit_order)
 *             return order_hash, zero_ex_order
 *         except Exception as ex:             # <<<<<<<<<<<<<<
 *             self._last_failed_limit_order_timestamp = self._current_timestamp
 *             raise ex
 */
      /*finally:*/ {
        __pyx_L18_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_assign
          __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_24);
          __pyx_t_7 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
          {
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_ex);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_ex); __pyx_cur_scope->__pyx_v_ex = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
          }
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_ErrRestore(__pyx_t_19, __pyx_t_20, __pyx_t_21);
          __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
          __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;
          goto __pyx_L8_except_error;
        }
      }
    }
    goto __pyx_L8_except_error;
    __pyx_L8_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1241
 *         signature = self.get_zero_ex_signature(order_hash_hex)
 *         signed_limit_order["signature"] = signature
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request(http_method="post",
 *                                     url=f"{self._api_endpoint}{self._api_prefix}/orders",
 */
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L1_error;
    __pyx_L10_try_return:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1169
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *     async def submit_limit_order(self,             # <<<<<<<<<<<<<<
 *                                  trading_pair: str,
 *                                  trade_type: TradeType,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("submit_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1254
 *             raise ex
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):             # <<<<<<<<<<<<<<
 *         # Skip this logic if we are not using the coordinator
 *         if not self._use_coordinator:
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_v_keys_to_delete = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_cancel_timestamp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1256
 *     cdef c_cancel(self, str trading_pair, str client_order_id):
 *         # Skip this logic if we are not using the coordinator
 *         if not self._use_coordinator:             # <<<<<<<<<<<<<<
 *             safe_ensure_future(self.cancel_order(client_order_id))
 *             return
 */
  __pyx_t_1 = ((!(__pyx_v_self->_use_coordinator != 0)) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1257
 *         # Skip this logic if we are not using the coordinator
 *         if not self._use_coordinator:
 *             safe_ensure_future(self.cancel_order(client_order_id))             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_client_order_id};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1258
 *         if not self._use_coordinator:
 *             safe_ensure_future(self.cancel_order(client_order_id))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Limit order is pending has not been created, so it can't be cancelled yet
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1256
 *     cdef c_cancel(self, str trading_pair, str client_order_id):
 *         # Skip this logic if we are not using the coordinator
 *         if not self._use_coordinator:             # <<<<<<<<<<<<<<
 *             safe_ensure_future(self.cancel_order(client_order_id))
 *             return
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1261
 * 
 *         # Limit order is pending has not been created, so it can't be cancelled yet
 *         if client_order_id in self._in_flight_pending_limit_orders:             # <<<<<<<<<<<<<<
 *             self._in_flight_pending_cancels[client_order_id] = self._current_timestamp
 *             return
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_client_order_id, __pyx_v_self->_in_flight_pending_limit_orders, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1261, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_1 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1262
 *         # Limit order is pending has not been created, so it can't be cancelled yet
 *         if client_order_id in self._in_flight_pending_limit_orders:
 *             self._in_flight_pending_cancels[client_order_id] = self._current_timestamp             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((PyObject_SetItem(__pyx_v_self->_in_flight_pending_cancels, __pyx_v_client_order_id, __pyx_t_2) < 0))) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1263
 *         if client_order_id in self._in_flight_pending_limit_orders:
 *             self._in_flight_pending_cancels[client_order_id] = self._current_timestamp
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # If there's an ongoing cancel on this order within the expiry time, don't do it again.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1261
 * 
 *         # Limit order is pending has not been created, so it can't be cancelled yet
 *         if client_order_id in self._in_flight_pending_limit_orders:             # <<<<<<<<<<<<<<
 *             self._in_flight_pending_cancels[client_order_id] = self._current_timestamp
 *             return
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1266
 * 
 *         # If there's an ongoing cancel on this order within the expiry time, don't do it again.
 *         if self._in_flight_cancels.get(client_order_id, 0) > self._current_timestamp - self.CANCEL_EXPIRY_TIME:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_in_flight_cancels, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_client_order_id, __pyx_int_0};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_CANCEL_EXPIRY_TIME); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1267
 *         # If there's an ongoing cancel on this order within the expiry time, don't do it again.
 *         if self._in_flight_cancels.get(client_order_id, 0) > self._current_timestamp - self.CANCEL_EXPIRY_TIME:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Maintain the in flight orders list vs. expiry invariant.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1266
 * 
 *         # If there's an ongoing cancel on this order within the expiry time, don't do it again.
 *         if self._in_flight_cancels.get(client_order_id, 0) > self._current_timestamp - self.CANCEL_EXPIRY_TIME:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1271
 *         # Maintain the in flight orders list vs. expiry invariant.
 *         cdef:
 *             list keys_to_delete = []             # <<<<<<<<<<<<<<
 * 
 *         for k, cancel_timestamp in self._in_flight_cancels.items():
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_keys_to_delete = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1273
 *             list keys_to_delete = []
 * 
 *         for k, cancel_timestamp in self._in_flight_cancels.items():             # <<<<<<<<<<<<<<
 *             if cancel_timestamp < self._current_timestamp - self.CANCEL_EXPIRY_TIME:
 *                 keys_to_delete.append(k)
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_self->_in_flight_cancels == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 1273, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_cancels, 0, __pyx_n_s_items, (&__pyx_t_10), (&__pyx_t_7)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4);
  __pyx_t_4 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_10, &__pyx_t_9, &__pyx_t_5, &__pyx_t_2, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cancel_timestamp, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1274
 * 
 *         for k, cancel_timestamp in self._in_flight_cancels.items():
 *             if cancel_timestamp < self._current_timestamp - self.CANCEL_EXPIRY_TIME:             # <<<<<<<<<<<<<<
 *                 keys_to_delete.append(k)
 *             else:
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_CANCEL_EXPIRY_TIME); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_cancel_timestamp, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_8) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1275
 *         for k, cancel_timestamp in self._in_flight_cancels.items():
 *             if cancel_timestamp < self._current_timestamp - self.CANCEL_EXPIRY_TIME:
 *                 keys_to_delete.append(k)             # <<<<<<<<<<<<<<
 *             else:
 *                 break
 */
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_keys_to_delete, __pyx_v_k); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1275, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1274
 * 
 *         for k, cancel_timestamp in self._in_flight_cancels.items():
 *             if cancel_timestamp < self._current_timestamp - self.CANCEL_EXPIRY_TIME:             # <<<<<<<<<<<<<<
 *                 keys_to_delete.append(k)
 *             else:
 */
      goto __pyx_L8;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1277
 *                 keys_to_delete.append(k)
 *             else:
 *                 break             # <<<<<<<<<<<<<<
 *         for k in keys_to_delete:
 *             del self._in_flight_cancels[k]
 */
    /*else*/ {
      goto __pyx_L7_break;
    }
    __pyx_L8:;
  }
  __pyx_L7_break:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1278
 *             else:
 *                 break
 *         for k in keys_to_delete:             # <<<<<<<<<<<<<<
 *             del self._in_flight_cancels[k]
 * 
 */
  __pyx_t_4 = __pyx_v_keys_to_delete; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
  for (;;) {
    if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1278, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1279
 *                 break
 *         for k in keys_to_delete:
 *             del self._in_flight_cancels[k]             # <<<<<<<<<<<<<<
 * 
 *         # Record the in-flight cancellation.
 */
    if (unlikely((PyObject_DelItem(__pyx_v_self->_in_flight_cancels, __pyx_v_k) < 0))) __PYX_ERR(0, 1279, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1278
 *             else:
 *                 break
 *         for k in keys_to_delete:             # <<<<<<<<<<<<<<
 *             del self._in_flight_cancels[k]
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1282
 * 
 *         # Record the in-flight cancellation.
 *         self._in_flight_cancels[client_order_id] = self._current_timestamp             # <<<<<<<<<<<<<<
 * 
 *         # Execute the cancel asynchronously.
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely((PyObject_SetItem(__pyx_v_self->_in_flight_cancels, __pyx_v_client_order_id, __pyx_t_4) < 0))) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1285
 * 
 *         # Execute the cancel asynchronously.
 *         safe_ensure_future(self.cancel_order(client_order_id))             # <<<<<<<<<<<<<<
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_client_order_id};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1254
 *             raise ex
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):             # <<<<<<<<<<<<<<
 *         # Skip this logic if we are not using the coordinator
 *         if not self._use_coordinator:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keys_to_delete);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_cancel_timestamp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_61generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1287
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int order_timestamp_diff
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all = {"cancel_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_timeout_seconds;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout_seconds,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout_seconds,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_timeout_seconds)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1287, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_all") < 0)) __PYX_ERR(0, 1287, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_timeout_seconds = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_timeout_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1287, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_all", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1287, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_59cancel_all(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_timeout_seconds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_59cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_timeout_seconds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_all", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1287, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_timeout_seconds = __pyx_v_timeout_seconds;
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_61generator13, __pyx_codeobj__25, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_all, __pyx_n_s_BambooRelayExchange_cancel_all, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_61generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  double __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  double __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  int64_t __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  Py_UCS4 __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L27_resume_from_await;
    case 2: goto __pyx_L41_resume_from_await;
    case 3: goto __pyx_L58_resume_from_await;
    case 4: goto __pyx_L69_resume_from_await;
    case 5: goto __pyx_L70_resume_from_await;
    case 6: goto __pyx_L71_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1287, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1292
 *             double current_timestamp
 * 
 *         in_flight_limit_orders = self._in_flight_limit_orders.values()             # <<<<<<<<<<<<<<
 *         incomplete_order_ids = []
 *         incomplete_orders = []
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 1292, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_in_flight_limit_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1293
 * 
 *         in_flight_limit_orders = self._in_flight_limit_orders.values()
 *         incomplete_order_ids = []             # <<<<<<<<<<<<<<
 *         incomplete_orders = []
 *         has_coordinated_order = False
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_incomplete_order_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1294
 *         in_flight_limit_orders = self._in_flight_limit_orders.values()
 *         incomplete_order_ids = []
 *         incomplete_orders = []             # <<<<<<<<<<<<<<
 *         has_coordinated_order = False
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_incomplete_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1295
 *         incomplete_order_ids = []
 *         incomplete_orders = []
 *         has_coordinated_order = False             # <<<<<<<<<<<<<<
 * 
 *         for order in in_flight_limit_orders:
 */
  __pyx_cur_scope->__pyx_v_has_coordinated_order = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1297
 *         has_coordinated_order = False
 * 
 *         for order in in_flight_limit_orders:             # <<<<<<<<<<<<<<
 *             if not (order.is_done or
 *                     order.is_cancelled or
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_in_flight_limit_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_in_flight_limit_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_in_flight_limit_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_in_flight_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1297, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1298
 * 
 *         for order in in_flight_limit_orders:
 *             if not (order.is_done or             # <<<<<<<<<<<<<<
 *                     order.is_cancelled or
 *                     order.is_expired or
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_is_done); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1299
 *         for order in in_flight_limit_orders:
 *             if not (order.is_done or
 *                     order.is_cancelled or             # <<<<<<<<<<<<<<
 *                     order.is_expired or
 *                     order.is_failure or
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1300
 *             if not (order.is_done or
 *                     order.is_cancelled or
 *                     order.is_expired or             # <<<<<<<<<<<<<<
 *                     order.is_failure or
 *                     order.has_been_cancelled or
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_is_expired); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1301
 *                     order.is_cancelled or
 *                     order.is_expired or
 *                     order.is_failure or             # <<<<<<<<<<<<<<
 *                     order.has_been_cancelled or
 *                     order.client_order_id in self._in_flight_cancels or
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_is_failure); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1302
 *                     order.is_expired or
 *                     order.is_failure or
 *                     order.has_been_cancelled or             # <<<<<<<<<<<<<<
 *                     order.client_order_id in self._in_flight_cancels or
 *                     order.client_order_id in self._in_flight_pending_cancels):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_has_been_cancelled); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1303
 *                     order.is_failure or
 *                     order.has_been_cancelled or
 *                     order.client_order_id in self._in_flight_cancels or             # <<<<<<<<<<<<<<
 *                     order.client_order_id in self._in_flight_pending_cancels):
 *                 incomplete_order_ids.append(order.client_order_id)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_cur_scope->__pyx_v_self->_in_flight_cancels, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1304
 *                     order.has_been_cancelled or
 *                     order.client_order_id in self._in_flight_cancels or
 *                     order.client_order_id in self._in_flight_pending_cancels):             # <<<<<<<<<<<<<<
 *                 incomplete_order_ids.append(order.client_order_id)
 *                 incomplete_orders.append(order)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_cur_scope->__pyx_v_self->_in_flight_pending_cancels, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1298
 * 
 *         for order in in_flight_limit_orders:
 *             if not (order.is_done or             # <<<<<<<<<<<<<<
 *                     order.is_cancelled or
 *                     order.is_expired or
 */
    __pyx_t_6 = ((!__pyx_t_5) != 0);
    if (__pyx_t_6) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1305
 *                     order.client_order_id in self._in_flight_cancels or
 *                     order.client_order_id in self._in_flight_pending_cancels):
 *                 incomplete_order_ids.append(order.client_order_id)             # <<<<<<<<<<<<<<
 *                 incomplete_orders.append(order)
 *             if order.is_coordinated:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_incomplete_order_ids, __pyx_t_4); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1306
 *                     order.client_order_id in self._in_flight_pending_cancels):
 *                 incomplete_order_ids.append(order.client_order_id)
 *                 incomplete_orders.append(order)             # <<<<<<<<<<<<<<
 *             if order.is_coordinated:
 *                 has_coordinated_order = True
 */
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_incomplete_orders, __pyx_cur_scope->__pyx_v_order); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1306, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1298
 * 
 *         for order in in_flight_limit_orders:
 *             if not (order.is_done or             # <<<<<<<<<<<<<<
 *                     order.is_cancelled or
 *                     order.is_expired or
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1307
 *                 incomplete_order_ids.append(order.client_order_id)
 *                 incomplete_orders.append(order)
 *             if order.is_coordinated:             # <<<<<<<<<<<<<<
 *                 has_coordinated_order = True
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_is_coordinated); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1308
 *                 incomplete_orders.append(order)
 *             if order.is_coordinated:
 *                 has_coordinated_order = True             # <<<<<<<<<<<<<<
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:
 *             return []
 */
      __pyx_cur_scope->__pyx_v_has_coordinated_order = 1;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1307
 *                 incomplete_order_ids.append(order.client_order_id)
 *                 incomplete_orders.append(order)
 *             if order.is_coordinated:             # <<<<<<<<<<<<<<
 *                 has_coordinated_order = True
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1297
 *         has_coordinated_order = False
 * 
 *         for order in in_flight_limit_orders:             # <<<<<<<<<<<<<<
 *             if not (order.is_done or
 *                     order.is_cancelled or
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1309
 *             if order.is_coordinated:
 *                 has_coordinated_order = True
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
  __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_self->_latest_salt == -1L) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_6 = __pyx_t_5;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_incomplete_order_ids); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1309, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_2 == 0) != 0);
  __pyx_t_6 = __pyx_t_5;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1310
 *                 has_coordinated_order = True
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:
 *             return []             # <<<<<<<<<<<<<<
 * 
 *         if has_coordinated_order:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1309
 *             if order.is_coordinated:
 *                 has_coordinated_order = True
 *         if self._latest_salt == -1 or len(incomplete_order_ids) == 0:             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1312
 *             return []
 * 
 *         if has_coordinated_order:             # <<<<<<<<<<<<<<
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:
 */
  __pyx_t_6 = (__pyx_cur_scope->__pyx_v_has_coordinated_order != 0);
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1313
 * 
 *         if has_coordinated_order:
 *             orders = [o.zero_ex_order for o in incomplete_orders]             # <<<<<<<<<<<<<<
 *             try:
 *                 soft_cancel_result = await self._coordinator.batch_soft_cancel_orders(orders)
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_incomplete_orders; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
      for (;;) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_9); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1313, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1313, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_o);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_o, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_o, __pyx_n_s_zero_ex_order); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1313, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1313, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_orders = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1314
 *         if has_coordinated_order:
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:             # <<<<<<<<<<<<<<
 *                 soft_cancel_result = await self._coordinator.batch_soft_cancel_orders(orders)
 * 
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1315
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:
 *                 soft_cancel_result = await self._coordinator.batch_soft_cancel_orders(orders)             # <<<<<<<<<<<<<<
 * 
 *                 # if the market is force stopped then _current_timestamp is NaN
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_coordinator, __pyx_n_s_batch_soft_cancel_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_orders};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
          __Pyx_XGIVEREF(__pyx_t_11);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
          __Pyx_XGIVEREF(__pyx_t_12);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L27_resume_from_await:;
          __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_10);
          __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_11);
          __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_12);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1315, __pyx_L21_error)
          __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
        } else {
          __pyx_t_1 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 1315, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_v_soft_cancel_result = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1318
 * 
 *                 # if the market is force stopped then _current_timestamp is NaN
 *                 current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp             # <<<<<<<<<<<<<<
 *                 # Flag
 *                 order_ids = ""
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1318, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1318, __pyx_L21_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_6) {
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_math); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1318, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_isnan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1318, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1318, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_15 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_9};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1318, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_14 = __pyx_t_16;
        } else {
          __pyx_t_14 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
        }
        __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_14;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1320
 *                 current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                 # Flag
 *                 order_ids = ""             # <<<<<<<<<<<<<<
 *                 for order in incomplete_orders:
 *                     order.has_been_cancelled = True
 */
        __Pyx_INCREF(__pyx_kp_u__13);
        __Pyx_GIVEREF(__pyx_kp_u__13);
        __pyx_cur_scope->__pyx_v_order_ids = __pyx_kp_u__13;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1321
 *                 # Flag
 *                 order_ids = ""
 *                 for order in incomplete_orders:             # <<<<<<<<<<<<<<
 *                     order.has_been_cancelled = True
 *                     # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 */
        __pyx_t_1 = __pyx_cur_scope->__pyx_v_incomplete_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
        for (;;) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1321, __pyx_L21_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1321, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1322
 *                 order_ids = ""
 *                 for order in incomplete_orders:
 *                     order.has_been_cancelled = True             # <<<<<<<<<<<<<<
 *                     # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                     order_timestamp_diff = abs(order.expires - int(current_timestamp))
 */
          if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_has_been_cancelled, Py_True) < 0) __PYX_ERR(0, 1322, __pyx_L21_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1324
 *                     order.has_been_cancelled = True
 *                     # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                     order_timestamp_diff = abs(order.expires - int(current_timestamp))             # <<<<<<<<<<<<<<
 *                     self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *                     self.c_trigger_event(
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_expires); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1324, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = __Pyx_PyInt_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1324, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_15 = PyNumber_Subtract(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1324, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1324, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1324, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_cur_scope->__pyx_v_order_timestamp_diff = __pyx_t_13;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1325
 *                     # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *                     order_timestamp_diff = abs(order.expires - int(current_timestamp))
 *                     self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1325, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_9))) __PYX_ERR(0, 1325, __pyx_L21_error)
          __pyx_t_17 = 0x82;
          __pyx_t_13 = __pyx_cur_scope->__pyx_v_order_timestamp_diff;
          if (((__pyx_t_17 < __pyx_t_13) != 0)) {
            __pyx_t_18 = __pyx_t_17;
          } else {
            __pyx_t_18 = __pyx_t_13;
          }
          __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_9), __pyx_t_18); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1325, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1327
 *                     self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         OrderCancelledEvent(current_timestamp, order.client_order_id)
 *                     )
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1327, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_19 = __Pyx_PyInt_As_int64_t(__pyx_t_15); if (unlikely((__pyx_t_19 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1327, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1328
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                         OrderCancelledEvent(current_timestamp, order.client_order_id)             # <<<<<<<<<<<<<<
 *                     )
 *                     order_ids = order_ids + order.client_order_id + " "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1328, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1328, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1328, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_21 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_21, __pyx_t_4, __pyx_t_20};
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1328, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1326
 *                     order_timestamp_diff = abs(order.expires - int(current_timestamp))
 *                     self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                         OrderCancelledEvent(current_timestamp, order.client_order_id)
 */
          __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_19, __pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1326, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1330
 *                         OrderCancelledEvent(current_timestamp, order.client_order_id)
 *                     )
 *                     order_ids = order_ids + order.client_order_id + " "             # <<<<<<<<<<<<<<
 * 
 *                 self.logger().info(f"The limit orders {order_ids}have been soft cancelled according "
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1330, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_15 = PyNumber_Add(__pyx_cur_scope->__pyx_v_order_ids, __pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1330, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyNumber_Add(__pyx_t_15, __pyx_kp_u__26); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1330, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_ids);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_ids, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          __pyx_t_9 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1321
 *                 # Flag
 *                 order_ids = ""
 *                 for order in incomplete_orders:             # <<<<<<<<<<<<<<
 *                     order.has_been_cancelled = True
 *                     # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1332
 *                     order_ids = order_ids + order.client_order_id + " "
 * 
 *                 self.logger().info(f"The limit orders {order_ids}have been soft cancelled according "             # <<<<<<<<<<<<<<
 *                                    f"to the Coordinator server.")
 * 
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1332, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_20 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_20, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1332, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1332, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1332, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = 0;
        __pyx_t_22 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_limit_orders);
        __pyx_t_2 += 17;
        __Pyx_GIVEREF(__pyx_kp_u_The_limit_orders);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_The_limit_orders);
        __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_ids, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1332, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_22;
        __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_INCREF(__pyx_kp_u_have_been_soft_cancelled_accordi);
        __pyx_t_2 += 61;
        __Pyx_GIVEREF(__pyx_kp_u_have_been_soft_cancelled_accordi);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_have_been_soft_cancelled_accordi);
        __pyx_t_20 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_2, __pyx_t_22); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1332, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_20};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1332, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1335
 *                                    f"to the Coordinator server.")
 * 
 *                 return [CancellationResult(oid, True) for oid in incomplete_order_ids]             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network(
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_15 = __pyx_cur_scope->__pyx_v_incomplete_order_ids; __Pyx_INCREF(__pyx_t_15); __pyx_t_2 = 0;
          for (;;) {
            if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_15)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_20 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_2); __Pyx_INCREF(__pyx_t_20); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1335, __pyx_L21_error)
            #else
            __pyx_t_20 = PySequence_ITEM(__pyx_t_15, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1335, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_20);
            #endif
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr6__pyx_v_oid);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr6__pyx_v_oid, __pyx_t_20);
            __Pyx_GIVEREF(__pyx_t_20);
            __pyx_t_20 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1335, __pyx_L21_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_4 = NULL;
            __pyx_t_13 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
                __pyx_t_13 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_8genexpr6__pyx_v_oid, Py_True};
              __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1335, __pyx_L21_error)
              __Pyx_GOTREF(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_20))) __PYX_ERR(0, 1335, __pyx_L21_error)
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } /* exit inner scope */
        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L25_try_return;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1314
 *         if has_coordinated_order:
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:             # <<<<<<<<<<<<<<
 *                 soft_cancel_result = await self._coordinator.batch_soft_cancel_orders(orders)
 * 
 */
      }
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1336
 * 
 *                 return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     f"Unexpected error cancelling orders.",
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_15, &__pyx_t_20) < 0) __PYX_ERR(0, 1336, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_GOTREF(__pyx_t_20);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1337
 *                 return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1337, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_21 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_21, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1337, __pyx_L23_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_network); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1337, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1339
 *                 self.logger().network(
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg=f"Failed to cancel orders on Bamboo Relay. "
 *                                     f"Coordinator rejected cancellation request."
 */
        __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1339, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 1339, __pyx_L23_except_error)
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_cancel_orders_on_Bambo) < 0) __PYX_ERR(0, 1339, __pyx_L23_except_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1337
 *                 return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,
 */
        __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__27, __pyx_t_9); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1337, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        goto __pyx_L22_exception_handled;
      }
      goto __pyx_L23_except_error;
      __pyx_L23_except_error:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1314
 *         if has_coordinated_order:
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:             # <<<<<<<<<<<<<<
 *                 soft_cancel_result = await self._coordinator.batch_soft_cancel_orders(orders)
 * 
 */
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L25_try_return:;
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L0;
      __pyx_L22_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1312
 *             return []
 * 
 *         if has_coordinated_order:             # <<<<<<<<<<<<<<
 *             orders = [o.zero_ex_order for o in incomplete_orders]
 *             try:
 */
    goto __pyx_L18;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1344
 *                 )
 *         else:
 *             tx_hash = self._exchange.cancel_orders_up_to(self._latest_salt)             # <<<<<<<<<<<<<<
 *             receipt = None
 *             try:
 */
  /*else*/ {
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_exchange, __pyx_n_s_cancel_orders_up_to); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_cur_scope->__pyx_v_self->_latest_salt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_21 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
        __pyx_t_13 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_1};
      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_20);
    __pyx_cur_scope->__pyx_v_tx_hash = __pyx_t_20;
    __pyx_t_20 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1345
 *         else:
 *             tx_hash = self._exchange.cancel_orders_up_to(self._latest_salt)
 *             receipt = None             # <<<<<<<<<<<<<<
 *             try:
 *                 async with timeout(timeout_seconds):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __pyx_cur_scope->__pyx_v_receipt = Py_None;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1346
 *             tx_hash = self._exchange.cancel_orders_up_to(self._latest_salt)
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 async with timeout(timeout_seconds):
 *                     while receipt is None or receipt["blockNumber"] is None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1347
 *             receipt = None
 *             try:
 *                 async with timeout(timeout_seconds):             # <<<<<<<<<<<<<<
 *                     while receipt is None or receipt["blockNumber"] is None:
 *                         receipt = self.get_tx_hash_receipt(tx_hash)
 */
        /*with:*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_timeout); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1347, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_21 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_1};
            __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1347, __pyx_L34_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __pyx_t_23 = __Pyx_PyObject_LookupSpecial(__pyx_t_20, __pyx_n_s_aexit); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1347, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_23);
          __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_20, __pyx_n_s_aenter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L40_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_21 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_13 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_21, };
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1347, __pyx_L40_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_12);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_20);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_20;
            __Pyx_XGIVEREF(__pyx_t_23);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_23;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 2;
            return __pyx_r;
            __pyx_L41_resume_from_await:;
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_12);
            __pyx_t_20 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_23 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_23);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1347, __pyx_L40_error)
            __pyx_t_15 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_15);
          } else {
            __pyx_t_15 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_15) < 0) __PYX_ERR(0, 1347, __pyx_L40_error)
            __Pyx_GOTREF(__pyx_t_15);
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          /*try:*/ {
            {
              __Pyx_ExceptionSave(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);
              __Pyx_XGOTREF(__pyx_t_24);
              __Pyx_XGOTREF(__pyx_t_25);
              __Pyx_XGOTREF(__pyx_t_26);
              /*try:*/ {

                /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1348
 *             try:
 *                 async with timeout(timeout_seconds):
 *                     while receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                         receipt = self.get_tx_hash_receipt(tx_hash)
 *                         # Receipt exists and has been mined
 */
                while (1) {
                  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_receipt == Py_None);
                  __pyx_t_7 = (__pyx_t_5 != 0);
                  if (!__pyx_t_7) {
                  } else {
                    __pyx_t_6 = __pyx_t_7;
                    goto __pyx_L53_bool_binop_done;
                  }
                  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1348, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_7 = (__pyx_t_20 == Py_None);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_5 = (__pyx_t_7 != 0);
                  __pyx_t_6 = __pyx_t_5;
                  __pyx_L53_bool_binop_done:;
                  if (!__pyx_t_6) break;

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1349
 *                 async with timeout(timeout_seconds):
 *                     while receipt is None or receipt["blockNumber"] is None:
 *                         receipt = self.get_tx_hash_receipt(tx_hash)             # <<<<<<<<<<<<<<
 *                         # Receipt exists and has been mined
 *                         if receipt is None or receipt["blockNumber"] is None:
 */
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_tx_hash_receipt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1349, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_1 = NULL;
                  __pyx_t_13 = 0;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
                    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
                    if (likely(__pyx_t_1)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                      __Pyx_INCREF(__pyx_t_1);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_15, function);
                      __pyx_t_13 = 1;
                    }
                  }
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_tx_hash};
                    __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1349, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_20);
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  }
                  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_receipt);
                  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_receipt, __pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_20);
                  __pyx_t_20 = 0;

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1351
 *                         receipt = self.get_tx_hash_receipt(tx_hash)
 *                         # Receipt exists and has been mined
 *                         if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                             await asyncio.sleep(6.0)
 *                             continue
 */
                  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_receipt == Py_None);
                  __pyx_t_7 = (__pyx_t_5 != 0);
                  if (!__pyx_t_7) {
                  } else {
                    __pyx_t_6 = __pyx_t_7;
                    goto __pyx_L56_bool_binop_done;
                  }
                  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1351, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_7 = (__pyx_t_20 == Py_None);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_5 = (__pyx_t_7 != 0);
                  __pyx_t_6 = __pyx_t_5;
                  __pyx_L56_bool_binop_done:;
                  if (__pyx_t_6) {

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1352
 *                         # Receipt exists and has been mined
 *                         if receipt is None or receipt["blockNumber"] is None:
 *                             await asyncio.sleep(6.0)             # <<<<<<<<<<<<<<
 *                             continue
 *                         if receipt["status"] == 0:
 */
                    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1352, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_sleep); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1352, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    __pyx_t_15 = NULL;
                    __pyx_t_13 = 0;
                    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_15)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_15);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                        __pyx_t_13 = 1;
                      }
                    }
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_float_6_0};
                      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1352, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_20);
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_XGOTREF(__pyx_r);
                    if (likely(__pyx_r)) {
                      __Pyx_XGIVEREF(__pyx_t_10);
                      __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
                      __Pyx_XGIVEREF(__pyx_t_11);
                      __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
                      __Pyx_XGIVEREF(__pyx_t_12);
                      __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
                      __Pyx_XGIVEREF(__pyx_t_23);
                      __pyx_cur_scope->__pyx_t_3 = __pyx_t_23;
                      __Pyx_XGIVEREF(__pyx_t_24);
                      __pyx_cur_scope->__pyx_t_4 = __pyx_t_24;
                      __Pyx_XGIVEREF(__pyx_t_25);
                      __pyx_cur_scope->__pyx_t_5 = __pyx_t_25;
                      __Pyx_XGIVEREF(__pyx_t_26);
                      __pyx_cur_scope->__pyx_t_6 = __pyx_t_26;
                      __Pyx_XGIVEREF(__pyx_r);
                      __Pyx_RefNannyFinishContext();
                      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                      /* return from generator, awaiting value */
                      __pyx_generator->resume_label = 3;
                      return __pyx_r;
                      __pyx_L58_resume_from_await:;
                      __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
                      __pyx_cur_scope->__pyx_t_0 = 0;
                      __Pyx_XGOTREF(__pyx_t_10);
                      __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
                      __pyx_cur_scope->__pyx_t_1 = 0;
                      __Pyx_XGOTREF(__pyx_t_11);
                      __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
                      __pyx_cur_scope->__pyx_t_2 = 0;
                      __Pyx_XGOTREF(__pyx_t_12);
                      __pyx_t_23 = __pyx_cur_scope->__pyx_t_3;
                      __pyx_cur_scope->__pyx_t_3 = 0;
                      __Pyx_XGOTREF(__pyx_t_23);
                      __pyx_t_24 = __pyx_cur_scope->__pyx_t_4;
                      __pyx_cur_scope->__pyx_t_4 = 0;
                      __Pyx_XGOTREF(__pyx_t_24);
                      __pyx_t_25 = __pyx_cur_scope->__pyx_t_5;
                      __pyx_cur_scope->__pyx_t_5 = 0;
                      __Pyx_XGOTREF(__pyx_t_25);
                      __pyx_t_26 = __pyx_cur_scope->__pyx_t_6;
                      __pyx_cur_scope->__pyx_t_6 = 0;
                      __Pyx_XGOTREF(__pyx_t_26);
                      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1352, __pyx_L45_error)
                    } else {
                      PyObject* exc_type = __Pyx_PyErr_Occurred();
                      if (exc_type) {
                        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
                        else __PYX_ERR(0, 1352, __pyx_L45_error)
                      }
                    }

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1353
 *                         if receipt is None or receipt["blockNumber"] is None:
 *                             await asyncio.sleep(6.0)
 *                             continue             # <<<<<<<<<<<<<<
 *                         if receipt["status"] == 0:
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 */
                    goto __pyx_L51_continue;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1351
 *                         receipt = self.get_tx_hash_receipt(tx_hash)
 *                         # Receipt exists and has been mined
 *                         if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                             await asyncio.sleep(6.0)
 *                             continue
 */
                  }

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1354
 *                             await asyncio.sleep(6.0)
 *                             continue
 *                         if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 *                         elif receipt["status"] == 1:
 */
                  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1354, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_20, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1354, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1354, __pyx_L45_error)
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (__pyx_t_6) {

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1355
 *                             continue
 *                         if receipt["status"] == 0:
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]             # <<<<<<<<<<<<<<
 *                         elif receipt["status"] == 1:
 *                             order_ids = ""
 */
                    __Pyx_XDECREF(__pyx_r);
                    { /* enter inner scope */
                      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1355, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_20 = __pyx_cur_scope->__pyx_v_incomplete_order_ids; __Pyx_INCREF(__pyx_t_20); __pyx_t_2 = 0;
                      for (;;) {
                        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_20)) break;
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_15 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_2); __Pyx_INCREF(__pyx_t_15); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1355, __pyx_L45_error)
                        #else
                        __pyx_t_15 = PySequence_ITEM(__pyx_t_20, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1355, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        #endif
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr7__pyx_v_oid);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr7__pyx_v_oid, __pyx_t_15);
                        __Pyx_GIVEREF(__pyx_t_15);
                        __pyx_t_15 = 0;
                        __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1355, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_21);
                        __pyx_t_9 = NULL;
                        __pyx_t_13 = 0;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
                          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_21);
                          if (likely(__pyx_t_9)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
                            __Pyx_INCREF(__pyx_t_9);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_21, function);
                            __pyx_t_13 = 1;
                          }
                        }
                        {
                          PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_cur_scope->__pyx_8genexpr7__pyx_v_oid, Py_False};
                          __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
                          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1355, __pyx_L45_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        }
                        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 1355, __pyx_L45_error)
                        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    } /* exit inner scope */
                    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    goto __pyx_L49_try_return;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1354
 *                             await asyncio.sleep(6.0)
 *                             continue
 *                         if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 *                         elif receipt["status"] == 1:
 */
                  }

                  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1356
 *                         if receipt["status"] == 0:
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 *                         elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                             order_ids = ""
 *                             # if the market is force stopped then _current_timestamp is NaN
 */
                  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1356, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_20 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1356, __pyx_L45_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_20); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1356, __pyx_L45_error)
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  if (__pyx_t_6) {

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1357
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 *                         elif receipt["status"] == 1:
 *                             order_ids = ""             # <<<<<<<<<<<<<<
 *                             # if the market is force stopped then _current_timestamp is NaN
 *                             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 */
                    __Pyx_INCREF(__pyx_kp_u__13);
                    __Pyx_GIVEREF(__pyx_kp_u__13);
                    __pyx_cur_scope->__pyx_v_order_ids = __pyx_kp_u__13;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1359
 *                             order_ids = ""
 *                             # if the market is force stopped then _current_timestamp is NaN
 *                             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp             # <<<<<<<<<<<<<<
 *                             for order in incomplete_orders:
 *                                 order.has_been_cancelled = True
 */
                    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1359, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1359, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_1 = NULL;
                    __pyx_t_13 = 0;
                    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
                      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
                      if (likely(__pyx_t_1)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                        __Pyx_INCREF(__pyx_t_1);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_15, function);
                        __pyx_t_13 = 1;
                      }
                    }
                    {
                      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
                      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
                      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1359, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    }
                    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_20); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1359, __pyx_L45_error)
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    if (__pyx_t_6) {
                      __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_math); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1359, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1359, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1359, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_21 = NULL;
                      __pyx_t_13 = 0;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_21)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_21);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_13 = 1;
                        }
                      }
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_15};
                        __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                        if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1359, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_20);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }
                      __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_20); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L45_error)
                      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                      __pyx_t_14 = __pyx_t_16;
                    } else {
                      __pyx_t_14 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
                    }
                    __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_14;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1360
 *                             # if the market is force stopped then _current_timestamp is NaN
 *                             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                             for order in incomplete_orders:             # <<<<<<<<<<<<<<
 *                                 order.has_been_cancelled = True
 *                                 self.c_expire_order(order.client_order_id, 10)
 */
                    __pyx_t_20 = __pyx_cur_scope->__pyx_v_incomplete_orders; __Pyx_INCREF(__pyx_t_20); __pyx_t_2 = 0;
                    for (;;) {
                      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_20)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1360, __pyx_L45_error)
                      #else
                      __pyx_t_1 = PySequence_ITEM(__pyx_t_20, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      #endif
                      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
                      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_1);
                      __Pyx_GIVEREF(__pyx_t_1);
                      __pyx_t_1 = 0;

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1361
 *                             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                             for order in incomplete_orders:
 *                                 order.has_been_cancelled = True             # <<<<<<<<<<<<<<
 *                                 self.c_expire_order(order.client_order_id, 10)
 *                                 self.c_trigger_event(
 */
                      if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_has_been_cancelled, Py_True) < 0) __PYX_ERR(0, 1361, __pyx_L45_error)

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1362
 *                             for order in incomplete_orders:
 *                                 order.has_been_cancelled = True
 *                                 self.c_expire_order(order.client_order_id, 10)             # <<<<<<<<<<<<<<
 *                                 self.c_trigger_event(
 *                                     self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1362, __pyx_L45_error)
                      __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_1), 10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1362, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1364
 *                                 self.c_expire_order(order.client_order_id, 10)
 *                                 self.c_trigger_event(
 *                                     self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                     OrderCancelledEvent(current_timestamp, order.client_order_id)
 *                                 )
 */
                      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1364, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_19 = __Pyx_PyInt_As_int64_t(__pyx_t_15); if (unlikely((__pyx_t_19 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1364, __pyx_L45_error)
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1365
 *                                 self.c_trigger_event(
 *                                     self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                     OrderCancelledEvent(current_timestamp, order.client_order_id)             # <<<<<<<<<<<<<<
 *                                 )
 *                                 order_ids = order_ids + order.client_order_id + " "
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_21 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1365, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_21);
                      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1365, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_4 = NULL;
                      __pyx_t_13 = 0;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_4)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_4);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_13 = 1;
                        }
                      }
                      {
                        PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_21, __pyx_t_9};
                        __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
                        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1365, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1363
 *                                 order.has_been_cancelled = True
 *                                 self.c_expire_order(order.client_order_id, 10)
 *                                 self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                                     self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                     OrderCancelledEvent(current_timestamp, order.client_order_id)
 */
                      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_19, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1363, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1367
 *                                     OrderCancelledEvent(current_timestamp, order.client_order_id)
 *                                 )
 *                                 order_ids = order_ids + order.client_order_id + " "             # <<<<<<<<<<<<<<
 * 
 *                             self.logger().info(f"The limit orders {order_ids}have been hard cancelled according "
 */
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_15 = PyNumber_Add(__pyx_cur_scope->__pyx_v_order_ids, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1367, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_1 = PyNumber_Add(__pyx_t_15, __pyx_kp_u__26); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_ids);
                      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_ids, __pyx_t_1);
                      __Pyx_GIVEREF(__pyx_t_1);
                      __pyx_t_1 = 0;

                      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1360
 *                             # if the market is force stopped then _current_timestamp is NaN
 *                             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                             for order in incomplete_orders:             # <<<<<<<<<<<<<<
 *                                 order.has_been_cancelled = True
 *                                 self.c_expire_order(order.client_order_id, 10)
 */
                    }
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1369
 *                                 order_ids = order_ids + order.client_order_id + " "
 * 
 *                             self.logger().info(f"The limit orders {order_ids}have been hard cancelled according "             # <<<<<<<<<<<<<<
 *                                                f"to transaction hash {tx_hash}.")
 * 
 */
                    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1369, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_9 = NULL;
                    __pyx_t_13 = 0;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
                      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_15);
                      if (likely(__pyx_t_9)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                        __Pyx_INCREF(__pyx_t_9);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_15, function);
                        __pyx_t_13 = 1;
                      }
                    }
                    {
                      PyObject *__pyx_callargs[1] = {__pyx_t_9, };
                      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1369, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    }
                    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1369, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1369, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_2 = 0;
                    __pyx_t_22 = 127;
                    __Pyx_INCREF(__pyx_kp_u_The_limit_orders);
                    __pyx_t_2 += 17;
                    __Pyx_GIVEREF(__pyx_kp_u_The_limit_orders);
                    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_The_limit_orders);
                    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_ids, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1369, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_22;
                    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
                    __Pyx_GIVEREF(__pyx_t_9);
                    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
                    __pyx_t_9 = 0;
                    __Pyx_INCREF(__pyx_kp_u_have_been_hard_cancelled_accordi);
                    __pyx_t_2 += 55;
                    __Pyx_GIVEREF(__pyx_kp_u_have_been_hard_cancelled_accordi);
                    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_have_been_hard_cancelled_accordi);

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1370
 * 
 *                             self.logger().info(f"The limit orders {order_ids}have been hard cancelled according "
 *                                                f"to transaction hash {tx_hash}.")             # <<<<<<<<<<<<<<
 * 
 *                             return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 */
                    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1370, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_22;
                    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
                    __Pyx_GIVEREF(__pyx_t_9);
                    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
                    __pyx_t_9 = 0;
                    __Pyx_INCREF(__pyx_kp_u__15);
                    __pyx_t_2 += 1;
                    __Pyx_GIVEREF(__pyx_kp_u__15);
                    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__15);

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1369
 *                                 order_ids = order_ids + order.client_order_id + " "
 * 
 *                             self.logger().info(f"The limit orders {order_ids}have been hard cancelled according "             # <<<<<<<<<<<<<<
 *                                                f"to transaction hash {tx_hash}.")
 * 
 */
                    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_22); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1369, __pyx_L45_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_1 = NULL;
                    __pyx_t_13 = 0;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
                      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
                      if (likely(__pyx_t_1)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                        __Pyx_INCREF(__pyx_t_1);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_15, function);
                        __pyx_t_13 = 1;
                      }
                    }
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_9};
                      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
                      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1369, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1372
 *                                                f"to transaction hash {tx_hash}.")
 * 
 *                             return [CancellationResult(oid, True) for oid in incomplete_order_ids]             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network(
 */
                    __Pyx_XDECREF(__pyx_r);
                    { /* enter inner scope */
                      __pyx_t_20 = PyList_New(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1372, __pyx_L45_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      __pyx_t_15 = __pyx_cur_scope->__pyx_v_incomplete_order_ids; __Pyx_INCREF(__pyx_t_15); __pyx_t_2 = 0;
                      for (;;) {
                        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_15)) break;
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_2); __Pyx_INCREF(__pyx_t_9); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1372, __pyx_L45_error)
                        #else
                        __pyx_t_9 = PySequence_ITEM(__pyx_t_15, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1372, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        #endif
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_oid);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_oid, __pyx_t_9);
                        __Pyx_GIVEREF(__pyx_t_9);
                        __pyx_t_9 = 0;
                        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1372, __pyx_L45_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __pyx_t_21 = NULL;
                        __pyx_t_13 = 0;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
                          if (likely(__pyx_t_21)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                            __Pyx_INCREF(__pyx_t_21);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_1, function);
                            __pyx_t_13 = 1;
                          }
                        }
                        {
                          PyObject *__pyx_callargs[3] = {__pyx_t_21, __pyx_cur_scope->__pyx_8genexpr8__pyx_v_oid, Py_True};
                          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
                          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1372, __pyx_L45_error)
                          __Pyx_GOTREF(__pyx_t_9);
                          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        }
                        if (unlikely(__Pyx_ListComp_Append(__pyx_t_20, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1372, __pyx_L45_error)
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    } /* exit inner scope */
                    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_20);
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    goto __pyx_L49_try_return;

                    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1356
 *                         if receipt["status"] == 0:
 *                             return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 *                         elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                             order_ids = ""
 *                             # if the market is force stopped then _current_timestamp is NaN
 */
                  }
                  __pyx_L51_continue:;
                }

                /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1347
 *             receipt = None
 *             try:
 *                 async with timeout(timeout_seconds):             # <<<<<<<<<<<<<<
 *                     while receipt is None or receipt["blockNumber"] is None:
 *                         receipt = self.get_tx_hash_receipt(tx_hash)
 */
              }
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
              __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
              goto __pyx_L50_try_end;
              __pyx_L45_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              /*except:*/ {
                __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_20, &__pyx_t_15, &__pyx_t_9) < 0) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                __Pyx_GOTREF(__pyx_t_20);
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_1 = PyTuple_Pack(3, __pyx_t_20, __pyx_t_15, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_1, NULL);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_27);
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                __Pyx_XGOTREF(__pyx_r);
                if (likely(__pyx_r)) {
                  __Pyx_XGIVEREF(__pyx_t_9);
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_9;
                  __Pyx_XGIVEREF(__pyx_t_10);
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_10;
                  __Pyx_XGIVEREF(__pyx_t_11);
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_11;
                  __Pyx_XGIVEREF(__pyx_t_12);
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_12;
                  __Pyx_XGIVEREF(__pyx_t_15);
                  __pyx_cur_scope->__pyx_t_4 = __pyx_t_15;
                  __Pyx_XGIVEREF(__pyx_t_20);
                  __pyx_cur_scope->__pyx_t_5 = __pyx_t_20;
                  __Pyx_XGIVEREF(__pyx_t_23);
                  __pyx_cur_scope->__pyx_t_6 = __pyx_t_23;
                  __Pyx_XGIVEREF(__pyx_t_24);
                  __pyx_cur_scope->__pyx_t_7 = __pyx_t_24;
                  __Pyx_XGIVEREF(__pyx_t_25);
                  __pyx_cur_scope->__pyx_t_8 = __pyx_t_25;
                  __Pyx_XGIVEREF(__pyx_t_26);
                  __pyx_cur_scope->__pyx_t_9 = __pyx_t_26;
                  __Pyx_XGIVEREF(__pyx_t_27);
                  __pyx_cur_scope->__pyx_t_10 = __pyx_t_27;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  __Pyx_Coroutine_SwapException(__pyx_generator);
                  /* return from generator, awaiting value */
                  __pyx_generator->resume_label = 4;
                  return __pyx_r;
                  __pyx_L69_resume_from_await:;
                  __pyx_t_9 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_cur_scope->__pyx_t_0 = 0;
                  __Pyx_XGOTREF(__pyx_t_9);
                  __pyx_t_10 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_cur_scope->__pyx_t_1 = 0;
                  __Pyx_XGOTREF(__pyx_t_10);
                  __pyx_t_11 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_cur_scope->__pyx_t_2 = 0;
                  __Pyx_XGOTREF(__pyx_t_11);
                  __pyx_t_12 = __pyx_cur_scope->__pyx_t_3;
                  __pyx_cur_scope->__pyx_t_3 = 0;
                  __Pyx_XGOTREF(__pyx_t_12);
                  __pyx_t_15 = __pyx_cur_scope->__pyx_t_4;
                  __pyx_cur_scope->__pyx_t_4 = 0;
                  __Pyx_XGOTREF(__pyx_t_15);
                  __pyx_t_20 = __pyx_cur_scope->__pyx_t_5;
                  __pyx_cur_scope->__pyx_t_5 = 0;
                  __Pyx_XGOTREF(__pyx_t_20);
                  __pyx_t_23 = __pyx_cur_scope->__pyx_t_6;
                  __pyx_cur_scope->__pyx_t_6 = 0;
                  __Pyx_XGOTREF(__pyx_t_23);
                  __pyx_t_24 = __pyx_cur_scope->__pyx_t_7;
                  __pyx_cur_scope->__pyx_t_7 = 0;
                  __Pyx_XGOTREF(__pyx_t_24);
                  __pyx_t_25 = __pyx_cur_scope->__pyx_t_8;
                  __pyx_cur_scope->__pyx_t_8 = 0;
                  __Pyx_XGOTREF(__pyx_t_25);
                  __pyx_t_26 = __pyx_cur_scope->__pyx_t_9;
                  __pyx_cur_scope->__pyx_t_9 = 0;
                  __Pyx_XGOTREF(__pyx_t_26);
                  __pyx_t_27 = __pyx_cur_scope->__pyx_t_10;
                  __pyx_cur_scope->__pyx_t_10 = 0;
                  __Pyx_XGOTREF(__pyx_t_27);
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                  __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
                } else {
                  __pyx_t_1 = NULL;
                  if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                  __Pyx_GOTREF(__pyx_t_1);
                }
                __pyx_t_27 = __pyx_t_1;
                __pyx_t_1 = 0;
                __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_27);
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                if (__pyx_t_6 < 0) __PYX_ERR(0, 1347, __pyx_L47_except_error)
                __pyx_t_5 = ((!(__pyx_t_6 != 0)) != 0);
                if (unlikely(__pyx_t_5)) {
                  __Pyx_GIVEREF(__pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_15);
                  __Pyx_XGIVEREF(__pyx_t_9);
                  __Pyx_ErrRestoreWithState(__pyx_t_20, __pyx_t_15, __pyx_t_9);
                  __pyx_t_20 = 0; __pyx_t_15 = 0; __pyx_t_9 = 0; 
                  __PYX_ERR(0, 1347, __pyx_L47_except_error)
                }
                __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                goto __pyx_L46_exception_handled;
              }
              __pyx_L47_except_error:;
              __Pyx_XGIVEREF(__pyx_t_24);
              __Pyx_XGIVEREF(__pyx_t_25);
              __Pyx_XGIVEREF(__pyx_t_26);
              __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);
              goto __pyx_L34_error;
              __pyx_L49_try_return:;
              __Pyx_XGIVEREF(__pyx_t_24);
              __Pyx_XGIVEREF(__pyx_t_25);
              __Pyx_XGIVEREF(__pyx_t_26);
              __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);
              goto __pyx_L42_return;
              __pyx_L46_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_24);
              __Pyx_XGIVEREF(__pyx_t_25);
              __Pyx_XGIVEREF(__pyx_t_26);
              __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);
              __pyx_L50_try_end:;
            }
          }
          /*finally:*/ {
            /*normal exit:*/{
              if (__pyx_t_23) {
                __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_tuple__21, NULL);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1347, __pyx_L34_error)
                __Pyx_GOTREF(__pyx_t_26);
                __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_26);
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                __Pyx_XGOTREF(__pyx_r);
                if (likely(__pyx_r)) {
                  __Pyx_XGIVEREF(__pyx_t_10);
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
                  __Pyx_XGIVEREF(__pyx_t_11);
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
                  __Pyx_XGIVEREF(__pyx_t_12);
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
                  __Pyx_XGIVEREF(__pyx_t_23);
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_23;
                  __Pyx_XGIVEREF(__pyx_t_26);
                  __pyx_cur_scope->__pyx_t_4 = __pyx_t_26;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                  /* return from generator, awaiting value */
                  __pyx_generator->resume_label = 5;
                  return __pyx_r;
                  __pyx_L70_resume_from_await:;
                  __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_cur_scope->__pyx_t_0 = 0;
                  __Pyx_XGOTREF(__pyx_t_10);
                  __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_cur_scope->__pyx_t_1 = 0;
                  __Pyx_XGOTREF(__pyx_t_11);
                  __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_cur_scope->__pyx_t_2 = 0;
                  __Pyx_XGOTREF(__pyx_t_12);
                  __pyx_t_23 = __pyx_cur_scope->__pyx_t_3;
                  __pyx_cur_scope->__pyx_t_3 = 0;
                  __Pyx_XGOTREF(__pyx_t_23);
                  __pyx_t_26 = __pyx_cur_scope->__pyx_t_4;
                  __pyx_cur_scope->__pyx_t_4 = 0;
                  __Pyx_XGOTREF(__pyx_t_26);
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1347, __pyx_L34_error)
                  __pyx_t_9 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_9);
                } else {
                  __pyx_t_9 = NULL;
                  if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_9) < 0) __PYX_ERR(0, 1347, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_9);
                }
                __pyx_t_26 = __pyx_t_9;
                __pyx_t_9 = 0;
                __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
              }
              goto __pyx_L44;
            }
            __pyx_L42_return: {
              __Pyx_PyThreadState_assign
              __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_27, &__pyx_t_28, &__pyx_t_29);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_26, &__pyx_t_25, &__pyx_t_24) < 0)) __Pyx_ErrFetch(&__pyx_t_26, &__pyx_t_25, &__pyx_t_24);
              __Pyx_XGOTREF(__pyx_t_26);
              __Pyx_XGOTREF(__pyx_t_25);
              __Pyx_XGOTREF(__pyx_t_24);
              __Pyx_XGOTREF(__pyx_t_27);
              __Pyx_XGOTREF(__pyx_t_28);
              __Pyx_XGOTREF(__pyx_t_29);
              __pyx_t_30 = __pyx_r;
              __pyx_r = 0;
              if (__pyx_t_23) {
                __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_tuple__21, NULL);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 1347, __pyx_L34_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_31);
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __Pyx_XGOTREF(__pyx_r);
                if (likely(__pyx_r)) {
                  __Pyx_XGIVEREF(__pyx_t_10);
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
                  __Pyx_XGIVEREF(__pyx_t_11);
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
                  __Pyx_XGIVEREF(__pyx_t_12);
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
                  __Pyx_XGIVEREF(__pyx_t_23);
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_23;
                  __Pyx_XGIVEREF(__pyx_t_24);
                  __pyx_cur_scope->__pyx_t_4 = __pyx_t_24;
                  __Pyx_XGIVEREF(__pyx_t_25);
                  __pyx_cur_scope->__pyx_t_5 = __pyx_t_25;
                  __Pyx_XGIVEREF(__pyx_t_26);
                  __pyx_cur_scope->__pyx_t_6 = __pyx_t_26;
                  __Pyx_XGIVEREF(__pyx_t_27);
                  __pyx_cur_scope->__pyx_t_7 = __pyx_t_27;
                  __Pyx_XGIVEREF(__pyx_t_28);
                  __pyx_cur_scope->__pyx_t_8 = __pyx_t_28;
                  __Pyx_XGIVEREF(__pyx_t_29);
                  __pyx_cur_scope->__pyx_t_9 = __pyx_t_29;
                  __Pyx_XGIVEREF(__pyx_t_30);
                  __pyx_cur_scope->__pyx_t_10 = __pyx_t_30;
                  __Pyx_XGIVEREF(__pyx_t_31);
                  __pyx_cur_scope->__pyx_t_11 = __pyx_t_31;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                  /* return from generator, awaiting value */
                  __pyx_generator->resume_label = 6;
                  return __pyx_r;
                  __pyx_L71_resume_from_await:;
                  __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_cur_scope->__pyx_t_0 = 0;
                  __Pyx_XGOTREF(__pyx_t_10);
                  __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_cur_scope->__pyx_t_1 = 0;
                  __Pyx_XGOTREF(__pyx_t_11);
                  __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_cur_scope->__pyx_t_2 = 0;
                  __Pyx_XGOTREF(__pyx_t_12);
                  __pyx_t_23 = __pyx_cur_scope->__pyx_t_3;
                  __pyx_cur_scope->__pyx_t_3 = 0;
                  __Pyx_XGOTREF(__pyx_t_23);
                  __pyx_t_24 = __pyx_cur_scope->__pyx_t_4;
                  __pyx_cur_scope->__pyx_t_4 = 0;
                  __Pyx_XGOTREF(__pyx_t_24);
                  __pyx_t_25 = __pyx_cur_scope->__pyx_t_5;
                  __pyx_cur_scope->__pyx_t_5 = 0;
                  __Pyx_XGOTREF(__pyx_t_25);
                  __pyx_t_26 = __pyx_cur_scope->__pyx_t_6;
                  __pyx_cur_scope->__pyx_t_6 = 0;
                  __Pyx_XGOTREF(__pyx_t_26);
                  __pyx_t_27 = __pyx_cur_scope->__pyx_t_7;
                  __pyx_cur_scope->__pyx_t_7 = 0;
                  __Pyx_XGOTREF(__pyx_t_27);
                  __pyx_t_28 = __pyx_cur_scope->__pyx_t_8;
                  __pyx_cur_scope->__pyx_t_8 = 0;
                  __Pyx_XGOTREF(__pyx_t_28);
                  __pyx_t_29 = __pyx_cur_scope->__pyx_t_9;
                  __pyx_cur_scope->__pyx_t_9 = 0;
                  __Pyx_XGOTREF(__pyx_t_29);
                  __pyx_t_30 = __pyx_cur_scope->__pyx_t_10;
                  __pyx_cur_scope->__pyx_t_10 = 0;
                  __Pyx_XGOTREF(__pyx_t_30);
                  __pyx_t_31 = __pyx_cur_scope->__pyx_t_11;
                  __pyx_cur_scope->__pyx_t_11 = 0;
                  __Pyx_XGOTREF(__pyx_t_31);
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1347, __pyx_L34_error)
                  __pyx_t_9 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_9);
                } else {
                  __pyx_t_9 = NULL;
                  if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_9) < 0) __PYX_ERR(0, 1347, __pyx_L34_error)
                  __Pyx_GOTREF(__pyx_t_9);
                }
                __pyx_t_31 = __pyx_t_9;
                __pyx_t_9 = 0;
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              }
              __pyx_r = __pyx_t_30;
              __pyx_t_30 = 0;
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_27);
                __Pyx_XGIVEREF(__pyx_t_28);
                __Pyx_XGIVEREF(__pyx_t_29);
                __Pyx_ExceptionReset(__pyx_t_27, __pyx_t_28, __pyx_t_29);
              }
              __Pyx_XGIVEREF(__pyx_t_26);
              __Pyx_XGIVEREF(__pyx_t_25);
              __Pyx_XGIVEREF(__pyx_t_24);
              __Pyx_ErrRestore(__pyx_t_26, __pyx_t_25, __pyx_t_24);
              __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0;
              goto __pyx_L38_try_return;
            }
            __pyx_L44:;
          }
          goto __pyx_L72;
          __pyx_L40_error:;
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          goto __pyx_L34_error;
          __pyx_L72:;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1346
 *             tx_hash = self._exchange.cancel_orders_up_to(self._latest_salt)
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 async with timeout(timeout_seconds):
 *                     while receipt is None or receipt["blockNumber"] is None:
 */
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L39_try_end;
      __pyx_L34_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1373
 * 
 *                             return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     f"Unexpected error cancelling orders.",
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_15, &__pyx_t_20) < 0) __PYX_ERR(0, 1373, __pyx_L36_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_GOTREF(__pyx_t_20);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1374
 *                             return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,
 */
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1374, __pyx_L36_except_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_4 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_21);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_21, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1374, __pyx_L36_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        }
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_network); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1374, __pyx_L36_except_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1376
 *                 self.logger().network(
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg=f"Failed to cancel orders on Bamboo Relay. "
 *                                     f"Check Ethereum wallet and network connection."
 */
        __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1376, __pyx_L36_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 1376, __pyx_L36_except_error)
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2) < 0) __PYX_ERR(0, 1376, __pyx_L36_except_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1374
 *                             return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_tuple__27, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1374, __pyx_L36_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        goto __pyx_L35_exception_handled;
      }
      goto __pyx_L36_except_error;
      __pyx_L36_except_error:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1346
 *             tx_hash = self._exchange.cancel_orders_up_to(self._latest_salt)
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 async with timeout(timeout_seconds):
 *                     while receipt is None or receipt["blockNumber"] is None:
 */
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L38_try_return:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      goto __pyx_L0;
      __pyx_L35_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      __pyx_L39_try_end:;
    }
  }
  __pyx_L18:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1380
 *                                     f"Check Ethereum wallet and network connection."
 *                 )
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]             # <<<<<<<<<<<<<<
 * 
 *     async def execute_trade(self,
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_20 = PyList_New(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_15 = __pyx_cur_scope->__pyx_v_incomplete_order_ids; __Pyx_INCREF(__pyx_t_15); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_15)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_2); __Pyx_INCREF(__pyx_t_9); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1380, __pyx_L1_error)
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_15, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr9__pyx_v_oid);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr9__pyx_v_oid, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_cur_scope->__pyx_8genexpr9__pyx_v_oid, Py_False};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_20, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  } /* exit inner scope */
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1287
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int order_timestamp_diff
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_64generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1382
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 * 
 *     async def execute_trade(self,             # <<<<<<<<<<<<<<
 *                             order_id: str,
 *                             order_type: OrderType,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade = {"execute_trade", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_trade_type = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_expires = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_trade (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_order_type,&__pyx_n_s_trade_type,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_price,&__pyx_n_s_expires,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_order_type,&__pyx_n_s_trade_type,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_price,&__pyx_n_s_expires,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 1); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trade_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 2); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 3); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 4); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 5); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_expires)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1382, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, 6); __PYX_ERR(0, 1382, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_trade") < 0)) __PYX_ERR(0, 1382, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_order_type = values[1];
    __pyx_v_trade_type = values[2];
    __pyx_v_trading_pair = ((PyObject*)values[3]);
    __pyx_v_amount = values[4];
    __pyx_v_price = values[5];
    __pyx_v_expires = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_trade", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 1382, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.execute_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 1383, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1386, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_62execute_trade(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_order_type, __pyx_v_trade_type, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_price, __pyx_v_expires);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_62execute_trade(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_price, PyObject *__pyx_v_expires) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_trade", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1382, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_trade_type = __pyx_v_trade_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trade_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trade_type);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  __pyx_cur_scope->__pyx_v_expires = __pyx_v_expires;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_expires);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_expires);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_64generator14, __pyx_codeobj__28, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_trade, __pyx_n_s_BambooRelayExchange_execute_trad, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.execute_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_64generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int64_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_trade", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L19_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1382, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1392
 *         cdef:
 *             object q_price
 *             object q_amt = self.c_quantize_order_amount(trading_pair, amount)             # <<<<<<<<<<<<<<
 *             object amount_to_fill = q_amt
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_q_amt = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1393
 *             object q_price
 *             object q_amt = self.c_quantize_order_amount(trading_pair, amount)
 *             object amount_to_fill = q_amt             # <<<<<<<<<<<<<<
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *             str trade_type_desc = trade_type.name.lower()
 */
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_q_amt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_q_amt);
  __pyx_cur_scope->__pyx_v_amount_to_fill = __pyx_cur_scope->__pyx_v_q_amt;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1394
 *             object q_amt = self.c_quantize_order_amount(trading_pair, amount)
 *             object amount_to_fill = q_amt
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *             str trade_type_desc = trade_type.name.lower()
 *             str type_str = order_type.name.lower()
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1394, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1395
 *             object amount_to_fill = q_amt
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *             str trade_type_desc = trade_type.name.lower()             # <<<<<<<<<<<<<<
 *             str type_str = order_type.name.lower()
 *         try:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trade_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_trade_type_desc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1396
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *             str trade_type_desc = trade_type.name.lower()
 *             str type_str = order_type.name.lower()             # <<<<<<<<<<<<<<
 *         try:
 *             if q_amt < trading_rule.min_order_size:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_type_str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1397
 *             str trade_type_desc = trade_type.name.lower()
 *             str type_str = order_type.name.lower()
 *         try:             # <<<<<<<<<<<<<<
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1398
 *             str type_str = order_type.name.lower()
 *         try:
 *             if q_amt < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 *                                  f"minimum order size {trading_rule.min_order_size}")
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_q_amt, __pyx_cur_scope->__pyx_v_trading_rule->min_order_size, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1398, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1398, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_t_8)) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1399
 *         try:
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "             # <<<<<<<<<<<<<<
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:
 */
        __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __pyx_t_2 = __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyUnicode_Type_capitalize, __pyx_cur_scope->__pyx_v_trade_type_desc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_order_amount);
        __pyx_t_9 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_order_amount);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_order_amount);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_q_amt, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_lower_than_the_minimum_order);
        __pyx_t_9 += 38;
        __Pyx_GIVEREF(__pyx_kp_u_is_lower_than_the_minimum_order);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_is_lower_than_the_minimum_order);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1400
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 *                                  f"minimum order size {trading_rule.min_order_size}")             # <<<<<<<<<<<<<<
 *             if q_amt > trading_rule.max_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "
 */
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_rule->min_order_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1399
 *         try:
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "             # <<<<<<<<<<<<<<
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:
 */
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 1399, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1398
 *             str type_str = order_type.name.lower()
 *         try:
 *             if q_amt < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 *                                  f"minimum order size {trading_rule.min_order_size}")
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1401
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "
 *                                  f"maximum order size {trading_rule.max_order_size}")
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_q_amt, __pyx_cur_scope->__pyx_v_trading_rule->max_order_size, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1401, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1401, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_t_8)) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1402
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "             # <<<<<<<<<<<<<<
 *                                  f"maximum order size {trading_rule.max_order_size}")
 * 
 */
        __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __pyx_t_3 = __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyUnicode_Type_capitalize, __pyx_cur_scope->__pyx_v_trade_type_desc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_order_amount);
        __pyx_t_9 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_order_amount);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_order_amount);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_q_amt, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_greater_than_the_maximum_ord);
        __pyx_t_9 += 40;
        __Pyx_GIVEREF(__pyx_kp_u_is_greater_than_the_maximum_ord);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_is_greater_than_the_maximum_ord);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1403
 *             if q_amt > trading_rule.max_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "
 *                                  f"maximum order size {trading_rule.max_order_size}")             # <<<<<<<<<<<<<<
 * 
 *             if order_type is OrderType.LIMIT:
 */
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_rule->max_order_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1403, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1402
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "             # <<<<<<<<<<<<<<
 *                                  f"maximum order size {trading_rule.max_order_size}")
 * 
 */
        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 1402, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1401
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 *                                  f"minimum order size {trading_rule.min_order_size}")
 *             if q_amt > trading_rule.max_order_size:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is greater than the "
 *                                  f"maximum order size {trading_rule.max_order_size}")
 */
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1405
 *                                  f"maximum order size {trading_rule.max_order_size}")
 * 
 *             if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = (__pyx_t_8 != 0);
      if (__pyx_t_11) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1406
 * 
 *             if order_type is OrderType.LIMIT:
 *                 if math.isnan(price):             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isnan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_price};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1406, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(__pyx_t_11)) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1407
 *             if order_type is OrderType.LIMIT:
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")             # <<<<<<<<<<<<<<
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 1407, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1406
 * 
 *             if order_type is OrderType.LIMIT:
 *                 if math.isnan(price):             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1408
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 *                 elif expires < time.time():
 */
        __pyx_t_11 = (__pyx_cur_scope->__pyx_v_expires == Py_None);
        __pyx_t_8 = (__pyx_t_11 != 0);
        if (unlikely(__pyx_t_8)) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1409
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")             # <<<<<<<<<<<<<<
 *                 elif expires < time.time():
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 1409, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1408
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 *                 elif expires < time.time():
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1410
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 *                 elif expires < time.time():             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")
 *                 else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1410, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1410, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_3, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_expires, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1410, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1410, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(__pyx_t_8)) {

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1411
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 *                 elif expires < time.time():
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")             # <<<<<<<<<<<<<<
 *                 else:
 *                     q_price = self.c_quantize_order_price(trading_pair, price)
 */
          __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = 0;
          __pyx_t_10 = 127;
          __Pyx_INCREF(__pyx_kp_u_expiration_time);
          __pyx_t_9 += 16;
          __Pyx_GIVEREF(__pyx_kp_u_expiration_time);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_expiration_time);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_expires, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
          __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u_must_be_greater_than_current_ti);
          __pyx_t_9 += 35;
          __Pyx_GIVEREF(__pyx_kp_u_must_be_greater_than_current_ti);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_must_be_greater_than_current_ti);
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_3, };
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1411, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_10;
          __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1411, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 1411, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1410
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 *                 elif expires < time.time():             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")
 *                 else:
 */
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1413
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")
 *                 else:
 *                     q_price = self.c_quantize_order_price(trading_pair, price)             # <<<<<<<<<<<<<<
 *                     exchange_order_id, zero_ex_order = await self.submit_limit_order(trading_pair=trading_pair,
 *                                                                                      trade_type=trade_type,
 */
        /*else*/ {
          __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1413, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_v_q_price = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1414
 *                 else:
 *                     q_price = self.c_quantize_order_price(trading_pair, price)
 *                     exchange_order_id, zero_ex_order = await self.submit_limit_order(trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                                                                      trade_type=trade_type,
 *                                                                                      is_coordinated=self._use_coordinator,
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_submit_limit_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1414, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trading_pair, __pyx_cur_scope->__pyx_v_trading_pair) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1415
 *                     q_price = self.c_quantize_order_price(trading_pair, price)
 *                     exchange_order_id, zero_ex_order = await self.submit_limit_order(trading_pair=trading_pair,
 *                                                                                      trade_type=trade_type,             # <<<<<<<<<<<<<<
 *                                                                                      is_coordinated=self._use_coordinator,
 *                                                                                      amount=q_amt,
 */
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trade_type, __pyx_cur_scope->__pyx_v_trade_type) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1416
 *                     exchange_order_id, zero_ex_order = await self.submit_limit_order(trading_pair=trading_pair,
 *                                                                                      trade_type=trade_type,
 *                                                                                      is_coordinated=self._use_coordinator,             # <<<<<<<<<<<<<<
 *                                                                                      amount=q_amt,
 *                                                                                      price=q_price,
 */
          __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_self->_use_coordinator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1416, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_is_coordinated, __pyx_t_2) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1417
 *                                                                                      trade_type=trade_type,
 *                                                                                      is_coordinated=self._use_coordinator,
 *                                                                                      amount=q_amt,             # <<<<<<<<<<<<<<
 *                                                                                      price=q_price,
 *                                                                                      expires=expires)
 */
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_amount, __pyx_cur_scope->__pyx_v_q_amt) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1418
 *                                                                                      is_coordinated=self._use_coordinator,
 *                                                                                      amount=q_amt,
 *                                                                                      price=q_price,             # <<<<<<<<<<<<<<
 *                                                                                      expires=expires)
 *                     self.c_start_tracking_limit_order(order_id=order_id,
 */
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_price, __pyx_cur_scope->__pyx_v_q_price) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1419
 *                                                                                      amount=q_amt,
 *                                                                                      price=q_price,
 *                                                                                      expires=expires)             # <<<<<<<<<<<<<<
 *                     self.c_start_tracking_limit_order(order_id=order_id,
 *                                                       exchange_order_id=exchange_order_id,
 */
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_expires, __pyx_cur_scope->__pyx_v_expires) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1414
 *                 else:
 *                     q_price = self.c_quantize_order_price(trading_pair, price)
 *                     exchange_order_id, zero_ex_order = await self.submit_limit_order(trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                                                                      trade_type=trade_type,
 *                                                                                      is_coordinated=self._use_coordinator,
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_6);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 1;
            return __pyx_r;
            __pyx_L14_resume_from_await:;
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_6);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1414, __pyx_L4_error)
            __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
          } else {
            __pyx_t_2 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
            PyObject* sequence = __pyx_t_2;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1414, __pyx_L4_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_1);
            #else
            __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1414, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3);
            index = 0; __pyx_t_12 = __pyx_t_13(__pyx_t_3); if (unlikely(!__pyx_t_12)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_12);
            index = 1; __pyx_t_1 = __pyx_t_13(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_1);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_3), 2) < 0) __PYX_ERR(0, 1414, __pyx_L4_error)
            __pyx_t_13 = NULL;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_13 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1414, __pyx_L4_error)
            __pyx_L16_unpacking_done:;
          }
          __Pyx_GIVEREF(__pyx_t_12);
          __pyx_cur_scope->__pyx_v_exchange_order_id = __pyx_t_12;
          __pyx_t_12 = 0;
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_v_zero_ex_order = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1421
 *                                                                                      expires=expires)
 *                     self.c_start_tracking_limit_order(order_id=order_id,
 *                                                       exchange_order_id=exchange_order_id,             # <<<<<<<<<<<<<<
 *                                                       trading_pair=trading_pair,
 *                                                       order_type=order_type,
 */
          if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_exchange_order_id))||((__pyx_cur_scope->__pyx_v_exchange_order_id) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_cur_scope->__pyx_v_exchange_order_id))) __PYX_ERR(0, 1421, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1428
 *                                                       price=q_price,
 *                                                       amount=q_amt,
 *                                                       expires=expires,             # <<<<<<<<<<<<<<
 *                                                       zero_ex_order=zero_ex_order)
 *                     if order_id in self._in_flight_pending_limit_orders:
 */
          __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_cur_scope->__pyx_v_expires); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1428, __pyx_L4_error)

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1420
 *                                                                                      price=q_price,
 *                                                                                      expires=expires)
 *                     self.c_start_tracking_limit_order(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                                       exchange_order_id=exchange_order_id,
 *                                                       trading_pair=trading_pair,
 */
          __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_order_id, ((PyObject*)__pyx_cur_scope->__pyx_v_exchange_order_id), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_self->_use_coordinator, __pyx_cur_scope->__pyx_v_trade_type, __pyx_cur_scope->__pyx_v_q_price, __pyx_cur_scope->__pyx_v_q_amt, __pyx_t_4, __pyx_cur_scope->__pyx_v_zero_ex_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1420, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1430
 *                                                       expires=expires,
 *                                                       zero_ex_order=zero_ex_order)
 *                     if order_id in self._in_flight_pending_limit_orders:             # <<<<<<<<<<<<<<
 *                         # We have attempted to previously cancel this order before it was resolved as placed
 *                         if order_id in self._in_flight_pending_cancels:
 */
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_self->_in_flight_pending_limit_orders, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1430, __pyx_L4_error)
          __pyx_t_11 = (__pyx_t_8 != 0);
          if (__pyx_t_11) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1432
 *                     if order_id in self._in_flight_pending_limit_orders:
 *                         # We have attempted to previously cancel this order before it was resolved as placed
 *                         if order_id in self._in_flight_pending_cancels:             # <<<<<<<<<<<<<<
 *                             del self._in_flight_pending_cancels[order_id]
 *                             self.c_cancel("", order_id)
 */
            __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_self->_in_flight_pending_cancels, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1432, __pyx_L4_error)
            __pyx_t_8 = (__pyx_t_11 != 0);
            if (__pyx_t_8) {

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1433
 *                         # We have attempted to previously cancel this order before it was resolved as placed
 *                         if order_id in self._in_flight_pending_cancels:
 *                             del self._in_flight_pending_cancels[order_id]             # <<<<<<<<<<<<<<
 *                             self.c_cancel("", order_id)
 *                         del self._in_flight_pending_limit_orders[order_id]
 */
              if (unlikely((PyObject_DelItem(__pyx_cur_scope->__pyx_v_self->_in_flight_pending_cancels, __pyx_cur_scope->__pyx_v_order_id) < 0))) __PYX_ERR(0, 1433, __pyx_L4_error)

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1434
 *                         if order_id in self._in_flight_pending_cancels:
 *                             del self._in_flight_pending_cancels[order_id]
 *                             self.c_cancel("", order_id)             # <<<<<<<<<<<<<<
 *                         del self._in_flight_pending_limit_orders[order_id]
 *             elif order_type is OrderType.MARKET:
 */
              __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_kp_u__13, __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L4_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1432
 *                     if order_id in self._in_flight_pending_limit_orders:
 *                         # We have attempted to previously cancel this order before it was resolved as placed
 *                         if order_id in self._in_flight_pending_cancels:             # <<<<<<<<<<<<<<
 *                             del self._in_flight_pending_cancels[order_id]
 *                             self.c_cancel("", order_id)
 */
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1435
 *                             del self._in_flight_pending_cancels[order_id]
 *                             self.c_cancel("", order_id)
 *                         del self._in_flight_pending_limit_orders[order_id]             # <<<<<<<<<<<<<<
 *             elif order_type is OrderType.MARKET:
 *                 (amount_to_fill,
 */
            if (unlikely((PyObject_DelItem(__pyx_cur_scope->__pyx_v_self->_in_flight_pending_limit_orders, __pyx_cur_scope->__pyx_v_order_id) < 0))) __PYX_ERR(0, 1435, __pyx_L4_error)

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1430
 *                                                       expires=expires,
 *                                                       zero_ex_order=zero_ex_order)
 *                     if order_id in self._in_flight_pending_limit_orders:             # <<<<<<<<<<<<<<
 *                         # We have attempted to previously cancel this order before it was resolved as placed
 *                         if order_id in self._in_flight_pending_cancels:
 */
          }
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1405
 *                                  f"maximum order size {trading_rule.max_order_size}")
 * 
 *             if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 */
        goto __pyx_L12;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1436
 *                             self.c_cancel("", order_id)
 *                         del self._in_flight_pending_limit_orders[order_id]
 *             elif order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *                 (amount_to_fill,
 *                  avg_price,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1436, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = (__pyx_t_8 != 0);
      if (__pyx_t_11) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1441
 *                  tx_hash,
 *                  protocol_fee,
 *                  is_coordinated) = await self.submit_market_order(trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                                                   trade_type=trade_type,
 *                                                                   amount=q_amt,
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_submit_market_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_cur_scope->__pyx_v_trading_pair) < 0) __PYX_ERR(0, 1441, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1442
 *                  protocol_fee,
 *                  is_coordinated) = await self.submit_market_order(trading_pair=trading_pair,
 *                                                                   trade_type=trade_type,             # <<<<<<<<<<<<<<
 *                                                                   amount=q_amt,
 *                                                                   price=price)
 */
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trade_type, __pyx_cur_scope->__pyx_v_trade_type) < 0) __PYX_ERR(0, 1441, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1443
 *                  is_coordinated) = await self.submit_market_order(trading_pair=trading_pair,
 *                                                                   trade_type=trade_type,
 *                                                                   amount=q_amt,             # <<<<<<<<<<<<<<
 *                                                                   price=price)
 *                 q_price = self.c_quantize_order_price(trading_pair, Decimal(avg_price))
 */
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_amount, __pyx_cur_scope->__pyx_v_q_amt) < 0) __PYX_ERR(0, 1441, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1444
 *                                                                   trade_type=trade_type,
 *                                                                   amount=q_amt,
 *                                                                   price=price)             # <<<<<<<<<<<<<<
 *                 q_price = self.c_quantize_order_price(trading_pair, Decimal(avg_price))
 *                 self.c_start_tracking_market_order(order_id=order_id,
 */
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_price, __pyx_cur_scope->__pyx_v_price) < 0) __PYX_ERR(0, 1441, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1441
 *                  tx_hash,
 *                  protocol_fee,
 *                  is_coordinated) = await self.submit_market_order(trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                                                   trade_type=trade_type,
 *                                                                   amount=q_amt,
 */
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1441, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_12);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_7);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L19_resume_from_await:;
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_7);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1441, __pyx_L4_error)
          __pyx_t_12 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_12);
        } else {
          __pyx_t_12 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_12) < 0) __PYX_ERR(0, 1441, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
          PyObject* sequence = __pyx_t_12;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 5)) {
            if (size > 5) __Pyx_RaiseTooManyValuesError(5);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1437, __pyx_L4_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_15 = PyTuple_GET_ITEM(sequence, 4); 
          } else {
            __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_15 = PyList_GET_ITEM(sequence, 4); 
          }
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[5] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_3,&__pyx_t_14,&__pyx_t_15};
            for (i=0; i < 5; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1437, __pyx_L4_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[5] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_3,&__pyx_t_14,&__pyx_t_15};
          __pyx_t_16 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1437, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16);
          for (index=0; index < 5; index++) {
            PyObject* item = __pyx_t_13(__pyx_t_16); if (unlikely(!item)) goto __pyx_L20_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_16), 5) < 0) __PYX_ERR(0, 1437, __pyx_L4_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          goto __pyx_L21_unpacking_done;
          __pyx_L20_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1437, __pyx_L4_error)
          __pyx_L21_unpacking_done:;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1437
 *                         del self._in_flight_pending_limit_orders[order_id]
 *             elif order_type is OrderType.MARKET:
 *                 (amount_to_fill,             # <<<<<<<<<<<<<<
 *                  avg_price,
 *                  tx_hash,
 */
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_amount_to_fill);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_amount_to_fill, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_v_avg_price = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_v_tx_hash = __pyx_t_3;
        __pyx_t_3 = 0;
        __Pyx_GIVEREF(__pyx_t_14);
        __pyx_cur_scope->__pyx_v_protocol_fee = __pyx_t_14;
        __pyx_t_14 = 0;
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_cur_scope->__pyx_v_is_coordinated = __pyx_t_15;
        __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1445
 *                                                                   amount=q_amt,
 *                                                                   price=price)
 *                 q_price = self.c_quantize_order_price(trading_pair, Decimal(avg_price))             # <<<<<<<<<<<<<<
 *                 self.c_start_tracking_market_order(order_id=order_id,
 *                                                    trading_pair=trading_pair,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1445, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_cur_scope->__pyx_v_avg_price};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1445, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1445, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GIVEREF(__pyx_t_15);
        __pyx_cur_scope->__pyx_v_q_price = __pyx_t_15;
        __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1453
 *                                                    price=q_price,
 *                                                    amount=amount_to_fill,
 *                                                    protocol_fee_amount=protocol_fee / Decimal(1e18),             # <<<<<<<<<<<<<<
 *                                                    tx_hash=tx_hash)
 *             # Market events not market orders
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1453, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_float_1e18};
          __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1453, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_protocol_fee, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1453, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1449
 *                                                    trading_pair=trading_pair,
 *                                                    order_type=order_type,
 *                                                    is_coordinated=is_coordinated,             # <<<<<<<<<<<<<<
 *                                                    trade_type=trade_type,
 *                                                    price=q_price,
 */
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_coordinated); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1449, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1454
 *                                                    amount=amount_to_fill,
 *                                                    protocol_fee_amount=protocol_fee / Decimal(1e18),
 *                                                    tx_hash=tx_hash)             # <<<<<<<<<<<<<<
 *             # Market events not market orders
 *             if trade_type is TradeType.BUY:
 */
        if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_tx_hash))||((__pyx_cur_scope->__pyx_v_tx_hash) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_cur_scope->__pyx_v_tx_hash))) __PYX_ERR(0, 1454, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1453
 *                                                    price=q_price,
 *                                                    amount=amount_to_fill,
 *                                                    protocol_fee_amount=protocol_fee / Decimal(1e18),             # <<<<<<<<<<<<<<
 *                                                    tx_hash=tx_hash)
 *             # Market events not market orders
 */
        __pyx_t_15 = __pyx_t_12;
        __Pyx_INCREF(__pyx_t_15);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1446
 *                                                                   price=price)
 *                 q_price = self.c_quantize_order_price(trading_pair, Decimal(avg_price))
 *                 self.c_start_tracking_market_order(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                                    trading_pair=trading_pair,
 *                                                    order_type=order_type,
 */
        __pyx_t_14 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_market_order(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_order_type, __pyx_t_11, __pyx_cur_scope->__pyx_v_trade_type, __pyx_cur_scope->__pyx_v_q_price, __pyx_cur_scope->__pyx_v_amount_to_fill, ((PyObject*)__pyx_cur_scope->__pyx_v_tx_hash), __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1446, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        (void)(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1436
 *                             self.c_cancel("", order_id)
 *                         del self._in_flight_pending_limit_orders[order_id]
 *             elif order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *                 (amount_to_fill,
 *                  avg_price,
 */
      }
      __pyx_L12:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1456
 *                                                    tx_hash=tx_hash)
 *             # Market events not market orders
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1456, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_BUY); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1456, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_11 = (__pyx_cur_scope->__pyx_v_trade_type == __pyx_t_12);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_8 = (__pyx_t_11 != 0);
      if (__pyx_t_8) {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1457
 *             # Market events not market orders
 *             if trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1457, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_12); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1457, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1458
 *             if trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          order_type,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1458, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1459
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          order_type,
 *                                          trading_pair,
 */
        __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1459, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_15);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1463
 *                                          trading_pair,
 *                                          amount_to_fill,
 *                                          q_price,             # <<<<<<<<<<<<<<
 *                                          order_id
 *                                      ))
 */
        if (unlikely(!__pyx_cur_scope->__pyx_v_q_price)) { __Pyx_RaiseUnboundLocalError("q_price"); __PYX_ERR(0, 1463, __pyx_L4_error) }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1464
 *                                          amount_to_fill,
 *                                          q_price,
 *                                          order_id             # <<<<<<<<<<<<<<
 *                                      ))
 *             else:
 */
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_3, __pyx_t_15, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount_to_fill, __pyx_cur_scope->__pyx_v_q_price, __pyx_cur_scope->__pyx_v_order_id};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_4, 6+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1458, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1457
 *             # Market events not market orders
 *             if trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_14 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1457, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1456
 *                                                    tx_hash=tx_hash)
 *             # Market events not market orders
 *             if trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(
 */
        goto __pyx_L22;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1467
 *                                      ))
 *             else:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
      /*else*/ {
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1467, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_14); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1468
 *             else:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *                                      SellOrderCreatedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          order_type,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1468, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1469
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          order_type,
 *                                          trading_pair,
 */
        __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1469, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_15);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1473
 *                                          trading_pair,
 *                                          amount_to_fill,
 *                                          q_price,             # <<<<<<<<<<<<<<
 *                                          order_id
 *                                      ))
 */
        if (unlikely(!__pyx_cur_scope->__pyx_v_q_price)) { __Pyx_RaiseUnboundLocalError("q_price"); __PYX_ERR(0, 1473, __pyx_L4_error) }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1474
 *                                          amount_to_fill,
 *                                          q_price,
 *                                          order_id             # <<<<<<<<<<<<<<
 *                                      ))
 *             return order_id
 */
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_3, __pyx_t_15, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount_to_fill, __pyx_cur_scope->__pyx_v_q_price, __pyx_cur_scope->__pyx_v_order_id};
          __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 6+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1468, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1467
 *                                      ))
 *             else:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1467, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __pyx_L22:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1476
 *                                          order_id
 *                                      ))
 *             return order_id             # <<<<<<<<<<<<<<
 *         except Exception:
 *             self.c_stop_tracking_order(order_id)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_order_id);
      goto __pyx_L8_try_return;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1397
 *             str trade_type_desc = trade_type.name.lower()
 *             str type_str = order_type.name.lower()
 *         try:             # <<<<<<<<<<<<<<
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 */
    }
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1477
 *                                      ))
 *             return order_id
 *         except Exception:             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_order(order_id)
 *             self.logger().network(
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.execute_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(0, 1477, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GOTREF(__pyx_t_15);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1478
 *             return order_id
 *         except Exception:
 *             self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 *             self.logger().network(
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1479
 *         except Exception:
 *             self.c_stop_tracking_order(order_id)
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 *                 exc_info=True,
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_2, };
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_network); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1480
 *             self.c_stop_tracking_order(order_id)
 *             self.logger().network(
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",             # <<<<<<<<<<<<<<
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to submit {type_str} {trade_type_desc} order to Bamboo Relay. "
 */
      __pyx_t_3 = PyTuple_New(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Error_submitting);
      __pyx_t_9 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_Error_submitting);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Error_submitting);
      __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_type_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u__26);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__26);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__26);
      __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trade_type_desc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_to_Bamboo_Relay_for);
      __pyx_t_9 += 27;
      __Pyx_GIVEREF(__pyx_kp_u_order_to_Bamboo_Relay_for);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_order_to_Bamboo_Relay_for);
      __pyx_t_2 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_q_amt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u__26);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__26);
      PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u__26);
      __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u__15);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__15);
      PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u__15);
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 9, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1479
 *         except Exception:
 *             self.c_stop_tracking_order(order_id)
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 *                 exc_info=True,
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1481
 *             self.logger().network(
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 *                 exc_info=True,             # <<<<<<<<<<<<<<
 *                 app_warning_msg=f"Failed to submit {type_str} {trade_type_desc} order to Bamboo Relay. "
 *                                 f"Check Ethereum wallet and network connection."
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 1481, __pyx_L6_except_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1482
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to submit {type_str} {trade_type_desc} order to Bamboo Relay. "             # <<<<<<<<<<<<<<
 *                                 f"Check Ethereum wallet and network connection."
 *             )
 */
      __pyx_t_16 = PyTuple_New(5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1482, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_Failed_to_submit);
      __pyx_t_9 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_Failed_to_submit);
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Failed_to_submit);
      __pyx_t_18 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_type_str); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1482, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u__26);
      __pyx_t_9 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__26);
      PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_kp_u__26);
      __pyx_t_18 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trade_type_desc); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1482, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth);
      __pyx_t_9 += 69;
      __Pyx_GIVEREF(__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth);
      PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_kp_u_order_to_Bamboo_Relay_Check_Eth);
      __pyx_t_18 = __Pyx_PyUnicode_Join(__pyx_t_16, 5, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1482, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_app_warning_msg, __pyx_t_18) < 0) __PYX_ERR(0, 1481, __pyx_L6_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1479
 *         except Exception:
 *             self.c_stop_tracking_order(order_id)
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting {type_str} {trade_type_desc} order to Bamboo Relay for {str(q_amt)} {trading_pair}.",
 *                 exc_info=True,
 */
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1479, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1486
 *             )
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, order_type)
 *             )
 */
      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1486, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_18); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1486, __pyx_L6_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1487
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, order_type)             # <<<<<<<<<<<<<<
 *             )
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1487, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1487, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_1, __pyx_t_3, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_order_type};
        __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1487, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1485
 *                                 f"Check Ethereum wallet and network connection."
 *             )
 *             self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, order_type)
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1397
 *             str trade_type_desc = trade_type.name.lower()
 *             str type_str = order_type.name.lower()
 *         try:             # <<<<<<<<<<<<<<
 *             if q_amt < trading_rule.min_order_size:
 *                 raise ValueError(f"{trade_type_desc.capitalize()} order amount {q_amt} is lower than the "
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1382
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 * 
 *     async def execute_trade(self,             # <<<<<<<<<<<<<<
 *                             order_id: str,
 *                             order_type: OrderType,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("execute_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1490
 *             )
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__31;
  PyObject *__pyx_v_price = __pyx_k__32;
  PyObject *__pyx_v_kwargs = __pyx_k__33;
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_order_id = 0;
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_expires = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_buy", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_kwargs = __pyx_optional_args->kwargs;
        }
      }
    }
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1497
 *                    dict kwargs={}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_5);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1498
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_buy);
  __pyx_t_6 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_buy);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_buy);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__5);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1499
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):
 */
  __pyx_t_8 = __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_v_current_timestamp = __pyx_t_8;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1500
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)             # <<<<<<<<<<<<<<
 *         if expires is not None and not math.isnan(expires):
 *             expires = int(expires)
 */
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1500, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_expiration_ts, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_expires = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1501
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):             # <<<<<<<<<<<<<<
 *             expires = int(expires)
 *         else:
 */
  __pyx_t_10 = (__pyx_v_expires != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_9 = __pyx_t_11;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_expires};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = ((!__pyx_t_11) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1502
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):
 *             expires = int(expires)             # <<<<<<<<<<<<<<
 *         else:
 *             expires = int(current_timestamp) + 120
 */
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_expires); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_expires, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1501
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):             # <<<<<<<<<<<<<<
 *             expires = int(expires)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1504
 *             expires = int(expires)
 *         else:
 *             expires = int(current_timestamp) + 120             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyInt_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_120, 0x78, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_expires, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1505
 *         else:
 *             expires = int(current_timestamp) + 120
 *         if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = (__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1507
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:             # <<<<<<<<<<<<<<
 *                 raise
 *             # Record the in-flight limit order placement.
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_current_timestamp - __pyx_v_self->_last_failed_limit_order_timestamp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_CREATION_BACKOFF_TIME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_10)) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1508
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 *                 raise             # <<<<<<<<<<<<<<
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 */
      __Pyx_ReraiseException(); __PYX_ERR(0, 1508, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1507
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:             # <<<<<<<<<<<<<<
 *                 raise
 *             # Record the in-flight limit order placement.
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1510
 *                 raise
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_v_self->_in_flight_pending_limit_orders, __pyx_v_order_id, __pyx_t_3) < 0))) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1505
 *         else:
 *             expires = int(current_timestamp) + 120
 *         if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1511
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.BUY,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_trade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_order_id, __pyx_v_order_id) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1512
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,             # <<<<<<<<<<<<<<
 *                                               trade_type=TradeType.BUY,
 *                                               trading_pair=trading_pair,
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_order_type, __pyx_v_order_type) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1513
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.BUY,             # <<<<<<<<<<<<<<
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_BUY); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trade_type, __pyx_t_14) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1514
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.BUY,
 *                                               trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                               amount=amount,
 *                                               price=price,
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trading_pair, __pyx_v_trading_pair) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1515
 *                                               trade_type=TradeType.BUY,
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,             # <<<<<<<<<<<<<<
 *                                               price=price,
 *                                               expires=expires))
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_amount, __pyx_v_amount) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1516
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,
 *                                               price=price,             # <<<<<<<<<<<<<<
 *                                               expires=expires))
 *         return order_id
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_price, __pyx_v_price) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1517
 *                                               amount=amount,
 *                                               price=price,
 *                                               expires=expires))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_expires, __pyx_v_expires) < 0) __PYX_ERR(0, 1511, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1511
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.BUY,
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_14};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1518
 *                                               price=price,
 *                                               expires=expires))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_sell(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1490
 *             )
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_expires);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1520
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__34;
  PyObject *__pyx_v_price = __pyx_k__35;
  PyObject *__pyx_v_kwargs = __pyx_k__36;
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_order_id = 0;
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_expires = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_sell", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_kwargs = __pyx_optional_args->kwargs;
        }
      }
    }
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1527
 *                     dict kwargs={}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_5);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1528
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_sell);
  __pyx_t_6 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_sell);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_sell);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__5);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1529
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):
 */
  __pyx_t_8 = __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_v_current_timestamp = __pyx_t_8;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1530
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)             # <<<<<<<<<<<<<<
 *         if expires is not None and not math.isnan(expires):
 *             expires = int(expires)
 */
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1530, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_expiration_ts, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_expires = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1531
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):             # <<<<<<<<<<<<<<
 *             expires = int(expires)
 *         else:
 */
  __pyx_t_10 = (__pyx_v_expires != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_9 = __pyx_t_11;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_expires};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = ((!__pyx_t_11) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1532
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):
 *             expires = int(expires)             # <<<<<<<<<<<<<<
 *         else:
 *             expires = int(current_timestamp) + 120
 */
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_expires); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_expires, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1531
 *             double current_timestamp = self._current_timestamp
 *         expires = kwargs.get("expiration_ts", None)
 *         if expires is not None and not math.isnan(expires):             # <<<<<<<<<<<<<<
 *             expires = int(expires)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1534
 *             expires = int(expires)
 *         else:
 *             expires = int(current_timestamp) + 120             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyInt_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_120, 0x78, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_expires, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1535
 *         else:
 *             expires = int(current_timestamp) + 120
 *         if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = (__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1537
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:             # <<<<<<<<<<<<<<
 *                 raise
 *             # Record the in-flight limit order placement.
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_current_timestamp - __pyx_v_self->_last_failed_limit_order_timestamp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_CREATION_BACKOFF_TIME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_10)) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1538
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 *                 raise             # <<<<<<<<<<<<<<
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 */
      __Pyx_ReraiseException(); __PYX_ERR(0, 1538, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1537
 *         if order_type is OrderType.LIMIT:
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:             # <<<<<<<<<<<<<<
 *                 raise
 *             # Record the in-flight limit order placement.
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1540
 *                 raise
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_v_self->_in_flight_pending_limit_orders, __pyx_v_order_id, __pyx_t_3) < 0))) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1535
 *         else:
 *             expires = int(current_timestamp) + 120
 *         if order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             # Don't spam the server endpoint if a order placement failed recently
 *             if current_timestamp - self._last_failed_limit_order_timestamp <= self.ORDER_CREATION_BACKOFF_TIME:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1541
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.SELL,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_trade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_order_id, __pyx_v_order_id) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1542
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,             # <<<<<<<<<<<<<<
 *                                               trade_type=TradeType.SELL,
 *                                               trading_pair=trading_pair,
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_order_type, __pyx_v_order_type) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1543
 *         safe_ensure_future(self.execute_trade(order_id=order_id,
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.SELL,             # <<<<<<<<<<<<<<
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_SELL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trade_type, __pyx_t_14) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1544
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.SELL,
 *                                               trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *                                               amount=amount,
 *                                               price=price,
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_trading_pair, __pyx_v_trading_pair) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1545
 *                                               trade_type=TradeType.SELL,
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,             # <<<<<<<<<<<<<<
 *                                               price=price,
 *                                               expires=expires))
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_amount, __pyx_v_amount) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1546
 *                                               trading_pair=trading_pair,
 *                                               amount=amount,
 *                                               price=price,             # <<<<<<<<<<<<<<
 *                                               expires=expires))
 *         return order_id
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_price, __pyx_v_price) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1547
 *                                               amount=amount,
 *                                               price=price,
 *                                               expires=expires))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_expires, __pyx_v_expires) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1541
 *             # Record the in-flight limit order placement.
 *             self._in_flight_pending_limit_orders[order_id] = self._current_timestamp
 *         safe_ensure_future(self.execute_trade(order_id=order_id,             # <<<<<<<<<<<<<<
 *                                               order_type=order_type,
 *                                               trade_type=TradeType.SELL,
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_14};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1548
 *                                               price=price,
 *                                               expires=expires))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1520
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_expires);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_67generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1550
 *         return order_id
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order = {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_client_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_client_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_client_order_id,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1550, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_order") < 0)) __PYX_ERR(0, 1550, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_client_order_id = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_order", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1550, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 1550, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_65cancel_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_client_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_65cancel_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1550, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_client_order_id = __pyx_v_client_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_67generator15, __pyx_codeobj__37, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_order, __pyx_n_s_BambooRelayExchange_cancel_order, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_67generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  int64_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_await;
    case 2: goto __pyx_L25_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1550, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1552
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)             # <<<<<<<<<<<<<<
 *             int order_timestamp_diff
 *             double current_timestamp
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1552, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_limit_orders, __pyx_cur_scope->__pyx_v_client_order_id, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder))))) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_order = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1556
 *             double current_timestamp
 * 
 *         if not order:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")
 *             if client_order_id in self._in_flight_cancels:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_order)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1556, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1557
 * 
 *         if not order:
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")             # <<<<<<<<<<<<<<
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Failed_to_cancel_order);
    __pyx_t_8 += 23;
    __Pyx_GIVEREF(__pyx_kp_u_Failed_to_cancel_order);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Failed_to_cancel_order);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_client_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_Order_not_found_in_tracked_orde);
    __pyx_t_8 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_Order_not_found_in_tracked_orde);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Order_not_found_in_tracked_orde);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1558
 *         if not order:
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")
 *             if client_order_id in self._in_flight_cancels:             # <<<<<<<<<<<<<<
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_self->_in_flight_cancels, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1558, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1559
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]             # <<<<<<<<<<<<<<
 *             return {}
 * 
 */
      if (unlikely((PyObject_DelItem(__pyx_cur_scope->__pyx_v_self->_in_flight_cancels, __pyx_cur_scope->__pyx_v_client_order_id) < 0))) __PYX_ERR(0, 1559, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1558
 *         if not order:
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")
 *             if client_order_id in self._in_flight_cancels:             # <<<<<<<<<<<<<<
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1560
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}             # <<<<<<<<<<<<<<
 * 
 *         # Previously cancelled
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1556
 *             double current_timestamp
 * 
 *         if not order:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"Failed to cancel order {client_order_id}. Order not found in tracked orders.")
 *             if client_order_id in self._in_flight_cancels:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1563
 * 
 *         # Previously cancelled
 *         if order.is_cancelled or order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_cur_scope->__pyx_v_order->has_been_cancelled != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1564
 *         # Previously cancelled
 *         if order.is_cancelled or order.has_been_cancelled:
 *             if client_order_id in self._in_flight_cancels:             # <<<<<<<<<<<<<<
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}
 */
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_self->_in_flight_cancels, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1564, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1565
 *         if order.is_cancelled or order.has_been_cancelled:
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]             # <<<<<<<<<<<<<<
 *             return {}
 * 
 */
      if (unlikely((PyObject_DelItem(__pyx_cur_scope->__pyx_v_self->_in_flight_cancels, __pyx_cur_scope->__pyx_v_client_order_id) < 0))) __PYX_ERR(0, 1565, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1564
 *         # Previously cancelled
 *         if order.is_cancelled or order.has_been_cancelled:
 *             if client_order_id in self._in_flight_cancels:             # <<<<<<<<<<<<<<
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1566
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]
 *             return {}             # <<<<<<<<<<<<<<
 * 
 *         if order.is_coordinated:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1563
 * 
 *         # Previously cancelled
 *         if order.is_cancelled or order.has_been_cancelled:             # <<<<<<<<<<<<<<
 *             if client_order_id in self._in_flight_cancels:
 *                 del self._in_flight_cancels[client_order_id]
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1568
 *             return {}
 * 
 *         if order.is_coordinated:             # <<<<<<<<<<<<<<
 *             await self._coordinator.soft_cancel_order(order.zero_ex_order)
 * 
 */
  __pyx_t_3 = (__pyx_cur_scope->__pyx_v_order->is_coordinated != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1569
 * 
 *         if order.is_coordinated:
 *             await self._coordinator.soft_cancel_order(order.zero_ex_order)             # <<<<<<<<<<<<<<
 * 
 *             # Flag it
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_coordinator, __pyx_n_s_soft_cancel_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_order->zero_ex_order};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L11_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1569, __pyx_L1_error)
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (exc_type) {
        if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
        else __PYX_ERR(0, 1569, __pyx_L1_error)
      }
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1572
 * 
 *             # Flag it
 *             order.has_been_cancelled = True             # <<<<<<<<<<<<<<
 * 
 *             self.logger().info(f"The limit order {order.client_order_id} has been soft cancelled according "
 */
    __pyx_cur_scope->__pyx_v_order->has_been_cancelled = 1;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1574
 *             order.has_been_cancelled = True
 * 
 *             self.logger().info(f"The limit order {order.client_order_id} has been soft cancelled according "             # <<<<<<<<<<<<<<
 *                                f"to the Coordinator server.")
 *             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_The_limit_order);
    __pyx_t_8 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_The_limit_order);
    __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_has_been_soft_cancelled_accordi);
    __pyx_t_8 += 61;
    __Pyx_GIVEREF(__pyx_kp_u_has_been_soft_cancelled_accordi);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_has_been_soft_cancelled_accordi);
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1577
 *                                f"to the Coordinator server.")
 *             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp             # <<<<<<<<<<<<<<
 *             order_timestamp_diff = abs(order.expires - int(current_timestamp))
 *             self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_isnan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1577, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1577, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = __pyx_t_11;
    } else {
      __pyx_t_10 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
    }
    __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_10;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1578
 *             # Maximum fill time for a coordinated order is 90 seconds or the order expiry
 *             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *             order_timestamp_diff = abs(order.expires - int(current_timestamp))             # <<<<<<<<<<<<<<
 *             self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *             self.c_trigger_event(
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_order->expires); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyNumber_Absolute(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_v_order_timestamp_diff = __pyx_t_7;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1579
 *             current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *             order_timestamp_diff = abs(order.expires - int(current_timestamp))
 *             self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_12 = 0x82;
    __pyx_t_7 = __pyx_cur_scope->__pyx_v_order_timestamp_diff;
    if (((__pyx_t_12 < __pyx_t_7) != 0)) {
      __pyx_t_13 = __pyx_t_12;
    } else {
      __pyx_t_13 = __pyx_t_7;
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_6), __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1581
 *             self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                 OrderCancelledEvent(current_timestamp, order.client_order_id)
 *             )
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1582
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                 OrderCancelledEvent(current_timestamp, order.client_order_id)             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_1, __pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1580
 *             order_timestamp_diff = abs(order.expires - int(current_timestamp))
 *             self.c_expire_order(order.client_order_id, min(order_timestamp_diff, 130))
 *             self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                 self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                 OrderCancelledEvent(current_timestamp, order.client_order_id)
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1585
 *             )
 * 
 *             return CancellationResult(client_order_id, True)             # <<<<<<<<<<<<<<
 *         else:
 *             tx_hash = self._exchange.cancel_order(order.zero_ex_order)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_client_order_id, Py_True};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1568
 *             return {}
 * 
 *         if order.is_coordinated:             # <<<<<<<<<<<<<<
 *             await self._coordinator.soft_cancel_order(order.zero_ex_order)
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1587
 *             return CancellationResult(client_order_id, True)
 *         else:
 *             tx_hash = self._exchange.cancel_order(order.zero_ex_order)             # <<<<<<<<<<<<<<
 * 
 *             receipt = None
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_exchange, __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_order->zero_ex_order};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_tx_hash = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1589
 *             tx_hash = self._exchange.cancel_order(order.zero_ex_order)
 * 
 *             receipt = None             # <<<<<<<<<<<<<<
 *             try:
 *                 while receipt is None or receipt["blockNumber"] is None:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __pyx_cur_scope->__pyx_v_receipt = Py_None;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1590
 * 
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1591
 *             receipt = None
 *             try:
 *                 while receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 *                     if receipt is None or receipt["blockNumber"] is None:
 */
        while (1) {
          __pyx_t_2 = (__pyx_cur_scope->__pyx_v_receipt == Py_None);
          __pyx_t_18 = (__pyx_t_2 != 0);
          if (!__pyx_t_18) {
          } else {
            __pyx_t_3 = __pyx_t_18;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1591, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_18 = (__pyx_t_6 == Py_None);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = (__pyx_t_18 != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L20_bool_binop_done:;
          if (!__pyx_t_3) break;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1592
 *             try:
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)             # <<<<<<<<<<<<<<
 *                     if receipt is None or receipt["blockNumber"] is None:
 *                         await asyncio.sleep(6.0)
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_tx_hash_receipt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1592, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_7 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_tx_hash};
            __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1592, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_receipt);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_receipt, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1593
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 *                     if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                         await asyncio.sleep(6.0)
 *                         continue
 */
          __pyx_t_2 = (__pyx_cur_scope->__pyx_v_receipt == Py_None);
          __pyx_t_18 = (__pyx_t_2 != 0);
          if (!__pyx_t_18) {
          } else {
            __pyx_t_3 = __pyx_t_18;
            goto __pyx_L23_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_blockNumber); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1593, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_18 = (__pyx_t_6 == Py_None);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = (__pyx_t_18 != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L23_bool_binop_done:;
          if (__pyx_t_3) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1594
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 *                     if receipt is None or receipt["blockNumber"] is None:
 *                         await asyncio.sleep(6.0)             # <<<<<<<<<<<<<<
 *                         continue
 *                     if receipt["status"] == 0:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1594, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sleep); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1594, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_float_6_0};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1594, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_15);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_15;
              __Pyx_XGIVEREF(__pyx_t_16);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_16;
              __Pyx_XGIVEREF(__pyx_t_17);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_17;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 2;
              return __pyx_r;
              __pyx_L25_resume_from_await:;
              __pyx_t_15 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_15);
              __pyx_t_16 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_16);
              __pyx_t_17 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_17);
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1594, __pyx_L12_error)
            } else {
              PyObject* exc_type = __Pyx_PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
                else __PYX_ERR(0, 1594, __pyx_L12_error)
              }
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1595
 *                     if receipt is None or receipt["blockNumber"] is None:
 *                         await asyncio.sleep(6.0)
 *                         continue             # <<<<<<<<<<<<<<
 *                     if receipt["status"] == 0:
 *                         return CancellationResult(client_order_id, False)
 */
            goto __pyx_L18_continue;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1593
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 *                     if receipt is None or receipt["blockNumber"] is None:             # <<<<<<<<<<<<<<
 *                         await asyncio.sleep(6.0)
 *                         continue
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1596
 *                         await asyncio.sleep(6.0)
 *                         continue
 *                     if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                         return CancellationResult(client_order_id, False)
 *                     elif receipt["status"] == 1:
 */
          __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1596, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_6, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1596, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1596, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_3) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1597
 *                         continue
 *                     if receipt["status"] == 0:
 *                         return CancellationResult(client_order_id, False)             # <<<<<<<<<<<<<<
 *                     elif receipt["status"] == 1:
 *                         # Flag
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1597, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_4 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_client_order_id, Py_False};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1597, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            goto __pyx_L16_try_return;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1596
 *                         await asyncio.sleep(6.0)
 *                         continue
 *                     if receipt["status"] == 0:             # <<<<<<<<<<<<<<
 *                         return CancellationResult(client_order_id, False)
 *                     elif receipt["status"] == 1:
 */
          }

          /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1598
 *                     if receipt["status"] == 0:
 *                         return CancellationResult(client_order_id, False)
 *                     elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                         # Flag
 *                         order.has_been_cancelled = True
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_receipt, __pyx_n_u_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1598, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1598, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1598, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (__pyx_t_3) {

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1600
 *                     elif receipt["status"] == 1:
 *                         # Flag
 *                         order.has_been_cancelled = True             # <<<<<<<<<<<<<<
 *                         current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "
 */
            __pyx_cur_scope->__pyx_v_order->has_been_cancelled = 1;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1601
 *                         # Flag
 *                         order.has_been_cancelled = True
 *                         current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "
 *                                            f"to transaction hash {tx_hash}.")
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1601, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_1, };
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1601, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1601, __pyx_L12_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_3) {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1601, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1601, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = NULL;
              __pyx_t_7 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_5)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_5);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_7 = 1;
                }
              }
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
                __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1601, __pyx_L12_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1601, __pyx_L12_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_10 = __pyx_t_11;
            } else {
              __pyx_t_10 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
            }
            __pyx_cur_scope->__pyx_v_current_timestamp = __pyx_t_10;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1602
 *                         order.has_been_cancelled = True
 *                         current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "             # <<<<<<<<<<<<<<
 *                                            f"to transaction hash {tx_hash}.")
 *                         self.c_expire_order(order.client_order_id, 10)
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1602, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_5, };
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1602, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = 0;
            __pyx_t_9 = 127;
            __Pyx_INCREF(__pyx_kp_u_The_limit_order);
            __pyx_t_8 += 16;
            __Pyx_GIVEREF(__pyx_kp_u_The_limit_order);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_The_limit_order);
            __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1602, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_9;
            __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_has_been_hard_cancelled_accordi);
            __pyx_t_8 += 55;
            __Pyx_GIVEREF(__pyx_kp_u_has_been_hard_cancelled_accordi);
            PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_has_been_hard_cancelled_accordi);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1603
 *                         current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "
 *                                            f"to transaction hash {tx_hash}.")             # <<<<<<<<<<<<<<
 *                         self.c_expire_order(order.client_order_id, 10)
 *                         self.c_trigger_event(
 */
            __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_tx_hash, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1603, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_9;
            __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u__15);
            __pyx_t_8 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__15);
            PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__15);

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1602
 *                         order.has_been_cancelled = True
 *                         current_timestamp = math.isnan(self._current_timestamp) if time.time() else self._current_timestamp
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "             # <<<<<<<<<<<<<<
 *                                            f"to transaction hash {tx_hash}.")
 *                         self.c_expire_order(order.client_order_id, 10)
 */
            __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1602, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_5};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1602, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1604
 *                         self.logger().info(f"The limit order {order.client_order_id} has been hard cancelled according "
 *                                            f"to transaction hash {tx_hash}.")
 *                         self.c_expire_order(order.client_order_id, 10)             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
            __pyx_t_6 = __pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id;
            __Pyx_INCREF(__pyx_t_6);
            __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_expire_order(__pyx_cur_scope->__pyx_v_self, ((PyObject*)__pyx_t_6), 10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1604, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1606
 *                         self.c_expire_order(order.client_order_id, 10)
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                             OrderCancelledEvent(current_timestamp, order.client_order_id)
 *                         )
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1606, __pyx_L12_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1607
 *                         self.c_trigger_event(
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, order.client_order_id)             # <<<<<<<<<<<<<<
 *                         )
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1607, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1607, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_5, __pyx_cur_scope->__pyx_v_order->__pyx_base.client_order_id};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1607, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1605
 *                                            f"to transaction hash {tx_hash}.")
 *                         self.c_expire_order(order.client_order_id, 10)
 *                         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                             self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                             OrderCancelledEvent(current_timestamp, order.client_order_id)
 */
            __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1605, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1610
 *                         )
 * 
 *                         return CancellationResult(client_order_id, True)             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network(
 */
            __Pyx_XDECREF(__pyx_r);
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1610, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_7 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_client_order_id, Py_True};
              __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1610, __pyx_L12_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            goto __pyx_L16_try_return;

            /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1598
 *                     if receipt["status"] == 0:
 *                         return CancellationResult(client_order_id, False)
 *                     elif receipt["status"] == 1:             # <<<<<<<<<<<<<<
 *                         # Flag
 *                         order.has_been_cancelled = True
 */
          }
          __pyx_L18_continue:;
        }

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1590
 * 
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 */
      }
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      goto __pyx_L17_try_end;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1611
 * 
 *                         return CancellationResult(client_order_id, True)
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     f"Unexpected error cancelling order.",
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 1611, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1612
 *                         return CancellationResult(client_order_id, True)
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling order.",
 *                     exc_info=True,
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1612, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_20 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_20, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L14_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_network); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1612, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1614
 *                 self.logger().network(
 *                     f"Unexpected error cancelling order.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg=f"Failed to cancel order on Bamboo Relay. "
 *                                     f"Check Ethereum wallet and network connection."
 */
        __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 1614, __pyx_L14_except_error)
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_cancel_order_on_Bamboo) < 0) __PYX_ERR(0, 1614, __pyx_L14_except_error)

        /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1612
 *                         return CancellationResult(client_order_id, True)
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling order.",
 *                     exc_info=True,
 */
        __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__38, __pyx_t_1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1612, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L13_exception_handled;
      }
      goto __pyx_L14_except_error;
      __pyx_L14_except_error:;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1590
 * 
 *             receipt = None
 *             try:             # <<<<<<<<<<<<<<
 *                 while receipt is None or receipt["blockNumber"] is None:
 *                     receipt = self.get_tx_hash_receipt(tx_hash)
 */
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      goto __pyx_L1_error;
      __pyx_L16_try_return:;
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      goto __pyx_L0;
      __pyx_L13_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __pyx_L17_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1550
 *         return order_id
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1619
 *                 )
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price = {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_is_buy = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1619, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1619, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, 1); __PYX_ERR(0, 1619, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_price") < 0)) __PYX_ERR(0, 1619, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_is_buy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1619, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1619, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_68get_price(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_68get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1620
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 *         return self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1620, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1619
 *                 )
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1622
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt = {"get_tx_hash_receipt", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_tx_hash = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tx_hash_receipt (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tx_hash,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tx_hash,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tx_hash)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1622, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_tx_hash_receipt") < 0)) __PYX_ERR(0, 1622, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_tx_hash = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_tx_hash_receipt", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1622, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_tx_hash_receipt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tx_hash), (&PyUnicode_Type), 1, "tx_hash", 1))) __PYX_ERR(0, 1622, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_70get_tx_hash_receipt(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_tx_hash);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_70get_tx_hash_receipt(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_tx_hash) {
  PyObject *__pyx_v_tx_hash_receipt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tx_hash_receipt", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1623
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:
 *         try:             # <<<<<<<<<<<<<<
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *             return tx_hash_receipt
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1624
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)             # <<<<<<<<<<<<<<
 *             return tx_hash_receipt
 *         except TransactionNotFound:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_w3, __pyx_n_s_eth); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1624, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getTransactionReceipt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_tx_hash};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1624, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_tx_hash_receipt = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1625
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *             return tx_hash_receipt             # <<<<<<<<<<<<<<
 *         except TransactionNotFound:
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_tx_hash_receipt);
      __pyx_r = __pyx_v_tx_hash_receipt;
      goto __pyx_L7_try_return;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1623
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:
 *         try:             # <<<<<<<<<<<<<<
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *             return tx_hash_receipt
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1626
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *             return tx_hash_receipt
 *         except TransactionNotFound:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_TransactionNotFound); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1626, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_tx_hash_receipt", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 1626, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_4);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1627
 *             return tx_hash_receipt
 *         except TransactionNotFound:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1623
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:
 *         try:             # <<<<<<<<<<<<<<
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 *             return tx_hash_receipt
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1622
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_tx_hash_receipt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tx_hash_receipt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_74generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1629
 *             return None
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders = {"list_account_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_account_orders (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("list_account_orders", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "list_account_orders", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_72list_account_orders(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_72list_account_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_account_orders", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1629, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_74generator16, __pyx_codeobj__39, (PyObject *) __pyx_cur_scope, __pyx_n_s_list_account_orders, __pyx_n_s_BambooRelayExchange_list_account, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.list_account_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_74generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_account_orders", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1629, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1630
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"             # <<<<<<<<<<<<<<
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 *         return response_data
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_endpoint); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_accounts);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_accounts);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_accounts);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_address); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_orders);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_orders);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_orders);
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_url = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1631
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 *         return response_data
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_url, __pyx_cur_scope->__pyx_v_url) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_headers, __pyx_t_4) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__40, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_4 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_response_data = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1632
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 *         return response_data             # <<<<<<<<<<<<<<
 * 
 *     def wrap_eth(self, amount: float) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_response_data);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1629
 *             return None
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("list_account_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1634
 *         return response_data
 * 
 *     def wrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.wrap_eth(amount)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth = {"wrap_eth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_amount;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wrap_eth (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_amount,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_amount,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "wrap_eth") < 0)) __PYX_ERR(0, 1634, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_amount = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1634, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wrap_eth", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1634, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.wrap_eth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_75wrap_eth(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_amount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_75wrap_eth(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_eth", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1635
 * 
 *     def wrap_eth(self, amount: float) -> str:
 *         return self._wallet.wrap_eth(amount)             # <<<<<<<<<<<<<<
 * 
 *     def unwrap_eth(self, amount: float) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_wrap_eth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1635, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1634
 *         return response_data
 * 
 *     def wrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.wrap_eth(amount)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.wrap_eth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1637
 *         return self._wallet.wrap_eth(amount)
 * 
 *     def unwrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.unwrap_eth(amount)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth = {"unwrap_eth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_amount;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unwrap_eth (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_amount,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_amount,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1637, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "unwrap_eth") < 0)) __PYX_ERR(0, 1637, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_amount = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1637, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unwrap_eth", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1637, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.unwrap_eth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_77unwrap_eth(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_amount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_77unwrap_eth(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unwrap_eth", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1638
 * 
 *     def unwrap_eth(self, amount: float) -> str:
 *         return self._wallet.unwrap_eth(amount)             # <<<<<<<<<<<<<<
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_unwrap_eth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1638, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1637
 *         return self._wallet.wrap_eth(amount)
 * 
 *     def unwrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.unwrap_eth(amount)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.unwrap_eth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1640
 *         return self._wallet.unwrap_eth(amount)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books
 */

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_v_order_books = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_book", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1642
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *         if trading_pair not in order_books:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 1642, __pyx_L1_error)
  __pyx_v_order_books = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1644
 *             dict order_books = self._order_book_tracker.order_books
 * 
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1644, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_order_books, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1644, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1645
 * 
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")             # <<<<<<<<<<<<<<
 *         return order_books[trading_pair]
 * 
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_order_book_exists_for);
    __pyx_t_4 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_No_order_book_exists_for);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_No_order_book_exists_for);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__41);
    __pyx_t_4 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__41);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__41);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1645, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1644
 *             dict order_books = self._order_book_tracker.order_books
 * 
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1646
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]             # <<<<<<<<<<<<<<
 * 
 *     async def start_network(self):
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1646, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_order_books, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 1646, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1640
 *         return self._wallet.unwrap_eth(amount)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_books);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_81generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1648
 *         return order_books[trading_pair]
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network = {"start_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("start_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "start_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_79start_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_79start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1648, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_81generator17, __pyx_codeobj__42, (PyObject *) __pyx_cur_scope, __pyx_n_s_start_network, __pyx_n_s_BambooRelayExchange_start_networ, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_81generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1648, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1649
 * 
 *     async def start_network(self):
 *         self._stop_network()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.start()
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1650
 *     async def start_network(self):
 *         self._stop_network()
 *         self._order_book_tracker.start()             # <<<<<<<<<<<<<<
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *         if self._trading_required:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1651
 *         self._stop_network()
 *         self._order_book_tracker.start()
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())             # <<<<<<<<<<<<<<
 *         if self._trading_required:
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_status_polling_loop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_status_polling_task);
  __pyx_cur_scope->__pyx_v_self->_status_polling_task = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1652
 *         self._order_book_tracker.start()
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(
 *                 spender=self._wallet_spender_address
 */
  __pyx_t_7 = (__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0);
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1653
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *         if self._trading_required:
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(             # <<<<<<<<<<<<<<
 *                 spender=self._wallet_spender_address
 *             )
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_wallet); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_check_and_fix_approval_amounts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1654
 *         if self._trading_required:
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(
 *                 spender=self._wallet_spender_address             # <<<<<<<<<<<<<<
 *             )
 *             self._pending_approval_tx_hashes.update(tx_hashes)
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_spender, __pyx_cur_scope->__pyx_v_self->_wallet_spender_address) < 0) __PYX_ERR(0, 1654, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1653
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *         if self._trading_required:
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(             # <<<<<<<<<<<<<<
 *                 spender=self._wallet_spender_address
 *             )
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L5_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1653, __pyx_L1_error)
      __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
    } else {
      __pyx_t_3 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_tx_hashes = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1656
 *                 spender=self._wallet_spender_address
 *             )
 *             self._pending_approval_tx_hashes.update(tx_hashes)             # <<<<<<<<<<<<<<
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_tx_hashes};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1657
 *             )
 *             self._pending_approval_tx_hashes.update(tx_hashes)
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())             # <<<<<<<<<<<<<<
 * 
 *     def _stop_network(self):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_approval_tx_polling_loop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_approval_tx_polling_task);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_approval_tx_polling_task);
    __pyx_cur_scope->__pyx_v_self->_approval_tx_polling_task = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1652
 *         self._order_book_tracker.start()
 *         self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             tx_hashes = await self.wallet.current_backend.check_and_fix_approval_amounts(
 *                 spender=self._wallet_spender_address
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1648
 *         return order_books[trading_pair]
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1659
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network = {"_stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stop_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_stop_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_stop_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_82_stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_82_stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_stop_network", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1660
 * 
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()             # <<<<<<<<<<<<<<
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1661
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._status_polling_task.cancel()
 *         if self._pending_approval_tx_hashes is not None:
 */
  __pyx_t_5 = (__pyx_v_self->_status_polling_task != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1662
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()             # <<<<<<<<<<<<<<
 *         if self._pending_approval_tx_hashes is not None:
 *             self._pending_approval_tx_hashes.clear()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_status_polling_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1661
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._status_polling_task.cancel()
 *         if self._pending_approval_tx_hashes is not None:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1663
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 *         if self._pending_approval_tx_hashes is not None:             # <<<<<<<<<<<<<<
 *             self._pending_approval_tx_hashes.clear()
 *         if self._approval_tx_polling_task is not None:
 */
  __pyx_t_6 = (__pyx_v_self->_pending_approval_tx_hashes != Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1664
 *             self._status_polling_task.cancel()
 *         if self._pending_approval_tx_hashes is not None:
 *             self._pending_approval_tx_hashes.clear()             # <<<<<<<<<<<<<<
 *         if self._approval_tx_polling_task is not None:
 *             self._approval_tx_polling_task.cancel()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pending_approval_tx_hashes, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1663
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 *         if self._pending_approval_tx_hashes is not None:             # <<<<<<<<<<<<<<
 *             self._pending_approval_tx_hashes.clear()
 *         if self._approval_tx_polling_task is not None:
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1665
 *         if self._pending_approval_tx_hashes is not None:
 *             self._pending_approval_tx_hashes.clear()
 *         if self._approval_tx_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._approval_tx_polling_task.cancel()
 *         self._status_polling_task = self._approval_tx_polling_task = None
 */
  __pyx_t_5 = (__pyx_v_self->_approval_tx_polling_task != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1666
 *             self._pending_approval_tx_hashes.clear()
 *         if self._approval_tx_polling_task is not None:
 *             self._approval_tx_polling_task.cancel()             # <<<<<<<<<<<<<<
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_approval_tx_polling_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1665
 *         if self._pending_approval_tx_hashes is not None:
 *             self._pending_approval_tx_hashes.clear()
 *         if self._approval_tx_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._approval_tx_polling_task.cancel()
 *         self._status_polling_task = self._approval_tx_polling_task = None
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1667
 *         if self._approval_tx_polling_task is not None:
 *             self._approval_tx_polling_task.cancel()
 *         self._status_polling_task = self._approval_tx_polling_task = None             # <<<<<<<<<<<<<<
 * 
 *     async def stop_network(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_approval_tx_polling_task);
  __Pyx_DECREF(__pyx_v_self->_approval_tx_polling_task);
  __pyx_v_self->_approval_tx_polling_task = Py_None;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1659
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange._stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_86generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1669
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network = {"stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("stop_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "stop_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_84stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_84stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1669, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_86generator18, __pyx_codeobj__43, (PyObject *) __pyx_cur_scope, __pyx_n_s_stop_network_2, __pyx_n_s_BambooRelayExchange_stop_network, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_86generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1669, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1670
 * 
 *     async def stop_network(self):
 *         self._stop_network()             # <<<<<<<<<<<<<<
 * 
 *     async def check_network(self) -> NetworkStatus:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1669
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_89generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1672
 *         self._stop_network()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network = {"check_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("check_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "check_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_87check_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_87check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1672, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_89generator19, __pyx_codeobj__44, (PyObject *) __pyx_cur_scope, __pyx_n_s_check_network, __pyx_n_s_BambooRelayExchange_check_networ, __pyx_n_s_hummingbot_connector_exchange_ba); if (unlikely(!gen)) __PYX_ERR(0, 1672, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_89generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1672, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1673
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:             # <<<<<<<<<<<<<<
 *             return NetworkStatus.NOT_CONNECTED
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_wallet, __pyx_n_s_network_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_1 != __pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1674
 *     async def check_network(self) -> NetworkStatus:
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_NOT_CONNECTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1673
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:             # <<<<<<<<<<<<<<
 *             return NetworkStatus.NOT_CONNECTED
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1676
 *             return NetworkStatus.NOT_CONNECTED
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",
 *                                     headers={"User-Agent": "hummingbot"})
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1677
 * 
 *         try:
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",             # <<<<<<<<<<<<<<
 *                                     headers={"User-Agent": "hummingbot"})
 *         except asyncio.CancelledError:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_endpoint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->_api_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_tokens);
      __pyx_t_9 += 7;
      __Pyx_GIVEREF(__pyx_kp_u_tokens);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_tokens);
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_n_u_GET);
      __Pyx_GIVEREF(__pyx_n_u_GET);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_GET);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1678
 *         try:
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",
 *                                     headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 *         except asyncio.CancelledError:
 *             raise
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1678, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1678, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_11, __pyx_kp_u_User_Agent, __pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 1678, __pyx_L5_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_headers, __pyx_t_11) < 0) __PYX_ERR(0, 1678, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1677
 * 
 *         try:
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",             # <<<<<<<<<<<<<<
 *                                     headers={"User-Agent": "hummingbot"})
 *         except asyncio.CancelledError:
 */
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1677, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_6;
        __Pyx_XGIVEREF(__pyx_t_7);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
        __Pyx_XGIVEREF(__pyx_t_8);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_await:;
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_8);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1677, __pyx_L5_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 1677, __pyx_L5_error)
        }
      }

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1676
 *             return NetworkStatus.NOT_CONNECTED
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",
 *                                     headers={"User-Agent": "hummingbot"})
 */
    }
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L10_try_end;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1679
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",
 *                                     headers={"User-Agent": "hummingbot"})
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception:
 */
    __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_2, &__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1679, __pyx_L7_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1679, __pyx_L7_except_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_11, __pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_ErrRestore(__pyx_t_11, __pyx_t_2, __pyx_t_3);
    __pyx_t_11 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0;
    if (__pyx_t_13) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_11) < 0) __PYX_ERR(0, 1679, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_11);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1680
 *                                     headers={"User-Agent": "hummingbot"})
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 */
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_2, __pyx_t_11);
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_11 = 0; 
      __PYX_ERR(0, 1680, __pyx_L7_except_error)
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1681
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception:             # <<<<<<<<<<<<<<
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 1681, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1682
 *             raise
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1682, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_NOT_CONNECTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1682, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L8_except_return;
    }
    goto __pyx_L7_except_error;
    __pyx_L7_except_error:;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1676
 *             return NetworkStatus.NOT_CONNECTED
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", f"{self._api_endpoint}{self._api_prefix}/tokens",
 *                                     headers={"User-Agent": "hummingbot"})
 */
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L8_except_return:;
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
    goto __pyx_L0;
    __pyx_L10_try_end:;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1683
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1672
 *         self._stop_network()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1685
 *         return NetworkStatus.CONNECTED
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t>(self._last_timestamp / self._poll_interval)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_last_tick;
  int64_t __pyx_v_current_tick;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1687
 *     cdef c_tick(self, double timestamp):
 *         cdef:
 *             int64_t last_tick = <int64_t>(self._last_timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 *             int64_t current_tick = <int64_t>(timestamp / self._poll_interval)
 * 
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1687, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)(__pyx_v_self->_last_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1688
 *         cdef:
 *             int64_t last_tick = <int64_t>(self._last_timestamp / self._poll_interval)
 *             int64_t current_tick = <int64_t>(timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 * 
 *         self._tx_tracker.c_tick(timestamp)
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1688, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)(__pyx_v_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1690
 *             int64_t current_tick = <int64_t>(timestamp / self._poll_interval)
 * 
 *         self._tx_tracker.c_tick(timestamp)             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self->_tx_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_tx_tracker), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1691
 * 
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1692
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  __pyx_t_2 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1693
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self.c_check_and_remove_expired_orders()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1693, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = ((!__pyx_t_2) != 0);
    if (__pyx_t_6) {

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1694
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()             # <<<<<<<<<<<<<<
 *         self.c_check_and_remove_expired_orders()
 *         self._last_timestamp = timestamp
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1694, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1693
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self.c_check_and_remove_expired_orders()
 */
    }

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1692
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1695
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 *         self.c_check_and_remove_expired_orders()             # <<<<<<<<<<<<<<
 *         self._last_timestamp = timestamp
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_and_remove_expired_orders(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1696
 *                 self._poll_notifier.set()
 *         self.c_check_and_remove_expired_orders()
 *         self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start_tracking_limit_order(self,
 */
  __pyx_v_self->_last_timestamp = __pyx_v_timestamp;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1685
 *         return NetworkStatus.CONNECTED
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t>(self._last_timestamp / self._poll_interval)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1698
 *         self._last_timestamp = timestamp
 * 
 *     cdef c_start_tracking_limit_order(self,             # <<<<<<<<<<<<<<
 *                                       str order_id,
 *                                       str exchange_order_id,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, int __pyx_v_is_coordinated, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount, int __pyx_v_expires, PyObject *__pyx_v_zero_ex_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start_tracking_limit_order", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1710
 *                                       object zero_ex_order):
 *         self._in_flight_limit_orders[order_id] = BambooRelayInFlightOrder(
 *             client_order_id=order_id,             # <<<<<<<<<<<<<<
 *             exchange_order_id=exchange_order_id,
 *             trading_pair=trading_pair,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_client_order_id, __pyx_v_order_id) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1711
 *         self._in_flight_limit_orders[order_id] = BambooRelayInFlightOrder(
 *             client_order_id=order_id,
 *             exchange_order_id=exchange_order_id,             # <<<<<<<<<<<<<<
 *             trading_pair=trading_pair,
 *             order_type=order_type,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exchange_order_id, __pyx_v_exchange_order_id) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1712
 *             client_order_id=order_id,
 *             exchange_order_id=exchange_order_id,
 *             trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_v_trading_pair) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1713
 *             exchange_order_id=exchange_order_id,
 *             trading_pair=trading_pair,
 *             order_type=order_type,             # <<<<<<<<<<<<<<
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_v_order_type) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1714
 *             trading_pair=trading_pair,
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,             # <<<<<<<<<<<<<<
 *             trade_type=trade_type,
 *             price=price,
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_is_coordinated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_coordinated, __pyx_t_2) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1715
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,             # <<<<<<<<<<<<<<
 *             price=price,
 *             amount=amount,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trade_type, __pyx_v_trade_type) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1716
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,
 *             price=price,             # <<<<<<<<<<<<<<
 *             amount=amount,
 *             expires=expires,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_v_price) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1717
 *             trade_type=trade_type,
 *             price=price,
 *             amount=amount,             # <<<<<<<<<<<<<<
 *             expires=expires,
 *             tx_hash=None,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_v_amount) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1718
 *             price=price,
 *             amount=amount,
 *             expires=expires,             # <<<<<<<<<<<<<<
 *             tx_hash=None,
 *             zero_ex_order=zero_ex_order
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_expires); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_expires, __pyx_t_2) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1719
 *             amount=amount,
 *             expires=expires,
 *             tx_hash=None,             # <<<<<<<<<<<<<<
 *             zero_ex_order=zero_ex_order
 *         )
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tx_hash, Py_None) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1720
 *             expires=expires,
 *             tx_hash=None,
 *             zero_ex_order=zero_ex_order             # <<<<<<<<<<<<<<
 *         )
 *         # Watch for Fill events for this order hash
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_zero_ex_order, __pyx_v_zero_ex_order) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1709
 *                                       int expires,
 *                                       object zero_ex_order):
 *         self._in_flight_limit_orders[order_id] = BambooRelayInFlightOrder(             # <<<<<<<<<<<<<<
 *             client_order_id=order_id,
 *             exchange_order_id=exchange_order_id,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1709, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_self->_in_flight_limit_orders, __pyx_v_order_id, __pyx_t_2) < 0))) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1723
 *         )
 *         # Watch for Fill events for this order hash
 *         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.watch_order_hash(exchange_order_id, self._update_single_limit_order))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start_tracking_market_order(self,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeroex_fill_watcher); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_watch_order_hash); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_single_limit_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_exchange_order_id, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1698
 *         self._last_timestamp = timestamp
 * 
 *     cdef c_start_tracking_limit_order(self,             # <<<<<<<<<<<<<<
 *                                       str order_id,
 *                                       str exchange_order_id,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_start_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1725
 *         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.watch_order_hash(exchange_order_id, self._update_single_limit_order))
 * 
 *     cdef c_start_tracking_market_order(self,             # <<<<<<<<<<<<<<
 *                                        str order_id,
 *                                        str trading_pair,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_market_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, int __pyx_v_is_coordinated, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount, PyObject *__pyx_v_tx_hash, PyObject *__pyx_v_protocol_fee_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start_tracking_market_order", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1736
 *                                        object protocol_fee_amount):
 *         self._in_flight_market_orders[tx_hash] = BambooRelayInFlightOrder(
 *             client_order_id=order_id,             # <<<<<<<<<<<<<<
 *             exchange_order_id=None,
 *             trading_pair=trading_pair,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_client_order_id, __pyx_v_order_id) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1737
 *         self._in_flight_market_orders[tx_hash] = BambooRelayInFlightOrder(
 *             client_order_id=order_id,
 *             exchange_order_id=None,             # <<<<<<<<<<<<<<
 *             trading_pair=trading_pair,
 *             order_type=order_type,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exchange_order_id, Py_None) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1738
 *             client_order_id=order_id,
 *             exchange_order_id=None,
 *             trading_pair=trading_pair,             # <<<<<<<<<<<<<<
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_v_trading_pair) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1739
 *             exchange_order_id=None,
 *             trading_pair=trading_pair,
 *             order_type=order_type,             # <<<<<<<<<<<<<<
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_v_order_type) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1740
 *             trading_pair=trading_pair,
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,             # <<<<<<<<<<<<<<
 *             trade_type=trade_type,
 *             price=price,
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_is_coordinated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_coordinated, __pyx_t_2) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1741
 *             order_type=order_type,
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,             # <<<<<<<<<<<<<<
 *             price=price,
 *             amount=amount,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trade_type, __pyx_v_trade_type) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1742
 *             is_coordinated=is_coordinated,
 *             trade_type=trade_type,
 *             price=price,             # <<<<<<<<<<<<<<
 *             amount=amount,
 *             expires=0,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_v_price) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1743
 *             trade_type=trade_type,
 *             price=price,
 *             amount=amount,             # <<<<<<<<<<<<<<
 *             expires=0,
 *             tx_hash=tx_hash,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_v_amount) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_expires, __pyx_int_0) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1745
 *             amount=amount,
 *             expires=0,
 *             tx_hash=tx_hash,             # <<<<<<<<<<<<<<
 *             protocol_fee_amount=protocol_fee_amount
 *         )
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tx_hash, __pyx_v_tx_hash) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1746
 *             expires=0,
 *             tx_hash=tx_hash,
 *             protocol_fee_amount=protocol_fee_amount             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_protocol_fee_amount, __pyx_v_protocol_fee_amount) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1735
 *                                        str tx_hash,
 *                                        object protocol_fee_amount):
 *         self._in_flight_market_orders[tx_hash] = BambooRelayInFlightOrder(             # <<<<<<<<<<<<<<
 *             client_order_id=order_id,
 *             exchange_order_id=None,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_v_self->_in_flight_market_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1735, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_self->_in_flight_market_orders, __pyx_v_tx_hash, __pyx_t_2) < 0))) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1725
 *         safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.watch_order_hash(exchange_order_id, self._update_single_limit_order))
 * 
 *     cdef c_start_tracking_market_order(self,             # <<<<<<<<<<<<<<
 *                                        str order_id,
 *                                        str trading_pair,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_start_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1749
 *         )
 * 
 *     cdef c_expire_order(self, str order_id, int seconds):             # <<<<<<<<<<<<<<
 *         self._order_expiry_queue.append((self._current_timestamp + seconds, order_id))
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_expire_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id, int __pyx_v_seconds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_expire_order", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1750
 * 
 *     cdef c_expire_order(self, str order_id, int seconds):
 *         self._order_expiry_queue.append((self._current_timestamp + seconds, order_id))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_check_and_remove_expired_orders(self):
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp + __pyx_v_seconds)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_v_order_id);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_order_id);
  __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_self->_order_expiry_queue, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1749
 *         )
 * 
 *     cdef c_expire_order(self, str order_id, int seconds):             # <<<<<<<<<<<<<<
 *         self._order_expiry_queue.append((self._current_timestamp + seconds, order_id))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_expire_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1752
 *         self._order_expiry_queue.append((self._current_timestamp + seconds, order_id))
 * 
 *     cdef c_check_and_remove_expired_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_check_and_remove_expired_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  double __pyx_v_current_timestamp;
  PyObject *__pyx_v_order_id = 0;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_and_remove_expired_orders", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1754
 *     cdef c_check_and_remove_expired_orders(self):
 *         cdef:
 *             double current_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             str order_id
 * 
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
  __pyx_v_current_timestamp = __pyx_t_1;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1757
 *             str order_id
 * 
 *         while len(self._order_expiry_queue) > 0 and self._order_expiry_queue[0][0] < current_timestamp:             # <<<<<<<<<<<<<<
 *             _, order_id = self._order_expiry_queue.popleft()
 *             self.c_stop_tracking_order(order_id)
 */
  while (1) {
    __pyx_t_3 = __pyx_v_self->_order_expiry_queue;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = ((__pyx_t_4 > 0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->_order_expiry_queue, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1758
 * 
 *         while len(self._order_expiry_queue) > 0 and self._order_expiry_queue[0][0] < current_timestamp:
 *             _, order_id = self._order_expiry_queue.popleft()             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_order(order_id)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_order_expiry_queue, __pyx_n_s_popleft); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1758, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1758, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1758, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_6))) __PYX_ERR(0, 1758, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1759
 *         while len(self._order_expiry_queue) > 0 and self._order_expiry_queue[0][0] < current_timestamp:
 *             _, order_id = self._order_expiry_queue.popleft()
 *             self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1752
 *         self._order_expiry_queue.append((self._current_timestamp + seconds, order_id))
 * 
 *     cdef c_check_and_remove_expired_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_check_and_remove_expired_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1761
 *             self.c_stop_tracking_order(order_id)
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_limit_orders:
 *             # Unwatch this order hash from Fill events
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_order", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1762
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_limit_orders:             # <<<<<<<<<<<<<<
 *             # Unwatch this order hash from Fill events
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))
 */
  if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1762, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_order_id, __pyx_v_self->_in_flight_limit_orders, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1762, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1764
 *         if order_id in self._in_flight_limit_orders:
 *             # Unwatch this order hash from Fill events
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))             # <<<<<<<<<<<<<<
 *             del self._in_flight_limit_orders[order_id]
 *         elif order_id in self._in_flight_market_orders:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_wallet, __pyx_n_s_current_backend); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeroex_fill_watcher); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_unwatch_order_hash); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1764, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->_in_flight_limit_orders, __pyx_v_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1765
 *             # Unwatch this order hash from Fill events
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))
 *             del self._in_flight_limit_orders[order_id]             # <<<<<<<<<<<<<<
 *         elif order_id in self._in_flight_market_orders:
 *             del self._in_flight_market_orders[order_id]
 */
    if (unlikely(__pyx_v_self->_in_flight_limit_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1765, __pyx_L1_error)
    }
    if (unlikely((PyDict_DelItem(__pyx_v_self->_in_flight_limit_orders, __pyx_v_order_id) < 0))) __PYX_ERR(0, 1765, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1762
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_limit_orders:             # <<<<<<<<<<<<<<
 *             # Unwatch this order hash from Fill events
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1766
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))
 *             del self._in_flight_limit_orders[order_id]
 *         elif order_id in self._in_flight_market_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_market_orders[order_id]
 * 
 */
  if (unlikely(__pyx_v_self->_in_flight_market_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1766, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_order_id, __pyx_v_self->_in_flight_market_orders, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1766, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1767
 *             del self._in_flight_limit_orders[order_id]
 *         elif order_id in self._in_flight_market_orders:
 *             del self._in_flight_market_orders[order_id]             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 */
    if (unlikely(__pyx_v_self->_in_flight_market_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1767, __pyx_L1_error)
    }
    if (unlikely((PyDict_DelItem(__pyx_v_self->_in_flight_market_orders, __pyx_v_order_id) < 0))) __PYX_ERR(0, 1767, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1766
 *             safe_ensure_future(self._wallet.current_backend.zeroex_fill_watcher.unwatch_order_hash(self._in_flight_limit_orders[order_id].exchange_order_id))
 *             del self._in_flight_limit_orders[order_id]
 *         elif order_id in self._in_flight_market_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_market_orders[order_id]
 * 
 */
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1761
 *             self.c_stop_tracking_order(order_id)
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_limit_orders:
 *             # Unwatch this order hash from Fill events
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_stop_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1769
 *             del self._in_flight_market_orders[order_id]
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_v_decimals_quantum = NULL;
  PyObject *__pyx_v_precision_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_price_quantum", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1771
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         decimals_quantum = trading_rule.min_quote_amount_increment
 *         if price.is_finite() and price > s_decimal_0:
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1771, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 1771, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1772
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         decimals_quantum = trading_rule.min_quote_amount_increment             # <<<<<<<<<<<<<<
 *         if price.is_finite() and price > s_decimal_0:
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - trading_rule.max_price_significant_digits}")
 */
  __pyx_t_1 = __pyx_v_trading_rule->min_quote_amount_increment;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_decimals_quantum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1773
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         decimals_quantum = trading_rule.min_quote_amount_increment
 *         if price.is_finite() and price > s_decimal_0:             # <<<<<<<<<<<<<<
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - trading_rule.max_price_significant_digits}")
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_price, __pyx_n_s_is_finite); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_price, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1774
 *         decimals_quantum = trading_rule.min_quote_amount_increment
 *         if price.is_finite() and price > s_decimal_0:
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - trading_rule.max_price_significant_digits}")             # <<<<<<<<<<<<<<
 *         else:
 *             precision_quantum = s_decimal_0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_math); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_ceil); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_math); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_log10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_price};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __pyx_t_10 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_4, __pyx_v_trading_rule->max_price_significant_digits); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_8};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_v_precision_quantum = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1773
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         decimals_quantum = trading_rule.min_quote_amount_increment
 *         if price.is_finite() and price > s_decimal_0:             # <<<<<<<<<<<<<<
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - trading_rule.max_price_significant_digits}")
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1776
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - trading_rule.max_price_significant_digits}")
 *         else:
 *             precision_quantum = s_decimal_0             # <<<<<<<<<<<<<<
 *         return max(decimals_quantum, precision_quantum)
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_precision_quantum = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1777
 *         else:
 *             precision_quantum = s_decimal_0
 *         return max(decimals_quantum, precision_quantum)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object amount):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_precision_quantum);
  __pyx_t_3 = __pyx_v_precision_quantum;
  __Pyx_INCREF(__pyx_v_decimals_quantum);
  __pyx_t_1 = __pyx_v_decimals_quantum;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_8 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_8);
  __pyx_r = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1769
 *             del self._in_flight_market_orders[order_id]
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_get_order_price_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XDECREF(__pyx_v_decimals_quantum);
  __Pyx_XDECREF(__pyx_v_precision_quantum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1779
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_v_decimals_quantum = NULL;
  PyObject *__pyx_v_precision_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_size_quantum", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1781
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object amount):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         decimals_quantum = trading_rule.min_base_amount_increment
 * 
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1781, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 1781, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1782
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         decimals_quantum = trading_rule.min_base_amount_increment             # <<<<<<<<<<<<<<
 * 
 *         if amount.is_finite() and amount > s_decimal_0:
 */
  __pyx_t_1 = __pyx_v_trading_rule->min_base_amount_increment;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_decimals_quantum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1784
 *         decimals_quantum = trading_rule.min_base_amount_increment
 * 
 *         if amount.is_finite() and amount > s_decimal_0:             # <<<<<<<<<<<<<<
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(amount)) - trading_rule.max_price_significant_digits}")
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_amount, __pyx_n_s_is_finite); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_amount, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1785
 * 
 *         if amount.is_finite() and amount > s_decimal_0:
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(amount)) - trading_rule.max_price_significant_digits}")             # <<<<<<<<<<<<<<
 *         else:
 *             precision_quantum = s_decimal_0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_math); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_ceil); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_math); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_log10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_amount};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __pyx_t_10 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_4, __pyx_v_trading_rule->max_price_significant_digits); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_8};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_v_precision_quantum = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1784
 *         decimals_quantum = trading_rule.min_base_amount_increment
 * 
 *         if amount.is_finite() and amount > s_decimal_0:             # <<<<<<<<<<<<<<
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(amount)) - trading_rule.max_price_significant_digits}")
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1787
 *             precision_quantum = Decimal(f"1e{math.ceil(math.log10(amount)) - trading_rule.max_price_significant_digits}")
 *         else:
 *             precision_quantum = s_decimal_0             # <<<<<<<<<<<<<<
 *         return max(decimals_quantum, precision_quantum)
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_precision_quantum = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1788
 *         else:
 *             precision_quantum = s_decimal_0
 *         return max(decimals_quantum, precision_quantum)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_precision_quantum);
  __pyx_t_3 = __pyx_v_precision_quantum;
  __Pyx_INCREF(__pyx_v_decimals_quantum);
  __pyx_t_1 = __pyx_v_decimals_quantum;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_8 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_8);
  __pyx_r = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1779
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_get_order_size_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XDECREF(__pyx_v_decimals_quantum);
  __Pyx_XDECREF(__pyx_v_precision_quantum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1790
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount *__pyx_optional_args) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_v_quantized_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_quantize_order_amount", 0);
  if (__pyx_optional_args) {
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1792
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         global s_decimal_0
 *         quantized_amount = ExchangeBase.c_quantize_order_amount(self, trading_pair, min(amount, trading_rule.max_order_size))
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1792, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1794
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         global s_decimal_0
 *         quantized_amount = ExchangeBase.c_quantize_order_amount(self, trading_pair, min(amount, trading_rule.max_order_size))             # <<<<<<<<<<<<<<
 * 
 *         # Check against min_order_size. If not passing the check, return 0.
 */
  __Pyx_INCREF(__pyx_v_trading_rule->max_order_size);
  __pyx_t_1 = __pyx_v_trading_rule->max_order_size;
  __Pyx_INCREF(__pyx_v_amount);
  __pyx_t_2 = __pyx_v_amount;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1794, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_quantized_amount = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1797
 * 
 *         # Check against min_order_size. If not passing the check, return 0.
 *         if quantized_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_quantized_amount, __pyx_v_trading_rule->min_order_size, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1798
 *         # Check against min_order_size. If not passing the check, return 0.
 *         if quantized_amount < trading_rule.min_order_size:
 *             return s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         return quantized_amount
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1797
 * 
 *         # Check against min_order_size. If not passing the check, return 0.
 *         if quantized_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  }

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1800
 *             return s_decimal_0
 * 
 *         return quantized_amount             # <<<<<<<<<<<<<<
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_quantized_amount);
  __pyx_r = __pyx_v_quantized_amount;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1790
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.c_quantize_order_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XDECREF(__pyx_v_quantized_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1802
 *         return quantized_amount
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price = {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_is_buy = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1802, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1802, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, 1); __PYX_ERR(0, 1802, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_price") < 0)) __PYX_ERR(0, 1802, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_is_buy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1802, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1802, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_90get_price(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_90get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1803
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 *         return self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1802
 *         return quantized_amount
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy = {"buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buy (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__45;
    values[3] = __pyx_k__46;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1805, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1805, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, 1); __PYX_ERR(0, 1805, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1805, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1805, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "buy") < 0)) __PYX_ERR(0, 1805, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1805, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1805, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_92buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_92buy(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buy", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1807
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_buy(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell = {"sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sell (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__47;
    values[3] = __pyx_k__48;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, 1); __PYX_ERR(0, 1809, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "sell") < 0)) __PYX_ERR(0, 1809, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1809, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1809, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_94sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_94sell(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sell", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1811
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_sell(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1813
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel = {"cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_client_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, 1); __PYX_ERR(0, 1813, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel") < 0)) __PYX_ERR(0, 1813, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_client_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1813, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1813, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 1813, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_96cancel(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_96cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1814
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 *         return self.c_cancel(trading_pair, client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     def get_fee(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1813
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1816
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee = {"get_fee", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_base_currency = 0;
  PyObject *__pyx_v_quote_currency = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fee (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__49;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_base_currency)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quote_currency)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 1); __PYX_ERR(0, 1816, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 2); __PYX_ERR(0, 1816, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_side)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 3); __PYX_ERR(0, 1816, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 4); __PYX_ERR(0, 1816, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_fee") < 0)) __PYX_ERR(0, 1816, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_base_currency = ((PyObject*)values[0]);
    __pyx_v_quote_currency = ((PyObject*)values[1]);
    __pyx_v_order_type = values[2];
    __pyx_v_order_side = values[3];
    __pyx_v_amount = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 1816, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_currency), (&PyUnicode_Type), 1, "base_currency", 1))) __PYX_ERR(0, 1817, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quote_currency), (&PyUnicode_Type), 1, "quote_currency", 1))) __PYX_ERR(0, 1818, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_98get_fee(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_98get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_fee", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1823
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)             # <<<<<<<<<<<<<<
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1816
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1825
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */

/* Python wrapper */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book = {"get_order_book", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_book (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1825, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_order_book") < 0)) __PYX_ERR(0, 1825, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_order_book", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1825, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_100get_order_book(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v_trading_pair);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_100get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_order_book", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1826
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 *         return self.c_get_order_book(trading_pair)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_book(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_trading_pair)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1825
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pxd":37
 *         dict _trading_rules
 *         object _pending_approval_tx_hashes
 *         public object _status_polling_task             # <<<<<<<<<<<<<<
 *         public object _user_stream_event_listener_task
 *         public object _approval_tx_polling_task
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_status_polling_task);
  __pyx_r = __pyx_v_self->_status_polling_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pxd":38
 *         object _pending_approval_tx_hashes
 *         public object _status_polling_task
 *         public object _user_stream_event_listener_task             # <<<<<<<<<<<<<<
 *         public object _approval_tx_polling_task
 *         int64_t _latest_salt
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_r = __pyx_v_self->_user_stream_event_listener_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pxd":39
 *         public object _status_polling_task
 *         public object _user_stream_event_listener_task
 *         public object _approval_tx_polling_task             # <<<<<<<<<<<<<<
 *         int64_t _latest_salt
 *         str _api_endpoint
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_approval_tx_polling_task);
  __pyx_r = __pyx_v_self->_approval_tx_polling_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_approval_tx_polling_task);
  __Pyx_DECREF(__pyx_v_self->_approval_tx_polling_task);
  __pyx_v_self->_approval_tx_polling_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_approval_tx_polling_task);
  __Pyx_DECREF(__pyx_v_self->_approval_tx_polling_task);
  __pyx_v_self->_approval_tx_polling_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_102__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_104__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":974
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":975
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":978
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":980
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":981
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 987, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":988
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 993, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 999, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1016
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1031
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1041
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1048
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1055
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  p->_wallet_spender_address = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_wallet = Py_None; Py_INCREF(Py_None);
  p->_provider = Py_None; Py_INCREF(Py_None);
  p->_weth_token = Py_None; Py_INCREF(Py_None);
  p->_ev_loop = Py_None; Py_INCREF(Py_None);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  p->_in_flight_limit_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_in_flight_market_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_in_flight_pending_limit_orders = Py_None; Py_INCREF(Py_None);
  p->_in_flight_cancels = Py_None; Py_INCREF(Py_None);
  p->_in_flight_pending_cancels = Py_None; Py_INCREF(Py_None);
  p->_filled_order_hashes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_expiry_queue = Py_None; Py_INCREF(Py_None);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  p->_w3 = Py_None; Py_INCREF(Py_None);
  p->_exchange = Py_None; Py_INCREF(Py_None);
  p->_coordinator = Py_None; Py_INCREF(Py_None);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_pending_approval_tx_hashes = Py_None; Py_INCREF(Py_None);
  p->_status_polling_task = Py_None; Py_INCREF(Py_None);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  p->_approval_tx_polling_task = Py_None; Py_INCREF(Py_None);
  p->_api_endpoint = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_api_prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_exchange_address = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_coordinator_address = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_fee_recipient_address = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_wallet_spender_address);
  Py_CLEAR(p->_wallet);
  Py_CLEAR(p->_provider);
  Py_CLEAR(p->_weth_token);
  Py_CLEAR(p->_ev_loop);
  Py_CLEAR(p->_poll_notifier);
  Py_CLEAR(p->_in_flight_limit_orders);
  Py_CLEAR(p->_in_flight_market_orders);
  Py_CLEAR(p->_in_flight_pending_limit_orders);
  Py_CLEAR(p->_in_flight_cancels);
  Py_CLEAR(p->_in_flight_pending_cancels);
  Py_CLEAR(p->_filled_order_hashes);
  Py_CLEAR(p->_order_expiry_queue);
  Py_CLEAR(p->_tx_tracker);
  Py_CLEAR(p->_w3);
  Py_CLEAR(p->_exchange);
  Py_CLEAR(p->_coordinator);
  Py_CLEAR(p->_trading_rules);
  Py_CLEAR(p->_pending_approval_tx_hashes);
  Py_CLEAR(p->_status_polling_task);
  Py_CLEAR(p->_user_stream_event_listener_task);
  Py_CLEAR(p->_approval_tx_polling_task);
  Py_CLEAR(p->_api_endpoint);
  Py_CLEAR(p->_api_prefix);
  Py_CLEAR(p->_exchange_address);
  Py_CLEAR(p->_coordinator_address);
  Py_CLEAR(p->_fee_recipient_address);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)o;
  e = ((likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) ? ((__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse) ? __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange)); if (e) return e;
  if (p->_wallet) {
    e = (*v)(p->_wallet, a); if (e) return e;
  }
  if (p->_provider) {
    e = (*v)(p->_provider, a); if (e) return e;
  }
  if (p->_weth_token) {
    e = (*v)(p->_weth_token, a); if (e) return e;
  }
  if (p->_ev_loop) {
    e = (*v)(p->_ev_loop, a); if (e) return e;
  }
  if (p->_poll_notifier) {
    e = (*v)(p->_poll_notifier, a); if (e) return e;
  }
  if (p->_in_flight_limit_orders) {
    e = (*v)(p->_in_flight_limit_orders, a); if (e) return e;
  }
  if (p->_in_flight_market_orders) {
    e = (*v)(p->_in_flight_market_orders, a); if (e) return e;
  }
  if (p->_in_flight_pending_limit_orders) {
    e = (*v)(p->_in_flight_pending_limit_orders, a); if (e) return e;
  }
  if (p->_in_flight_cancels) {
    e = (*v)(p->_in_flight_cancels, a); if (e) return e;
  }
  if (p->_in_flight_pending_cancels) {
    e = (*v)(p->_in_flight_pending_cancels, a); if (e) return e;
  }
  if (p->_filled_order_hashes) {
    e = (*v)(p->_filled_order_hashes, a); if (e) return e;
  }
  if (p->_order_expiry_queue) {
    e = (*v)(p->_order_expiry_queue, a); if (e) return e;
  }
  if (p->_tx_tracker) {
    e = (*v)(((PyObject *)p->_tx_tracker), a); if (e) return e;
  }
  if (p->_w3) {
    e = (*v)(p->_w3, a); if (e) return e;
  }
  if (p->_exchange) {
    e = (*v)(p->_exchange, a); if (e) return e;
  }
  if (p->_coordinator) {
    e = (*v)(p->_coordinator, a); if (e) return e;
  }
  if (p->_trading_rules) {
    e = (*v)(p->_trading_rules, a); if (e) return e;
  }
  if (p->_pending_approval_tx_hashes) {
    e = (*v)(p->_pending_approval_tx_hashes, a); if (e) return e;
  }
  if (p->_status_polling_task) {
    e = (*v)(p->_status_polling_task, a); if (e) return e;
  }
  if (p->_user_stream_event_listener_task) {
    e = (*v)(p->_user_stream_event_listener_task, a); if (e) return e;
  }
  if (p->_approval_tx_polling_task) {
    e = (*v)(p->_approval_tx_polling_task, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)o;
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) { if (__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  tmp = ((PyObject*)p->_wallet);
  p->_wallet = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_provider);
  p->_provider = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_weth_token);
  p->_weth_token = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_ev_loop);
  p->_ev_loop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_poll_notifier);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_limit_orders);
  p->_in_flight_limit_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_market_orders);
  p->_in_flight_market_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_pending_limit_orders);
  p->_in_flight_pending_limit_orders = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_cancels);
  p->_in_flight_cancels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_pending_cancels);
  p->_in_flight_pending_cancels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_filled_order_hashes);
  p->_filled_order_hashes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_expiry_queue);
  p->_order_expiry_queue = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_tx_tracker);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_w3);
  p->_w3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_exchange);
  p->_exchange = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_coordinator);
  p->_coordinator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_trading_rules);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_pending_approval_tx_hashes);
  p->_pending_approval_tx_hashes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_status_polling_task);
  p->_status_polling_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_event_listener_task);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_approval_tx_polling_task);
  p->_approval_tx_polling_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_4name_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_status_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11status_dict_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_ready(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5ready_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_order_books(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_11order_books_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_wallet(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_6wallet_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_use_coordinator(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15use_coordinator_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_trading_rules(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_13trading_rules_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22in_flight_limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_market_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_23in_flight_market_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_tracking_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15tracking_states_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_16in_flight_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__status_polling_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__status_polling_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_20_status_polling_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__user_stream_event_listener_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__user_stream_event_listener_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_32_user_stream_event_listener_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__approval_tx_polling_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__approval_tx_polling_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_approval_tx_polling_task_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange[] = {
  {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reset_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"restore_tracking_states", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_active_exchange_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_status_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_available_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"list_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_format_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_account_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_order_updates", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_single_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_limit_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_market_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_approval_tx_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_api_request", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_order_hash_hex", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_zero_ex_signature", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"submit_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"submit_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_trade", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_tx_hash_receipt", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"list_account_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"wrap_eth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"unwrap_eth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"check_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_fee", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_order_book", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange[] = {
  {(char *)"name", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_name, 0, (char *)0, 0},
  {(char *)"status_dict", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_status_dict, 0, (char *)0, 0},
  {(char *)"ready", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_ready, 0, (char *)0, 0},
  {(char *)"order_books", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_order_books, 0, (char *)0, 0},
  {(char *)"wallet", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_wallet, 0, (char *)0, 0},
  {(char *)"use_coordinator", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_use_coordinator, 0, (char *)0, 0},
  {(char *)"trading_rules", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_trading_rules, 0, (char *)0, 0},
  {(char *)"in_flight_limit_orders", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_limit_orders, 0, (char *)0, 0},
  {(char *)"in_flight_market_orders", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_market_orders, 0, (char *)0, 0},
  {(char *)"limit_orders", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_limit_orders, 0, (char *)0, 0},
  {(char *)"tracking_states", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_tracking_states, 0, (char *)0, 0},
  {(char *)"in_flight_orders", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_in_flight_orders, 0, (char *)0, 0},
  {(char *)"_status_polling_task", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__status_polling_task, __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__status_polling_task, (char *)0, 0},
  {(char *)"_user_stream_event_listener_task", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__user_stream_event_listener_task, __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__user_stream_event_listener_task, (char *)0, 0},
  {(char *)"_approval_tx_polling_task", __pyx_getprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__approval_tx_polling_task, __pyx_setprop_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange__approval_tx_polling_task, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange},
  {Py_tp_getset, (void *)__pyx_getsets_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayExchange",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""BambooRelayExchange", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) ? ((__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse) ? __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker)); if (e) return e;
  if (p->_owner) {
    e = (*v)(((PyObject *)p->_owner), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) { if (__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker);
  tmp = ((PyObject*)p->_owner);
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.BambooRelayTransactionTracker",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""BambooRelayTransactionTracker", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct__get_active_exchange_markets",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct__get_active_exchange_markets", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_1__status_polling_loop",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_1__status_polling_loop", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_url);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_2_list_market",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_2_list_market", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_markets);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_v_trading_rules_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules *)o;
  if (p->__pyx_v_markets) {
    e = (*v)(p->__pyx_v_markets, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(p->__pyx_v_trading_rule, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rules_list) {
    e = (*v)(p->__pyx_v_trading_rules_list, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_3__update_trading_rules",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_3__update_trading_rules", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_4_get_account_orders",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_4_get_account_orders", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_order_hashes);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders *)o;
  if (p->__pyx_v_order_hashes) {
    e = (*v)(p->__pyx_v_order_hashes, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_5_get_orders",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_5_get_orders", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_account_order);
  Py_CLEAR(p->__pyx_v_account_orders_list);
  Py_CLEAR(p->__pyx_v_account_orders_map);
  Py_CLEAR(p->__pyx_v_hash);
  Py_CLEAR(p->__pyx_v_hash_index);
  Py_CLEAR(p->__pyx_v_hashes);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_order_hash);
  Py_CLEAR(p->__pyx_v_order_updates);
  Py_CLEAR(p->__pyx_v_orders);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_limit_order);
  Py_CLEAR(p->__pyx_v_tracked_limit_orders);
  Py_CLEAR(p->__pyx_v_tracked_order);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates *)o;
  if (p->__pyx_v_account_order) {
    e = (*v)(p->__pyx_v_account_order, a); if (e) return e;
  }
  if (p->__pyx_v_account_orders_list) {
    e = (*v)(p->__pyx_v_account_orders_list, a); if (e) return e;
  }
  if (p->__pyx_v_account_orders_map) {
    e = (*v)(p->__pyx_v_account_orders_map, a); if (e) return e;
  }
  if (p->__pyx_v_hash) {
    e = (*v)(p->__pyx_v_hash, a); if (e) return e;
  }
  if (p->__pyx_v_hash_index) {
    e = (*v)(p->__pyx_v_hash_index, a); if (e) return e;
  }
  if (p->__pyx_v_hashes) {
    e = (*v)(p->__pyx_v_hashes, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_order_hash) {
    e = (*v)(p->__pyx_v_order_hash, a); if (e) return e;
  }
  if (p->__pyx_v_order_updates) {
    e = (*v)(p->__pyx_v_order_updates, a); if (e) return e;
  }
  if (p->__pyx_v_orders) {
    e = (*v)(p->__pyx_v_orders, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_limit_order) {
    e = (*v)(((PyObject *)p->__pyx_v_tracked_limit_order), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_limit_orders) {
    e = (*v)(p->__pyx_v_tracked_limit_orders, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_6__get_order_updates",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_6__get_order_updates", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fill);
  Py_CLEAR(p->__pyx_v_fill_base_token_amount);
  Py_CLEAR(p->__pyx_v_order_filled_base_token_amount);
  Py_CLEAR(p->__pyx_v_order_filled_quote_token_amount);
  Py_CLEAR(p->__pyx_v_order_remaining_base_token_amount);
  Py_CLEAR(p->__pyx_v_order_state);
  Py_CLEAR(p->__pyx_v_order_update);
  Py_CLEAR(p->__pyx_v_order_updates);
  Py_CLEAR(p->__pyx_v_previous_amount_available);
  Py_CLEAR(p->__pyx_v_previous_is_cancelled);
  Py_CLEAR(p->__pyx_v_previous_is_done);
  Py_CLEAR(p->__pyx_v_previous_is_expired);
  Py_CLEAR(p->__pyx_v_previous_is_failure);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_limit_order);
  Py_CLEAR(p->__pyx_v_tracked_limit_orders);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status *)o;
  if (p->__pyx_v_fill) {
    e = (*v)(p->__pyx_v_fill, a); if (e) return e;
  }
  if (p->__pyx_v_fill_base_token_amount) {
    e = (*v)(p->__pyx_v_fill_base_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_filled_base_token_amount) {
    e = (*v)(p->__pyx_v_order_filled_base_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_filled_quote_token_amount) {
    e = (*v)(p->__pyx_v_order_filled_quote_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_remaining_base_token_amount) {
    e = (*v)(p->__pyx_v_order_remaining_base_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_state) {
    e = (*v)(p->__pyx_v_order_state, a); if (e) return e;
  }
  if (p->__pyx_v_order_update) {
    e = (*v)(p->__pyx_v_order_update, a); if (e) return e;
  }
  if (p->__pyx_v_order_updates) {
    e = (*v)(p->__pyx_v_order_updates, a); if (e) return e;
  }
  if (p->__pyx_v_previous_amount_available) {
    e = (*v)(p->__pyx_v_previous_amount_available, a); if (e) return e;
  }
  if (p->__pyx_v_previous_is_cancelled) {
    e = (*v)(p->__pyx_v_previous_is_cancelled, a); if (e) return e;
  }
  if (p->__pyx_v_previous_is_done) {
    e = (*v)(p->__pyx_v_previous_is_done, a); if (e) return e;
  }
  if (p->__pyx_v_previous_is_expired) {
    e = (*v)(p->__pyx_v_previous_is_expired, a); if (e) return e;
  }
  if (p->__pyx_v_previous_is_failure) {
    e = (*v)(p->__pyx_v_previous_is_failure, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_limit_order) {
    e = (*v)(((PyObject *)p->__pyx_v_tracked_limit_order), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_limit_orders) {
    e = (*v)(p->__pyx_v_tracked_limit_orders, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_7__update_limit_order_status",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_7__update_limit_order_status", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_err_msg);
  Py_CLEAR(p->__pyx_v_receipt);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_market_order);
  Py_CLEAR(p->__pyx_v_tracked_market_orders);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status *)o;
  if (p->__pyx_v_receipt) {
    e = (*v)(p->__pyx_v_receipt, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_market_order) {
    e = (*v)(p->__pyx_v_tracked_market_order, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_market_orders) {
    e = (*v)(p->__pyx_v_tracked_market_orders, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_8__update_market_order_status",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_8__update_market_order_status", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_receipt);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tx_hash);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop *)o;
  if (p->__pyx_v_receipt) {
    e = (*v)(p->__pyx_v_receipt, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tx_hash) {
    e = (*v)(p->__pyx_v_tx_hash, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_9__approval_tx_polling_loop",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_9__approval_tx_polling_loop", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_client);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_headers);
  Py_CLEAR(p->__pyx_v_http_method);
  Py_CLEAR(p->__pyx_v_response);
  Py_CLEAR(p->__pyx_v_response_json);
  Py_CLEAR(p->__pyx_v_response_text);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_url);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  Py_CLEAR(p->__pyx_t_10);
  Py_CLEAR(p->__pyx_t_11);
  Py_CLEAR(p->__pyx_t_12);
  Py_CLEAR(p->__pyx_t_13);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request *)o;
  if (p->__pyx_v_client) {
    e = (*v)(p->__pyx_v_client, a); if (e) return e;
  }
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_headers) {
    e = (*v)(p->__pyx_v_headers, a); if (e) return e;
  }
  if (p->__pyx_v_response) {
    e = (*v)(p->__pyx_v_response, a); if (e) return e;
  }
  if (p->__pyx_v_response_json) {
    e = (*v)(p->__pyx_v_response_json, a); if (e) return e;
  }
  if (p->__pyx_v_response_text) {
    e = (*v)(p->__pyx_v_response_text, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  if (p->__pyx_t_10) {
    e = (*v)(p->__pyx_t_10, a); if (e) return e;
  }
  if (p->__pyx_t_11) {
    e = (*v)(p->__pyx_t_11, a); if (e) return e;
  }
  if (p->__pyx_t_12) {
    e = (*v)(p->__pyx_t_12, a); if (e) return e;
  }
  if (p->__pyx_t_13) {
    e = (*v)(p->__pyx_t_13, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_10__api_request",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_10__api_request", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_apiOrder);
  Py_CLEAR(p->__pyx_v_base_asset_decimals);
  Py_CLEAR(p->__pyx_v_base_asset_increment);
  Py_CLEAR(p->__pyx_v_calculated_price);
  Py_CLEAR(p->__pyx_v_is_coordinated);
  Py_CLEAR(p->__pyx_v_max_base_amount_with_decimals);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_price);
  Py_CLEAR(p->__pyx_v_orders);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_protocol_fee);
  Py_CLEAR(p->__pyx_v_quote_asset_decimals);
  Py_CLEAR(p->__pyx_v_quote_asset_increment);
  Py_CLEAR(p->__pyx_v_remaining_base_token_amount);
  Py_CLEAR(p->__pyx_v_remaining_quote_token_amount);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_signature);
  Py_CLEAR(p->__pyx_v_signatures);
  Py_CLEAR(p->__pyx_v_signed_market_order);
  Py_CLEAR(p->__pyx_v_taker_asset_fill_amount);
  Py_CLEAR(p->__pyx_v_taker_asset_fill_amounts);
  Py_CLEAR(p->__pyx_v_total_base_token_amount);
  Py_CLEAR(p->__pyx_v_total_quote_token_amount);
  Py_CLEAR(p->__pyx_v_trade_type);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_pair_rules);
  Py_CLEAR(p->__pyx_v_tx_hash);
  Py_CLEAR(p->__pyx_v_valid_orders);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_apiOrder) {
    e = (*v)(p->__pyx_v_apiOrder, a); if (e) return e;
  }
  if (p->__pyx_v_base_asset_decimals) {
    e = (*v)(p->__pyx_v_base_asset_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_base_asset_increment) {
    e = (*v)(p->__pyx_v_base_asset_increment, a); if (e) return e;
  }
  if (p->__pyx_v_calculated_price) {
    e = (*v)(p->__pyx_v_calculated_price, a); if (e) return e;
  }
  if (p->__pyx_v_is_coordinated) {
    e = (*v)(p->__pyx_v_is_coordinated, a); if (e) return e;
  }
  if (p->__pyx_v_max_base_amount_with_decimals) {
    e = (*v)(p->__pyx_v_max_base_amount_with_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_price) {
    e = (*v)(p->__pyx_v_order_price, a); if (e) return e;
  }
  if (p->__pyx_v_orders) {
    e = (*v)(p->__pyx_v_orders, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_protocol_fee) {
    e = (*v)(p->__pyx_v_protocol_fee, a); if (e) return e;
  }
  if (p->__pyx_v_quote_asset_decimals) {
    e = (*v)(p->__pyx_v_quote_asset_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_quote_asset_increment) {
    e = (*v)(p->__pyx_v_quote_asset_increment, a); if (e) return e;
  }
  if (p->__pyx_v_remaining_base_token_amount) {
    e = (*v)(p->__pyx_v_remaining_base_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_remaining_quote_token_amount) {
    e = (*v)(p->__pyx_v_remaining_quote_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_signature) {
    e = (*v)(p->__pyx_v_signature, a); if (e) return e;
  }
  if (p->__pyx_v_signatures) {
    e = (*v)(p->__pyx_v_signatures, a); if (e) return e;
  }
  if (p->__pyx_v_signed_market_order) {
    e = (*v)(p->__pyx_v_signed_market_order, a); if (e) return e;
  }
  if (p->__pyx_v_taker_asset_fill_amount) {
    e = (*v)(p->__pyx_v_taker_asset_fill_amount, a); if (e) return e;
  }
  if (p->__pyx_v_taker_asset_fill_amounts) {
    e = (*v)(p->__pyx_v_taker_asset_fill_amounts, a); if (e) return e;
  }
  if (p->__pyx_v_total_base_token_amount) {
    e = (*v)(p->__pyx_v_total_base_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_total_quote_token_amount) {
    e = (*v)(p->__pyx_v_total_quote_token_amount, a); if (e) return e;
  }
  if (p->__pyx_v_trade_type) {
    e = (*v)(p->__pyx_v_trade_type, a); if (e) return e;
  }
  if (p->__pyx_v_trading_pair_rules) {
    e = (*v)(p->__pyx_v_trading_pair_rules, a); if (e) return e;
  }
  if (p->__pyx_v_tx_hash) {
    e = (*v)(p->__pyx_v_tx_hash, a); if (e) return e;
  }
  if (p->__pyx_v_valid_orders) {
    e = (*v)(p->__pyx_v_valid_orders, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_11_submit_market_order",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_11_submit_market_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_base_amount_with_decimals);
  Py_CLEAR(p->__pyx_v_base_asset_decimals);
  Py_CLEAR(p->__pyx_v_base_asset_increment);
  Py_CLEAR(p->__pyx_v_base_token_asset_data);
  Py_CLEAR(p->__pyx_v_ex);
  Py_CLEAR(p->__pyx_v_expires);
  Py_CLEAR(p->__pyx_v_is_coordinated);
  Py_CLEAR(p->__pyx_v_latest_salt);
  Py_CLEAR(p->__pyx_v_maker_asset_amount);
  Py_CLEAR(p->__pyx_v_maker_asset_data);
  Py_CLEAR(p->__pyx_v_null_address);
  Py_CLEAR(p->__pyx_v_order_hash);
  Py_CLEAR(p->__pyx_v_order_hash_hex);
  Py_CLEAR(p->__pyx_v_pair_split);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_quote_amount);
  Py_CLEAR(p->__pyx_v_quote_amount_with_decimals);
  Py_CLEAR(p->__pyx_v_quote_asset_decimals);
  Py_CLEAR(p->__pyx_v_quote_asset_increment);
  Py_CLEAR(p->__pyx_v_quote_token_asset_data);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_signature);
  Py_CLEAR(p->__pyx_v_signed_limit_order);
  Py_CLEAR(p->__pyx_v_taker_asset_amount);
  Py_CLEAR(p->__pyx_v_taker_asset_data);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_trade_type);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_pair_rules);
  Py_CLEAR(p->__pyx_v_unsigned_limit_order);
  Py_CLEAR(p->__pyx_v_zero_ex_order);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_base_amount_with_decimals) {
    e = (*v)(p->__pyx_v_base_amount_with_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_base_asset_decimals) {
    e = (*v)(p->__pyx_v_base_asset_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_base_asset_increment) {
    e = (*v)(p->__pyx_v_base_asset_increment, a); if (e) return e;
  }
  if (p->__pyx_v_base_token_asset_data) {
    e = (*v)(p->__pyx_v_base_token_asset_data, a); if (e) return e;
  }
  if (p->__pyx_v_ex) {
    e = (*v)(p->__pyx_v_ex, a); if (e) return e;
  }
  if (p->__pyx_v_expires) {
    e = (*v)(p->__pyx_v_expires, a); if (e) return e;
  }
  if (p->__pyx_v_is_coordinated) {
    e = (*v)(p->__pyx_v_is_coordinated, a); if (e) return e;
  }
  if (p->__pyx_v_latest_salt) {
    e = (*v)(p->__pyx_v_latest_salt, a); if (e) return e;
  }
  if (p->__pyx_v_maker_asset_amount) {
    e = (*v)(p->__pyx_v_maker_asset_amount, a); if (e) return e;
  }
  if (p->__pyx_v_maker_asset_data) {
    e = (*v)(p->__pyx_v_maker_asset_data, a); if (e) return e;
  }
  if (p->__pyx_v_order_hash) {
    e = (*v)(p->__pyx_v_order_hash, a); if (e) return e;
  }
  if (p->__pyx_v_order_hash_hex) {
    e = (*v)(p->__pyx_v_order_hash_hex, a); if (e) return e;
  }
  if (p->__pyx_v_pair_split) {
    e = (*v)(p->__pyx_v_pair_split, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_quote_amount) {
    e = (*v)(p->__pyx_v_quote_amount, a); if (e) return e;
  }
  if (p->__pyx_v_quote_amount_with_decimals) {
    e = (*v)(p->__pyx_v_quote_amount_with_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_quote_asset_decimals) {
    e = (*v)(p->__pyx_v_quote_asset_decimals, a); if (e) return e;
  }
  if (p->__pyx_v_quote_asset_increment) {
    e = (*v)(p->__pyx_v_quote_asset_increment, a); if (e) return e;
  }
  if (p->__pyx_v_quote_token_asset_data) {
    e = (*v)(p->__pyx_v_quote_token_asset_data, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_signature) {
    e = (*v)(p->__pyx_v_signature, a); if (e) return e;
  }
  if (p->__pyx_v_signed_limit_order) {
    e = (*v)(p->__pyx_v_signed_limit_order, a); if (e) return e;
  }
  if (p->__pyx_v_taker_asset_amount) {
    e = (*v)(p->__pyx_v_taker_asset_amount, a); if (e) return e;
  }
  if (p->__pyx_v_taker_asset_data) {
    e = (*v)(p->__pyx_v_taker_asset_data, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_trade_type) {
    e = (*v)(p->__pyx_v_trade_type, a); if (e) return e;
  }
  if (p->__pyx_v_trading_pair_rules) {
    e = (*v)(p->__pyx_v_trading_pair_rules, a); if (e) return e;
  }
  if (p->__pyx_v_unsigned_limit_order) {
    e = (*v)(p->__pyx_v_unsigned_limit_order, a); if (e) return e;
  }
  if (p->__pyx_v_zero_ex_order) {
    e = (*v)(p->__pyx_v_zero_ex_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_12_submit_limit_order",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_12_submit_limit_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_flight_limit_orders);
  Py_CLEAR(p->__pyx_v_incomplete_order_ids);
  Py_CLEAR(p->__pyx_v_incomplete_orders);
  Py_CLEAR(p->__pyx_8genexpr5__pyx_v_o);
  Py_CLEAR(p->__pyx_8genexpr6__pyx_v_oid);
  Py_CLEAR(p->__pyx_8genexpr7__pyx_v_oid);
  Py_CLEAR(p->__pyx_8genexpr8__pyx_v_oid);
  Py_CLEAR(p->__pyx_8genexpr9__pyx_v_oid);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_ids);
  Py_CLEAR(p->__pyx_v_orders);
  Py_CLEAR(p->__pyx_v_receipt);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_soft_cancel_result);
  Py_CLEAR(p->__pyx_v_tx_hash);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  Py_CLEAR(p->__pyx_t_10);
  Py_CLEAR(p->__pyx_t_11);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all *)o;
  if (p->__pyx_v_in_flight_limit_orders) {
    e = (*v)(p->__pyx_v_in_flight_limit_orders, a); if (e) return e;
  }
  if (p->__pyx_v_incomplete_order_ids) {
    e = (*v)(p->__pyx_v_incomplete_order_ids, a); if (e) return e;
  }
  if (p->__pyx_v_incomplete_orders) {
    e = (*v)(p->__pyx_v_incomplete_orders, a); if (e) return e;
  }
  if (p->__pyx_8genexpr5__pyx_v_o) {
    e = (*v)(p->__pyx_8genexpr5__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_8genexpr6__pyx_v_oid) {
    e = (*v)(p->__pyx_8genexpr6__pyx_v_oid, a); if (e) return e;
  }
  if (p->__pyx_8genexpr7__pyx_v_oid) {
    e = (*v)(p->__pyx_8genexpr7__pyx_v_oid, a); if (e) return e;
  }
  if (p->__pyx_8genexpr8__pyx_v_oid) {
    e = (*v)(p->__pyx_8genexpr8__pyx_v_oid, a); if (e) return e;
  }
  if (p->__pyx_8genexpr9__pyx_v_oid) {
    e = (*v)(p->__pyx_8genexpr9__pyx_v_oid, a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_ids) {
    e = (*v)(p->__pyx_v_order_ids, a); if (e) return e;
  }
  if (p->__pyx_v_orders) {
    e = (*v)(p->__pyx_v_orders, a); if (e) return e;
  }
  if (p->__pyx_v_receipt) {
    e = (*v)(p->__pyx_v_receipt, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_soft_cancel_result) {
    e = (*v)(p->__pyx_v_soft_cancel_result, a); if (e) return e;
  }
  if (p->__pyx_v_tx_hash) {
    e = (*v)(p->__pyx_v_tx_hash, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  if (p->__pyx_t_10) {
    e = (*v)(p->__pyx_t_10, a); if (e) return e;
  }
  if (p->__pyx_t_11) {
    e = (*v)(p->__pyx_t_11, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_13_cancel_all",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_13_cancel_all", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_amount_to_fill);
  Py_CLEAR(p->__pyx_v_avg_price);
  Py_CLEAR(p->__pyx_v_exchange_order_id);
  Py_CLEAR(p->__pyx_v_expires);
  Py_CLEAR(p->__pyx_v_is_coordinated);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_protocol_fee);
  Py_CLEAR(p->__pyx_v_q_amt);
  Py_CLEAR(p->__pyx_v_q_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trade_type);
  Py_CLEAR(p->__pyx_v_trade_type_desc);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_v_tx_hash);
  Py_CLEAR(p->__pyx_v_type_str);
  Py_CLEAR(p->__pyx_v_zero_ex_order);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_amount_to_fill) {
    e = (*v)(p->__pyx_v_amount_to_fill, a); if (e) return e;
  }
  if (p->__pyx_v_avg_price) {
    e = (*v)(p->__pyx_v_avg_price, a); if (e) return e;
  }
  if (p->__pyx_v_exchange_order_id) {
    e = (*v)(p->__pyx_v_exchange_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_expires) {
    e = (*v)(p->__pyx_v_expires, a); if (e) return e;
  }
  if (p->__pyx_v_is_coordinated) {
    e = (*v)(p->__pyx_v_is_coordinated, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_protocol_fee) {
    e = (*v)(p->__pyx_v_protocol_fee, a); if (e) return e;
  }
  if (p->__pyx_v_q_amt) {
    e = (*v)(p->__pyx_v_q_amt, a); if (e) return e;
  }
  if (p->__pyx_v_q_price) {
    e = (*v)(p->__pyx_v_q_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_trade_type) {
    e = (*v)(p->__pyx_v_trade_type, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(((PyObject *)p->__pyx_v_trading_rule), a); if (e) return e;
  }
  if (p->__pyx_v_tx_hash) {
    e = (*v)(p->__pyx_v_tx_hash, a); if (e) return e;
  }
  if (p->__pyx_v_zero_ex_order) {
    e = (*v)(p->__pyx_v_zero_ex_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_14_execute_trade",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_14_execute_trade", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_receipt);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tx_hash);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order *)o;
  if (p->__pyx_v_order) {
    e = (*v)(((PyObject *)p->__pyx_v_order), a); if (e) return e;
  }
  if (p->__pyx_v_receipt) {
    e = (*v)(p->__pyx_v_receipt, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tx_hash) {
    e = (*v)(p->__pyx_v_tx_hash, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_15_cancel_order",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_15_cancel_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_response_data);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_url);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders *)o;
  if (p->__pyx_v_response_data) {
    e = (*v)(p->__pyx_v_response_data, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_16_list_account_orders",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_16_list_account_orders", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tx_hashes);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tx_hashes) {
    e = (*v)(p->__pyx_v_tx_hashes, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_17_start_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_17_start_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_18_stop_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_18_stop_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network[--__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network[__pyx_freecount_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network_spec = {
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.__pyx_scope_struct_19_check_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange.""__pyx_scope_struct_19_check_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {0, __pyx_k_0x, sizeof(__pyx_k_0x), 0, 1, 0, 0},
  {0, __pyx_k_0x000000000000000000000000000000, sizeof(__pyx_k_0x000000000000000000000000000000), 0, 1, 0, 0},
  {0, __pyx_k_0xf47261b00000000000000000000000, sizeof(__pyx_k_0xf47261b00000000000000000000000), 0, 1, 0, 0},
  {0, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {0, __pyx_k_1e_2, sizeof(__pyx_k_1e_2), 0, 1, 0, 0},
  {0, __pyx_k_API_CALL_TIMEOUT, sizeof(__pyx_k_API_CALL_TIMEOUT), 0, 0, 1, 1},
  {0, __pyx_k_API_returned_incorrect_values_fo, sizeof(__pyx_k_API_returned_incorrect_values_fo), 0, 1, 0, 0},
  {0, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT, sizeof(__pyx_k_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_MAINNET_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_MAINNET_FEE_RECIPIE), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_REST_ENDPOINT, sizeof(__pyx_k_BAMBOO_RELAY_REST_ENDPOINT), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_TEST_ENDPOINT, sizeof(__pyx_k_BAMBOO_RELAY_TEST_ENDPOINT), 0, 0, 1, 1},
  {0, __pyx_k_BAMBOO_RELAY_TEST_FEE_RECIPIENT, sizeof(__pyx_k_BAMBOO_RELAY_TEST_FEE_RECIPIENT), 0, 0, 1, 1},
  {0, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayAPIOrderBookDataSourc, sizeof(__pyx_k_BambooRelayAPIOrderBookDataSourc), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange, sizeof(__pyx_k_BambooRelayExchange), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange___reduce_cyt, sizeof(__pyx_k_BambooRelayExchange___reduce_cyt), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange___setstate_c, sizeof(__pyx_k_BambooRelayExchange___setstate_c), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__api_request, sizeof(__pyx_k_BambooRelayExchange__api_request), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__approval_tx, sizeof(__pyx_k_BambooRelayExchange__approval_tx), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__format_trad, sizeof(__pyx_k_BambooRelayExchange__format_trad), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__get_order_u, sizeof(__pyx_k_BambooRelayExchange__get_order_u), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__status_poll, sizeof(__pyx_k_BambooRelayExchange__status_poll), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__stop_networ, sizeof(__pyx_k_BambooRelayExchange__stop_networ), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_avai, sizeof(__pyx_k_BambooRelayExchange__update_avai), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_bala, sizeof(__pyx_k_BambooRelayExchange__update_bala), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_limi, sizeof(__pyx_k_BambooRelayExchange__update_limi), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_mark, sizeof(__pyx_k_BambooRelayExchange__update_mark), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_sing, sizeof(__pyx_k_BambooRelayExchange__update_sing), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange__update_trad, sizeof(__pyx_k_BambooRelayExchange__update_trad), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_buy, sizeof(__pyx_k_BambooRelayExchange_buy), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_cancel, sizeof(__pyx_k_BambooRelayExchange_cancel), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_cancel_all, sizeof(__pyx_k_BambooRelayExchange_cancel_all), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_cancel_order, sizeof(__pyx_k_BambooRelayExchange_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_check_networ, sizeof(__pyx_k_BambooRelayExchange_check_networ), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_execute_trad, sizeof(__pyx_k_BambooRelayExchange_execute_trad), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_account, sizeof(__pyx_k_BambooRelayExchange_get_account), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_active_e, sizeof(__pyx_k_BambooRelayExchange_get_active_e), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_fee, sizeof(__pyx_k_BambooRelayExchange_get_fee), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_order_bo, sizeof(__pyx_k_BambooRelayExchange_get_order_bo), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_order_ha, sizeof(__pyx_k_BambooRelayExchange_get_order_ha), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_orders, sizeof(__pyx_k_BambooRelayExchange_get_orders), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_price, sizeof(__pyx_k_BambooRelayExchange_get_price), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_tx_hash, sizeof(__pyx_k_BambooRelayExchange_get_tx_hash), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_get_zero_ex, sizeof(__pyx_k_BambooRelayExchange_get_zero_ex), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_list_account, sizeof(__pyx_k_BambooRelayExchange_list_account), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_list_market, sizeof(__pyx_k_BambooRelayExchange_list_market), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_logger, sizeof(__pyx_k_BambooRelayExchange_logger), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_reset_state, sizeof(__pyx_k_BambooRelayExchange_reset_state), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_restore_trac, sizeof(__pyx_k_BambooRelayExchange_restore_trac), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_sell, sizeof(__pyx_k_BambooRelayExchange_sell), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_start_networ, sizeof(__pyx_k_BambooRelayExchange_start_networ), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_stop_network, sizeof(__pyx_k_BambooRelayExchange_stop_network), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_submit_limit, sizeof(__pyx_k_BambooRelayExchange_submit_limit), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_submit_marke, sizeof(__pyx_k_BambooRelayExchange_submit_marke), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_unwrap_eth, sizeof(__pyx_k_BambooRelayExchange_unwrap_eth), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayExchange_wrap_eth, sizeof(__pyx_k_BambooRelayExchange_wrap_eth), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayOrderBookTracker, sizeof(__pyx_k_BambooRelayOrderBookTracker), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayTransactionTracker, sizeof(__pyx_k_BambooRelayTransactionTracker), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayTransactionTracker_2, sizeof(__pyx_k_BambooRelayTransactionTracker_2), 0, 0, 1, 1},
  {0, __pyx_k_BambooRelayTransactionTracker_3, sizeof(__pyx_k_BambooRelayTransactionTracker_3), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {0, __pyx_k_CANCELED, sizeof(__pyx_k_CANCELED), 0, 1, 0, 1},
  {0, __pyx_k_CANCEL_EXPIRY_TIME, sizeof(__pyx_k_CANCEL_EXPIRY_TIME), 0, 0, 1, 1},
  {0, __pyx_k_COMPLETED, sizeof(__pyx_k_COMPLETED), 0, 1, 0, 1},
  {0, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {0, __pyx_k_CancelledError, sizeof(__pyx_k_CancelledError), 0, 0, 1, 1},
  {0, __pyx_k_Check_transaction_hash, sizeof(__pyx_k_Check_transaction_hash), 0, 1, 0, 0},
  {0, __pyx_k_ClientSession, sizeof(__pyx_k_ClientSession), 0, 0, 1, 1},
  {0, __pyx_k_Could_not_get_token_approval_sta, sizeof(__pyx_k_Could_not_get_token_approval_sta), 0, 1, 0, 0},
  {0, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {0, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {0, __pyx_k_Dict_str_Any, sizeof(__pyx_k_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_Dict_str_Dict_str_Any, sizeof(__pyx_k_Dict_str_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_Dict_str_any, sizeof(__pyx_k_Dict_str_any), 0, 0, 1, 0},
  {0, __pyx_k_ETH, sizeof(__pyx_k_ETH), 0, 1, 0, 1},
  {0, __pyx_k_Error_fetching_data_from, sizeof(__pyx_k_Error_fetching_data_from), 0, 1, 0, 0},
  {0, __pyx_k_Error_parsing_the_trading_pair, sizeof(__pyx_k_Error_parsing_the_trading_pair), 0, 1, 0, 0},
  {0, __pyx_k_Error_restoring_tracking_states, sizeof(__pyx_k_Error_restoring_tracking_states), 0, 1, 0, 0},
  {0, __pyx_k_Error_submitting, sizeof(__pyx_k_Error_submitting), 0, 1, 0, 0},
  {0, __pyx_k_EthereumChain, sizeof(__pyx_k_EthereumChain), 0, 0, 1, 1},
  {0, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
  {0, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {0, __pyx_k_FILLED, sizeof(__pyx_k_FILLED), 0, 1, 0, 1},
  {0, __pyx_k_Failed_to_cancel_order, sizeof(__pyx_k_Failed_to_cancel_order), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_cancel_order_on_Bamboo, sizeof(__pyx_k_Failed_to_cancel_order_on_Bamboo), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_cancel_orders_on_Bambo, sizeof(__pyx_k_Failed_to_cancel_orders_on_Bambo), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_cancel_orders_on_Bambo_2, sizeof(__pyx_k_Failed_to_cancel_orders_on_Bambo_2), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_fetch_account_updates, sizeof(__pyx_k_Failed_to_fetch_account_updates), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_submit, sizeof(__pyx_k_Failed_to_submit), 0, 1, 0, 0},
  {0, __pyx_k_Filled, sizeof(__pyx_k_Filled), 0, 1, 0, 0},
  {0, __pyx_k_GET, sizeof(__pyx_k_GET), 0, 1, 0, 1},
  {0, __pyx_k_HTTPProvider, sizeof(__pyx_k_HTTPProvider), 0, 0, 1, 1},
  {0, __pyx_k_HTTP_status_is, sizeof(__pyx_k_HTTP_status_is), 0, 1, 0, 0},
  {0, __pyx_k_HummingbotLogger, sizeof(__pyx_k_HummingbotLogger), 0, 0, 1, 1},
  {0, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_Incorrect_values_for_market_orde, sizeof(__pyx_k_Incorrect_values_for_market_orde), 0, 1, 0, 0},
  {0, __pyx_k_Invalid_trade_type_Aborting, sizeof(__pyx_k_Invalid_trade_type_Aborting), 0, 1, 0, 0},
  {0, __pyx_k_KOVAN, sizeof(__pyx_k_KOVAN), 0, 0, 1, 1},
  {0, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {0, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {0, __pyx_k_Limit_orders_require_a_price_Abo, sizeof(__pyx_k_Limit_orders_require_a_price_Abo), 0, 1, 0, 0},
  {0, __pyx_k_Limit_orders_require_an_expirati, sizeof(__pyx_k_Limit_orders_require_an_expirati), 0, 1, 0, 0},
  {0, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {0, __pyx_k_List_BambooRelayInFlightOrder, sizeof(__pyx_k_List_BambooRelayInFlightOrder), 0, 0, 1, 0},
  {0, __pyx_k_List_CancellationResult, sizeof(__pyx_k_List_CancellationResult), 0, 0, 1, 0},
  {0, __pyx_k_List_Dict_str_Any, sizeof(__pyx_k_List_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_List_TradingRule, sizeof(__pyx_k_List_TradingRule), 0, 0, 1, 0},
  {0, __pyx_k_List_str, sizeof(__pyx_k_List_str), 0, 0, 1, 0},
  {0, __pyx_k_MAIN_NET, sizeof(__pyx_k_MAIN_NET), 0, 0, 1, 1},
  {0, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T, sizeof(__pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_EXPIRED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_EXPIRED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG, sizeof(__pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN, sizeof(__pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_MARKET_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {0, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {0, __pyx_k_NOT_CONNECTED, sizeof(__pyx_k_NOT_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {0, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {0, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {0, __pyx_k_No_valid_orders_found_for_amount, sizeof(__pyx_k_No_valid_orders_found_for_amount), 0, 1, 0, 0},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_ORDER_CREATION_BACKOFF_TIME, sizeof(__pyx_k_ORDER_CREATION_BACKOFF_TIME), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_EXPIRY_TIME, sizeof(__pyx_k_ORDER_EXPIRY_TIME), 0, 0, 1, 1},
  {0, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {0, __pyx_k_Optional_Dict_str_Any, sizeof(__pyx_k_Optional_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_Optional_Dict_str_str, sizeof(__pyx_k_Optional_Dict_str_str), 0, 0, 1, 0},
  {0, __pyx_k_Order, sizeof(__pyx_k_Order), 0, 0, 1, 1},
  {0, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpired, sizeof(__pyx_k_OrderExpired), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpiredEvent, sizeof(__pyx_k_OrderExpiredEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {0, __pyx_k_Order_not_found_in_tracked_orde, sizeof(__pyx_k_Order_not_found_in_tracked_orde), 0, 1, 0, 0},
  {0, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {0, __pyx_k_PRE_EMPTIVE_SOFT_CANCEL_TIME, sizeof(__pyx_k_PRE_EMPTIVE_SOFT_CANCEL_TIME), 0, 0, 1, 1},
  {0, __pyx_k_RINKEBY, sizeof(__pyx_k_RINKEBY), 0, 0, 1, 1},
  {0, __pyx_k_ROPSTEN, sizeof(__pyx_k_ROPSTEN), 0, 0, 1, 1},
  {0, __pyx_k_ROUND_FLOOR, sizeof(__pyx_k_ROUND_FLOOR), 0, 0, 1, 1},
  {0, __pyx_k_ReceivedAsset, sizeof(__pyx_k_ReceivedAsset), 0, 0, 1, 1},
  {0, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {0, __pyx_k_Server_Error_Bad_Gateway, sizeof(__pyx_k_Server_Error_Bad_Gateway), 0, 1, 0, 0},
  {0, __pyx_k_Skipping, sizeof(__pyx_k_Skipping), 0, 1, 0, 0},
  {0, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {0, __pyx_k_The_limit_buy_order, sizeof(__pyx_k_The_limit_buy_order), 0, 1, 0, 0},
  {0, __pyx_k_The_limit_order, sizeof(__pyx_k_The_limit_order), 0, 1, 0, 0},
  {0, __pyx_k_The_limit_orders, sizeof(__pyx_k_The_limit_orders), 0, 1, 0, 0},
  {0, __pyx_k_The_limit_sell_order, sizeof(__pyx_k_The_limit_sell_order), 0, 1, 0, 0},
  {0, __pyx_k_The_market_buy_order, sizeof(__pyx_k_The_market_buy_order), 0, 1, 0, 0},
  {0, __pyx_k_The_market_order, sizeof(__pyx_k_The_market_order), 0, 1, 0, 0},
  {0, __pyx_k_The_market_sell_order, sizeof(__pyx_k_The_market_sell_order), 0, 1, 0, 0},
  {0, __pyx_k_TradeFee, sizeof(__pyx_k_TradeFee), 0, 0, 1, 1},
  {0, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {0, __pyx_k_TransactionNotFound, sizeof(__pyx_k_TransactionNotFound), 0, 0, 1, 1},
  {0, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {0, __pyx_k_Tuple_Decimal_Decimal_str_int_bo, sizeof(__pyx_k_Tuple_Decimal_Decimal_str_int_bo), 0, 0, 1, 0},
  {0, __pyx_k_Tuple_str_ZeroExOrder, sizeof(__pyx_k_Tuple_str_ZeroExOrder), 0, 0, 1, 0},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_UPDATE_MARKET_ORDERS_INTERVAL, sizeof(__pyx_k_UPDATE_MARKET_ORDERS_INTERVAL), 0, 0, 1, 1},
  {0, __pyx_k_UPDATE_OPEN_LIMIT_ORDERS_INTERVA, sizeof(__pyx_k_UPDATE_OPEN_LIMIT_ORDERS_INTERVA), 0, 0, 1, 1},
  {0, __pyx_k_UPDATE_RULES_INTERVAL, sizeof(__pyx_k_UPDATE_RULES_INTERVAL), 0, 0, 1, 1},
  {0, __pyx_k_Unexpected_error_cancelling_orde, sizeof(__pyx_k_Unexpected_error_cancelling_orde), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_cancelling_orde_2, sizeof(__pyx_k_Unexpected_error_cancelling_orde_2), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_while_fetching, sizeof(__pyx_k_Unexpected_error_while_fetching), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_while_fetching_2, sizeof(__pyx_k_Unexpected_error_while_fetching_2), 0, 1, 0, 0},
  {0, __pyx_k_Unrecognized_transaction_status, sizeof(__pyx_k_Unrecognized_transaction_status), 0, 1, 0, 0},
  {0, __pyx_k_User_Agent, sizeof(__pyx_k_User_Agent), 0, 1, 0, 0},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k_Web3, sizeof(__pyx_k_Web3), 0, 0, 1, 1},
  {0, __pyx_k_Web3Wallet, sizeof(__pyx_k_Web3Wallet), 0, 0, 1, 1},
  {0, __pyx_k_ZEROEX_TEST, sizeof(__pyx_k_ZEROEX_TEST), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_KOVAN_COORDINATOR_ADDRES, sizeof(__pyx_k_ZERO_EX_KOVAN_COORDINATOR_ADDRES), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_KOVAN_COORDINATOR_REGIST, sizeof(__pyx_k_ZERO_EX_KOVAN_COORDINATOR_REGIST), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_KOVAN_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_KOVAN_ERC20_PROXY), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_KOVAN_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_KOVAN_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_MAINNET_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_MAINNET_COORDINATOR_ADDR), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_MAINNET_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_MAINNET_COORDINATOR_REGI), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_MAINNET_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_MAINNET_ERC20_PROXY), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_MAINNET_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_MAINNET_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_RINKEBY_COORDINATOR_ADDR), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_RINKEBY_COORDINATOR_REGI), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_RINKEBY_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_RINKEBY_ERC20_PROXY), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_ADDR), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_REGI), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_ROPSTEN_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_ROPSTEN_ERC20_PROXY), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_TEST_COORDINATOR_ADDRESS, sizeof(__pyx_k_ZERO_EX_TEST_COORDINATOR_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_TEST_COORDINATOR_REGISTR, sizeof(__pyx_k_ZERO_EX_TEST_COORDINATOR_REGISTR), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_TEST_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_TEST_ERC20_PROXY), 0, 0, 1, 1},
  {0, __pyx_k_ZERO_EX_TEST_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_TEST_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {0, __pyx_k_ZeroExCoordinator, sizeof(__pyx_k_ZeroExCoordinator), 0, 0, 1, 1},
  {0, __pyx_k_ZeroExExchange, sizeof(__pyx_k_ZeroExExchange), 0, 0, 1, 1},
  {0, __pyx_k_ZeroExFillEvent, sizeof(__pyx_k_ZeroExFillEvent), 0, 0, 1, 1},
  {0, __pyx_k_ZeroExOrder, sizeof(__pyx_k_ZeroExOrder), 0, 0, 1, 1},
  {0, __pyx_k__125, sizeof(__pyx_k__125), 0, 0, 1, 1},
  {0, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {0, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {0, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {0, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {0, __pyx_k__41, sizeof(__pyx_k__41), 0, 1, 0, 0},
  {0, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {0, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 1},
  {0, __pyx_k_according_to_order_status_API, sizeof(__pyx_k_according_to_order_status_API), 0, 1, 0, 0},
  {0, __pyx_k_according_to_the_RPC_transactio, sizeof(__pyx_k_according_to_the_RPC_transactio), 0, 1, 0, 0},
  {0, __pyx_k_account_available_balance, sizeof(__pyx_k_account_available_balance), 0, 1, 0, 1},
  {0, __pyx_k_account_balance, sizeof(__pyx_k_account_balance), 0, 1, 0, 1},
  {0, __pyx_k_account_order, sizeof(__pyx_k_account_order), 0, 0, 1, 1},
  {0, __pyx_k_account_orders_list, sizeof(__pyx_k_account_orders_list), 0, 0, 1, 1},
  {0, __pyx_k_account_orders_map, sizeof(__pyx_k_account_orders_map), 0, 0, 1, 1},
  {0, __pyx_k_accounts, sizeof(__pyx_k_accounts), 0, 1, 0, 0},
  {0, __pyx_k_active_asks, sizeof(__pyx_k_active_asks), 0, 0, 1, 1},
  {0, __pyx_k_active_bids, sizeof(__pyx_k_active_bids), 0, 0, 1, 1},
  {0, __pyx_k_address, sizeof(__pyx_k_address), 0, 0, 1, 1},
  {0, __pyx_k_aenter, sizeof(__pyx_k_aenter), 0, 0, 1, 1},
  {0, __pyx_k_aexit, sizeof(__pyx_k_aexit), 0, 0, 1, 1},
  {0, __pyx_k_aiohttp, sizeof(__pyx_k_aiohttp), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {0, __pyx_k_amount_to_fill, sizeof(__pyx_k_amount_to_fill), 0, 0, 1, 1},
  {0, __pyx_k_and_price, sizeof(__pyx_k_and_price), 0, 1, 0, 0},
  {0, __pyx_k_apiOrder, sizeof(__pyx_k_apiOrder), 0, 0, 1, 1},
  {0, __pyx_k_api_request, sizeof(__pyx_k_api_request), 0, 0, 1, 1},
  {0, __pyx_k_app_warning_msg, sizeof(__pyx_k_app_warning_msg), 0, 0, 1, 1},
  {0, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {0, __pyx_k_approval_tx_polling_loop, sizeof(__pyx_k_approval_tx_polling_loop), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_async_timeout, sizeof(__pyx_k_async_timeout), 0, 0, 1, 1},
  {0, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {0, __pyx_k_avg_price, sizeof(__pyx_k_avg_price), 0, 0, 1, 1},
  {0, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {0, __pyx_k_balance, sizeof(__pyx_k_balance), 0, 0, 1, 1},
  {0, __pyx_k_bamboo_relay, sizeof(__pyx_k_bamboo_relay), 0, 1, 0, 1},
  {0, __pyx_k_baseTokenDecimals, sizeof(__pyx_k_baseTokenDecimals), 0, 1, 0, 1},
  {0, __pyx_k_base_amount_with_decimals, sizeof(__pyx_k_base_amount_with_decimals), 0, 0, 1, 1},
  {0, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {0, __pyx_k_base_asset_decimals, sizeof(__pyx_k_base_asset_decimals), 0, 0, 1, 1},
  {0, __pyx_k_base_asset_increment, sizeof(__pyx_k_base_asset_increment), 0, 0, 1, 1},
  {0, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {0, __pyx_k_base_token_asset_data, sizeof(__pyx_k_base_token_asset_data), 0, 0, 1, 1},
  {0, __pyx_k_batch_fill_orders, sizeof(__pyx_k_batch_fill_orders), 0, 0, 1, 1},
  {0, __pyx_k_batch_soft_cancel_orders, sizeof(__pyx_k_batch_soft_cancel_orders), 0, 0, 1, 1},
  {0, __pyx_k_blockNumber, sizeof(__pyx_k_blockNumber), 0, 1, 0, 1},
  {0, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {0, __pyx_k_brm_logger, sizeof(__pyx_k_brm_logger), 0, 0, 1, 1},
  {0, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 0},
  {0, __pyx_k_buy_2, sizeof(__pyx_k_buy_2), 0, 0, 1, 1},
  {0, __pyx_k_c_did_timeout_tx, sizeof(__pyx_k_c_did_timeout_tx), 0, 0, 1, 1},
  {0, __pyx_k_calculated_price, sizeof(__pyx_k_calculated_price), 0, 0, 1, 1},
  {0, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {0, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {0, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_cancel_orders_up_to, sizeof(__pyx_k_cancel_orders_up_to), 0, 0, 1, 1},
  {0, __pyx_k_capitalize, sizeof(__pyx_k_capitalize), 0, 0, 1, 1},
  {0, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {0, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {0, __pyx_k_chainId, sizeof(__pyx_k_chainId), 0, 1, 0, 1},
  {0, __pyx_k_chain_id, sizeof(__pyx_k_chain_id), 0, 0, 1, 1},
  {0, __pyx_k_check_and_fix_approval_amounts, sizeof(__pyx_k_check_and_fix_approval_amounts), 0, 0, 1, 1},
  {0, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {0, __pyx_k_client, sizeof(__pyx_k_client), 0, 0, 1, 1},
  {0, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {0, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {0, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {0, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {0, __pyx_k_could_not_be_found_according_to, sizeof(__pyx_k_could_not_be_found_according_to), 0, 1, 0, 0},
  {0, __pyx_k_currency, sizeof(__pyx_k_currency), 0, 0, 1, 1},
  {0, __pyx_k_current_backend, sizeof(__pyx_k_current_backend), 0, 0, 1, 1},
  {0, __pyx_k_current_timestamp, sizeof(__pyx_k_current_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {0, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {0, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {0, __pyx_k_erc20_tokens, sizeof(__pyx_k_erc20_tokens), 0, 0, 1, 1},
  {0, __pyx_k_err_msg, sizeof(__pyx_k_err_msg), 0, 0, 1, 1},
  {0, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {0, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {0, __pyx_k_eth, sizeof(__pyx_k_eth), 0, 0, 1, 1},
  {0, __pyx_k_eth_utils, sizeof(__pyx_k_eth_utils), 0, 0, 1, 1},
  {0, __pyx_k_ethereum_rpc_url, sizeof(__pyx_k_ethereum_rpc_url), 0, 0, 1, 1},
  {0, __pyx_k_ex, sizeof(__pyx_k_ex), 0, 0, 1, 1},
  {0, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {0, __pyx_k_exchangeAddress, sizeof(__pyx_k_exchangeAddress), 0, 1, 0, 1},
  {0, __pyx_k_exchange_address, sizeof(__pyx_k_exchange_address), 0, 0, 1, 1},
  {0, __pyx_k_exchange_order_id, sizeof(__pyx_k_exchange_order_id), 0, 0, 1, 1},
  {0, __pyx_k_execute_trade, sizeof(__pyx_k_execute_trade), 0, 0, 1, 1},
  {0, __pyx_k_executed_amount_quote, sizeof(__pyx_k_executed_amount_quote), 0, 0, 1, 1},
  {0, __pyx_k_expirationTimeSeconds, sizeof(__pyx_k_expirationTimeSeconds), 0, 1, 0, 1},
  {0, __pyx_k_expiration_time, sizeof(__pyx_k_expiration_time), 0, 1, 0, 0},
  {0, __pyx_k_expiration_ts, sizeof(__pyx_k_expiration_ts), 0, 1, 0, 1},
  {0, __pyx_k_expires, sizeof(__pyx_k_expires), 0, 0, 1, 1},
  {0, __pyx_k_feeRecipientAddress, sizeof(__pyx_k_feeRecipientAddress), 0, 1, 0, 1},
  {0, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {0, __pyx_k_fill_base_token_amount, sizeof(__pyx_k_fill_base_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_fill_event, sizeof(__pyx_k_fill_event), 0, 0, 1, 1},
  {0, __pyx_k_fill_order, sizeof(__pyx_k_fill_order), 0, 0, 1, 1},
  {0, __pyx_k_filledBaseTokenAmount, sizeof(__pyx_k_filledBaseTokenAmount), 0, 1, 0, 1},
  {0, __pyx_k_filledQuoteTokenAmount, sizeof(__pyx_k_filledQuoteTokenAmount), 0, 1, 0, 1},
  {0, __pyx_k_fills, sizeof(__pyx_k_fills), 0, 1, 0, 1},
  {0, __pyx_k_fix_signature, sizeof(__pyx_k_fix_signature), 0, 0, 1, 1},
  {0, __pyx_k_fixed_signature, sizeof(__pyx_k_fixed_signature), 0, 0, 1, 1},
  {0, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {0, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {0, __pyx_k_for_more_details, sizeof(__pyx_k_for_more_details), 0, 1, 0, 0},
  {0, __pyx_k_format_trading_rules, sizeof(__pyx_k_format_trading_rules), 0, 0, 1, 1},
  {0, __pyx_k_from_json, sizeof(__pyx_k_from_json), 0, 0, 1, 1},
  {0, __pyx_k_gasUsed, sizeof(__pyx_k_gasUsed), 0, 1, 0, 1},
  {0, __pyx_k_gas_used, sizeof(__pyx_k_gas_used), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_generate_order_hash_hex, sizeof(__pyx_k_generate_order_hash_hex), 0, 0, 1, 1},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 1, 0, 1},
  {0, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {0, __pyx_k_getTransactionReceipt, sizeof(__pyx_k_getTransactionReceipt), 0, 0, 1, 1},
  {0, __pyx_k_get_account_orders, sizeof(__pyx_k_get_account_orders), 0, 0, 1, 1},
  {0, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {0, __pyx_k_get_active_order_tracker, sizeof(__pyx_k_get_active_order_tracker), 0, 0, 1, 1},
  {0, __pyx_k_get_all_balances, sizeof(__pyx_k_get_all_balances), 0, 0, 1, 1},
  {0, __pyx_k_get_event_loop, sizeof(__pyx_k_get_event_loop), 0, 0, 1, 1},
  {0, __pyx_k_get_fee, sizeof(__pyx_k_get_fee), 0, 0, 1, 1},
  {0, __pyx_k_get_order_book, sizeof(__pyx_k_get_order_book), 0, 0, 1, 1},
  {0, __pyx_k_get_order_hash_hex, sizeof(__pyx_k_get_order_hash_hex), 0, 0, 1, 1},
  {0, __pyx_k_get_order_updates, sizeof(__pyx_k_get_order_updates), 0, 0, 1, 1},
  {0, __pyx_k_get_orders, sizeof(__pyx_k_get_orders), 0, 0, 1, 1},
  {0, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {0, __pyx_k_get_tracking_nonce, sizeof(__pyx_k_get_tracking_nonce), 0, 0, 1, 1},
  {0, __pyx_k_get_tx_hash_receipt, sizeof(__pyx_k_get_tx_hash_receipt), 0, 0, 1, 1},
  {0, __pyx_k_get_zero_ex_signature, sizeof(__pyx_k_get_zero_ex_signature), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_has_been_cancelled, sizeof(__pyx_k_has_been_cancelled), 0, 0, 1, 1},
  {0, __pyx_k_has_been_hard_cancelled_accordi, sizeof(__pyx_k_has_been_hard_cancelled_accordi), 0, 1, 0, 0},
  {0, __pyx_k_has_been_soft_cancelled_accordi, sizeof(__pyx_k_has_been_soft_cancelled_accordi), 0, 1, 0, 0},
  {0, __pyx_k_has_cancelled_according_to_orde, sizeof(__pyx_k_has_cancelled_according_to_orde), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_orde, sizeof(__pyx_k_has_completed_according_to_orde), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_the, sizeof(__pyx_k_has_completed_according_to_the), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_tran, sizeof(__pyx_k_has_completed_according_to_tran), 0, 1, 0, 0},
  {0, __pyx_k_has_coordinated_order, sizeof(__pyx_k_has_coordinated_order), 0, 0, 1, 1},
  {0, __pyx_k_has_expired_according_to_order, sizeof(__pyx_k_has_expired_according_to_order), 0, 1, 0, 0},
  {0, __pyx_k_has_failed_according_to_order_s, sizeof(__pyx_k_has_failed_according_to_order_s), 0, 1, 0, 0},
  {0, __pyx_k_has_failed_according_to_transact, sizeof(__pyx_k_has_failed_according_to_transact), 0, 1, 0, 0},
  {0, __pyx_k_has_had_it_s_available_amount_r, sizeof(__pyx_k_has_had_it_s_available_amount_r), 0, 1, 0, 0},
  {0, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {0, __pyx_k_hash_index, sizeof(__pyx_k_hash_index), 0, 0, 1, 1},
  {0, __pyx_k_hashes, sizeof(__pyx_k_hashes), 0, 0, 1, 1},
  {0, __pyx_k_have_been_hard_cancelled_accordi, sizeof(__pyx_k_have_been_hard_cancelled_accordi), 0, 1, 0, 0},
  {0, __pyx_k_have_been_soft_cancelled_accordi, sizeof(__pyx_k_have_been_soft_cancelled_accordi), 0, 1, 0, 0},
  {0, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {0, __pyx_k_hexstr, sizeof(__pyx_k_hexstr), 0, 0, 1, 1},
  {0, __pyx_k_http_method, sizeof(__pyx_k_http_method), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot, sizeof(__pyx_k_hummingbot), 0, 1, 0, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba_2, sizeof(__pyx_k_hummingbot_connector_exchange_ba_2), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba_3, sizeof(__pyx_k_hummingbot_connector_exchange_ba_3), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba_4, sizeof(__pyx_k_hummingbot_connector_exchange_ba_4), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba_5, sizeof(__pyx_k_hummingbot_connector_exchange_ba_5), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba_6, sizeof(__pyx_k_hummingbot_connector_exchange_ba_6), 0, 0, 1, 0},
  {0, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_tracking_n, sizeof(__pyx_k_hummingbot_core_utils_tracking_n), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_logger, sizeof(__pyx_k_hummingbot_logger), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_wallet_ethereum_ether, sizeof(__pyx_k_hummingbot_wallet_ethereum_ether), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_wallet_ethereum_web3, sizeof(__pyx_k_hummingbot_wallet_ethereum_web3), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_wallet_ethereum_zero, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_wallet_ethereum_zero_2, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero_2), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_wallet_ethereum_zero_3, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero_3), 0, 0, 1, 1},
  {0, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {0, __pyx_k_id, sizeof(__pyx_k_id), 0, 1, 0, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_in_flight_limit_orders, sizeof(__pyx_k_in_flight_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_in_flight_market_orders, sizeof(__pyx_k_in_flight_market_orders), 0, 0, 1, 1},
  {0, __pyx_k_incomplete_order_ids, sizeof(__pyx_k_incomplete_order_ids), 0, 0, 1, 1},
  {0, __pyx_k_incomplete_orders, sizeof(__pyx_k_incomplete_orders), 0, 0, 1, 1},
  {0, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {0, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {0, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {0, __pyx_k_isCoordinated, sizeof(__pyx_k_isCoordinated), 0, 1, 0, 1},
  {0, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {0, __pyx_k_is_cancelled, sizeof(__pyx_k_is_cancelled), 0, 0, 1, 1},
  {0, __pyx_k_is_coordinated, sizeof(__pyx_k_is_coordinated), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_done, sizeof(__pyx_k_is_done), 0, 0, 1, 1},
  {0, __pyx_k_is_expired, sizeof(__pyx_k_is_expired), 0, 0, 1, 1},
  {0, __pyx_k_is_failure, sizeof(__pyx_k_is_failure), 0, 0, 1, 1},
  {0, __pyx_k_is_finite, sizeof(__pyx_k_is_finite), 0, 0, 1, 1},
  {0, __pyx_k_is_greater_than_requested_amoun, sizeof(__pyx_k_is_greater_than_requested_amoun), 0, 1, 0, 0},
  {0, __pyx_k_is_greater_than_the_maximum_ord, sizeof(__pyx_k_is_greater_than_the_maximum_ord), 0, 1, 0, 0},
  {0, __pyx_k_is_lower_than_the_minimum_order, sizeof(__pyx_k_is_lower_than_the_minimum_order), 0, 1, 0, 0},
  {0, __pyx_k_is_nan, sizeof(__pyx_k_is_nan), 0, 0, 1, 1},
  {0, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
  {0, __pyx_k_is_worse_than_requested_price, sizeof(__pyx_k_is_worse_than_requested_price), 0, 1, 0, 0},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {0, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {0, __pyx_k_jsdict_order_to_struct, sizeof(__pyx_k_jsdict_order_to_struct), 0, 0, 1, 1},
  {0, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {0, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {0, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {0, __pyx_k_kovan_0x, sizeof(__pyx_k_kovan_0x), 0, 1, 0, 0},
  {0, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {0, __pyx_k_latest_salt, sizeof(__pyx_k_latest_salt), 0, 0, 1, 1},
  {0, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 1, 0, 1},
  {0, __pyx_k_list_account_orders, sizeof(__pyx_k_list_account_orders), 0, 0, 1, 1},
  {0, __pyx_k_list_market, sizeof(__pyx_k_list_market), 0, 0, 1, 1},
  {0, __pyx_k_locked_balances, sizeof(__pyx_k_locked_balances), 0, 0, 1, 1},
  {0, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 0, 1, 1},
  {0, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {0, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {0, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_main_0x, sizeof(__pyx_k_main_0x), 0, 1, 0, 0},
  {0, __pyx_k_makerAddress, sizeof(__pyx_k_makerAddress), 0, 1, 0, 1},
  {0, __pyx_k_makerAssetAmount, sizeof(__pyx_k_makerAssetAmount), 0, 1, 0, 1},
  {0, __pyx_k_makerAssetData, sizeof(__pyx_k_makerAssetData), 0, 1, 0, 1},
  {0, __pyx_k_makerFee, sizeof(__pyx_k_makerFee), 0, 1, 0, 1},
  {0, __pyx_k_makerFeeAssetData, sizeof(__pyx_k_makerFeeAssetData), 0, 1, 0, 1},
  {0, __pyx_k_maker_asset_amount, sizeof(__pyx_k_maker_asset_amount), 0, 0, 1, 1},
  {0, __pyx_k_maker_asset_data, sizeof(__pyx_k_maker_asset_data), 0, 0, 1, 1},
  {0, __pyx_k_maker_asset_filled_amount, sizeof(__pyx_k_maker_asset_filled_amount), 0, 0, 1, 1},
  {0, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {0, __pyx_k_market_orders, sizeof(__pyx_k_market_orders), 0, 1, 0, 1},
  {0, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 0, 1, 1},
  {0, __pyx_k_markets_perPage_1000_include_ba, sizeof(__pyx_k_markets_perPage_1000_include_ba), 0, 1, 0, 0},
  {0, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {0, __pyx_k_maxOrderSize, sizeof(__pyx_k_maxOrderSize), 0, 1, 0, 1},
  {0, __pyx_k_max_base_amount_with_decimals, sizeof(__pyx_k_max_base_amount_with_decimals), 0, 0, 1, 1},
  {0, __pyx_k_max_order_size, sizeof(__pyx_k_max_order_size), 0, 0, 1, 1},
  {0, __pyx_k_max_price_significant_digits, sizeof(__pyx_k_max_price_significant_digits), 0, 0, 1, 1},
  {0, __pyx_k_minOrderSize, sizeof(__pyx_k_minOrderSize), 0, 1, 0, 1},
  {0, __pyx_k_min_base_amount_increment, sizeof(__pyx_k_min_base_amount_increment), 0, 0, 1, 1},
  {0, __pyx_k_min_order_size, sizeof(__pyx_k_min_order_size), 0, 0, 1, 1},
  {0, __pyx_k_min_price_increment, sizeof(__pyx_k_min_price_increment), 0, 0, 1, 1},
  {0, __pyx_k_min_quote_amount_increment, sizeof(__pyx_k_min_quote_amount_increment), 0, 0, 1, 1},
  {0, __pyx_k_must_be_greater_than_current_ti, sizeof(__pyx_k_must_be_greater_than_current_ti), 0, 1, 0, 0},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_network, sizeof(__pyx_k_network), 0, 0, 1, 1},
  {0, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {0, __pyx_k_null_address, sizeof(__pyx_k_null_address), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {0, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {0, __pyx_k_of_the_limit_order, sizeof(__pyx_k_of_the_limit_order), 0, 1, 0, 0},
  {0, __pyx_k_oid, sizeof(__pyx_k_oid), 0, 0, 1, 1},
  {0, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {0, __pyx_k_orderHash, sizeof(__pyx_k_orderHash), 0, 1, 0, 1},
  {0, __pyx_k_order_amount, sizeof(__pyx_k_order_amount), 0, 1, 0, 0},
  {0, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {0, __pyx_k_order_books_initialized, sizeof(__pyx_k_order_books_initialized), 0, 1, 0, 1},
  {0, __pyx_k_order_filled_base_token_amount, sizeof(__pyx_k_order_filled_base_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_order_filled_quote_token_amount, sizeof(__pyx_k_order_filled_quote_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_order_hash, sizeof(__pyx_k_order_hash), 0, 0, 1, 1},
  {0, __pyx_k_order_hash_hex, sizeof(__pyx_k_order_hash_hex), 0, 0, 1, 1},
  {0, __pyx_k_order_hashes, sizeof(__pyx_k_order_hashes), 0, 0, 1, 1},
  {0, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {0, __pyx_k_order_ids, sizeof(__pyx_k_order_ids), 0, 0, 1, 1},
  {0, __pyx_k_order_price, sizeof(__pyx_k_order_price), 0, 0, 1, 1},
  {0, __pyx_k_order_remaining_base_token_amoun, sizeof(__pyx_k_order_remaining_base_token_amoun), 0, 0, 1, 1},
  {0, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {0, __pyx_k_order_state, sizeof(__pyx_k_order_state), 0, 0, 1, 1},
  {0, __pyx_k_order_struct, sizeof(__pyx_k_order_struct), 0, 0, 1, 1},
  {0, __pyx_k_order_timestamp_diff, sizeof(__pyx_k_order_timestamp_diff), 0, 0, 1, 1},
  {0, __pyx_k_order_to_Bamboo_Relay_Check_Eth, sizeof(__pyx_k_order_to_Bamboo_Relay_Check_Eth), 0, 1, 0, 0},
  {0, __pyx_k_order_to_Bamboo_Relay_for, sizeof(__pyx_k_order_to_Bamboo_Relay_for), 0, 1, 0, 0},
  {0, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {0, __pyx_k_order_update, sizeof(__pyx_k_order_update), 0, 0, 1, 1},
  {0, __pyx_k_order_updates, sizeof(__pyx_k_order_updates), 0, 0, 1, 1},
  {0, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 1, 0, 0},
  {0, __pyx_k_orders_2, sizeof(__pyx_k_orders_2), 0, 0, 1, 1},
  {0, __pyx_k_orders_hashes, sizeof(__pyx_k_orders_hashes), 0, 1, 0, 0},
  {0, __pyx_k_out_of, sizeof(__pyx_k_out_of), 0, 1, 0, 0},
  {0, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {0, __pyx_k_pair_split, sizeof(__pyx_k_pair_split), 0, 0, 1, 1},
  {0, __pyx_k_poll_interval, sizeof(__pyx_k_poll_interval), 0, 0, 1, 1},
  {0, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {0, __pyx_k_post, sizeof(__pyx_k_post), 0, 1, 0, 1},
  {0, __pyx_k_pre_emptive_soft_cancels, sizeof(__pyx_k_pre_emptive_soft_cancels), 0, 0, 1, 1},
  {0, __pyx_k_previous_amount_available, sizeof(__pyx_k_previous_amount_available), 0, 0, 1, 1},
  {0, __pyx_k_previous_is_cancelled, sizeof(__pyx_k_previous_is_cancelled), 0, 0, 1, 1},
  {0, __pyx_k_previous_is_done, sizeof(__pyx_k_previous_is_done), 0, 0, 1, 1},
  {0, __pyx_k_previous_is_expired, sizeof(__pyx_k_previous_is_expired), 0, 0, 1, 1},
  {0, __pyx_k_previous_is_failure, sizeof(__pyx_k_previous_is_failure), 0, 0, 1, 1},
  {0, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {0, __pyx_k_protocol_fee, sizeof(__pyx_k_protocol_fee), 0, 0, 1, 1},
  {0, __pyx_k_protocol_fee_amount, sizeof(__pyx_k_protocol_fee_amount), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_q_amt, sizeof(__pyx_k_q_amt), 0, 0, 1, 1},
  {0, __pyx_k_q_price, sizeof(__pyx_k_q_price), 0, 0, 1, 1},
  {0, __pyx_k_quoteIncrement, sizeof(__pyx_k_quoteIncrement), 0, 1, 0, 1},
  {0, __pyx_k_quoteTokenDecimals, sizeof(__pyx_k_quoteTokenDecimals), 0, 1, 0, 1},
  {0, __pyx_k_quote_amount, sizeof(__pyx_k_quote_amount), 0, 0, 1, 1},
  {0, __pyx_k_quote_amount_with_decimals, sizeof(__pyx_k_quote_amount_with_decimals), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset_decimals, sizeof(__pyx_k_quote_asset_decimals), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset_increment, sizeof(__pyx_k_quote_asset_increment), 0, 0, 1, 1},
  {0, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {0, __pyx_k_quote_token_asset_data, sizeof(__pyx_k_quote_token_asset_data), 0, 0, 1, 1},
  {0, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {0, __pyx_k_receipt, sizeof(__pyx_k_receipt), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_remainingBaseTokenAmount, sizeof(__pyx_k_remainingBaseTokenAmount), 0, 1, 0, 1},
  {0, __pyx_k_remainingQuoteTokenAmount, sizeof(__pyx_k_remainingQuoteTokenAmount), 0, 1, 0, 1},
  {0, __pyx_k_remaining_base_token_amount, sizeof(__pyx_k_remaining_base_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_remaining_quote_token_amount, sizeof(__pyx_k_remaining_quote_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {0, __pyx_k_remove_0x_prefix, sizeof(__pyx_k_remove_0x_prefix), 0, 0, 1, 1},
  {0, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {0, __pyx_k_reset_state, sizeof(__pyx_k_reset_state), 0, 0, 1, 1},
  {0, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
  {0, __pyx_k_response_data, sizeof(__pyx_k_response_data), 0, 0, 1, 1},
  {0, __pyx_k_response_json, sizeof(__pyx_k_response_json), 0, 0, 1, 1},
  {0, __pyx_k_response_text, sizeof(__pyx_k_response_text), 0, 0, 1, 1},
  {0, __pyx_k_restore_tracking_states, sizeof(__pyx_k_restore_tracking_states), 0, 0, 1, 1},
  {0, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {0, __pyx_k_retval, sizeof(__pyx_k_retval), 0, 0, 1, 1},
  {0, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {0, __pyx_k_rinkeby_0x, sizeof(__pyx_k_rinkeby_0x), 0, 1, 0, 0},
  {0, __pyx_k_ropsten_0x, sizeof(__pyx_k_ropsten_0x), 0, 1, 0, 0},
  {0, __pyx_k_rounding, sizeof(__pyx_k_rounding), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_NaN, sizeof(__pyx_k_s_decimal_NaN), 0, 0, 1, 1},
  {0, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {0, __pyx_k_safe_gather, sizeof(__pyx_k_safe_gather), 0, 0, 1, 1},
  {0, __pyx_k_salt, sizeof(__pyx_k_salt), 0, 1, 0, 1},
  {0, __pyx_k_saved_states, sizeof(__pyx_k_saved_states), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {0, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 0},
  {0, __pyx_k_sell_2, sizeof(__pyx_k_sell_2), 0, 0, 1, 1},
  {0, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {0, __pyx_k_senderAddress, sizeof(__pyx_k_senderAddress), 0, 1, 0, 1},
  {0, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_sign_hash, sizeof(__pyx_k_sign_hash), 0, 0, 1, 1},
  {0, __pyx_k_signature, sizeof(__pyx_k_signature), 0, 0, 1, 1},
  {0, __pyx_k_signature, sizeof(__pyx_k_signature), 0, 1, 0, 1},
  {0, __pyx_k_signatures, sizeof(__pyx_k_signatures), 0, 0, 1, 1},
  {0, __pyx_k_signed_limit_order, sizeof(__pyx_k_signed_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_signed_market_order, sizeof(__pyx_k_signed_market_order), 0, 0, 1, 1},
  {0, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {0, __pyx_k_soft_cancel_order, sizeof(__pyx_k_soft_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_soft_cancel_result, sizeof(__pyx_k_soft_cancel_result), 0, 0, 1, 1},
  {0, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_spender, sizeof(__pyx_k_spender), 0, 0, 1, 1},
  {0, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {0, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {0, __pyx_k_state, sizeof(__pyx_k_state), 0, 1, 0, 1},
  {0, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {0, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {0, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {0, __pyx_k_status_polling_loop, sizeof(__pyx_k_status_polling_loop), 0, 0, 1, 1},
  {0, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {0, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {0, __pyx_k_stop_network_2, sizeof(__pyx_k_stop_network_2), 0, 0, 1, 1},
  {0, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_submit_limit_order, sizeof(__pyx_k_submit_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_submit_market_order, sizeof(__pyx_k_submit_market_order), 0, 0, 1, 1},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_takerAddress, sizeof(__pyx_k_takerAddress), 0, 1, 0, 1},
  {0, __pyx_k_takerAssetAmount, sizeof(__pyx_k_takerAssetAmount), 0, 1, 0, 1},
  {0, __pyx_k_takerAssetData, sizeof(__pyx_k_takerAssetData), 0, 1, 0, 1},
  {0, __pyx_k_takerFee, sizeof(__pyx_k_takerFee), 0, 1, 0, 1},
  {0, __pyx_k_takerFeeAssetData, sizeof(__pyx_k_takerFeeAssetData), 0, 1, 0, 1},
  {0, __pyx_k_taker_asset_amount, sizeof(__pyx_k_taker_asset_amount), 0, 0, 1, 1},
  {0, __pyx_k_taker_asset_data, sizeof(__pyx_k_taker_asset_data), 0, 0, 1, 1},
  {0, __pyx_k_taker_asset_fill_amount, sizeof(__pyx_k_taker_asset_fill_amount), 0, 0, 1, 1},
  {0, __pyx_k_taker_asset_fill_amounts, sizeof(__pyx_k_taker_asset_fill_amounts), 0, 0, 1, 1},
  {0, __pyx_k_taker_asset_filled_amount, sizeof(__pyx_k_taker_asset_filled_amount), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_testrpc_0x, sizeof(__pyx_k_testrpc_0x), 0, 1, 0, 0},
  {0, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {0, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {0, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {0, __pyx_k_timeout_seconds, sizeof(__pyx_k_timeout_seconds), 0, 0, 1, 1},
  {0, __pyx_k_toChecksumAddress, sizeof(__pyx_k_toChecksumAddress), 0, 0, 1, 1},
  {0, __pyx_k_toHex, sizeof(__pyx_k_toHex), 0, 0, 1, 1},
  {0, __pyx_k_to_integral_exact, sizeof(__pyx_k_to_integral_exact), 0, 0, 1, 1},
  {0, __pyx_k_to_json, sizeof(__pyx_k_to_json), 0, 0, 1, 1},
  {0, __pyx_k_to_limit_order, sizeof(__pyx_k_to_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_token_approval, sizeof(__pyx_k_token_approval), 0, 1, 0, 1},
  {0, __pyx_k_tokens, sizeof(__pyx_k_tokens), 0, 1, 0, 0},
  {0, __pyx_k_tokens_2, sizeof(__pyx_k_tokens_2), 0, 0, 1, 1},
  {0, __pyx_k_total_balances, sizeof(__pyx_k_total_balances), 0, 0, 1, 1},
  {0, __pyx_k_total_base_token_amount, sizeof(__pyx_k_total_base_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_total_quote_token_amount, sizeof(__pyx_k_total_quote_token_amount), 0, 0, 1, 1},
  {0, __pyx_k_tracked_limit_order, sizeof(__pyx_k_tracked_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_tracked_limit_orders, sizeof(__pyx_k_tracked_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_tracked_market_order, sizeof(__pyx_k_tracked_market_order), 0, 0, 1, 1},
  {0, __pyx_k_tracked_market_orders, sizeof(__pyx_k_tracked_market_orders), 0, 0, 1, 1},
  {0, __pyx_k_tracked_order, sizeof(__pyx_k_tracked_order), 0, 0, 1, 1},
  {0, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {0, __pyx_k_trade_type_desc, sizeof(__pyx_k_trade_type_desc), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair_rules, sizeof(__pyx_k_trading_pair_rules), 0, 0, 1, 1},
  {0, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {0, __pyx_k_trading_required, sizeof(__pyx_k_trading_required), 0, 0, 1, 1},
  {0, __pyx_k_trading_rule, sizeof(__pyx_k_trading_rule), 0, 0, 1, 1},
  {0, __pyx_k_trading_rule_initialized, sizeof(__pyx_k_trading_rule_initialized), 0, 1, 0, 1},
  {0, __pyx_k_trading_rules, sizeof(__pyx_k_trading_rules), 0, 0, 1, 1},
  {0, __pyx_k_trading_rules_list, sizeof(__pyx_k_trading_rules_list), 0, 0, 1, 1},
  {0, __pyx_k_transactionHash, sizeof(__pyx_k_transactionHash), 0, 1, 0, 1},
  {0, __pyx_k_tx_hash, sizeof(__pyx_k_tx_hash), 0, 0, 1, 1},
  {0, __pyx_k_tx_hash_receipt, sizeof(__pyx_k_tx_hash_receipt), 0, 0, 1, 1},
  {0, __pyx_k_tx_hashes, sizeof(__pyx_k_tx_hashes), 0, 0, 1, 1},
  {0, __pyx_k_type_str, sizeof(__pyx_k_type_str), 0, 0, 1, 1},
  {0, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {0, __pyx_k_unsigned_limit_order, sizeof(__pyx_k_unsigned_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_unsigned_order, sizeof(__pyx_k_unsigned_order), 0, 0, 1, 1},
  {0, __pyx_k_unwatch_order_hash, sizeof(__pyx_k_unwatch_order_hash), 0, 0, 1, 1},
  {0, __pyx_k_unwrap_eth, sizeof(__pyx_k_unwrap_eth), 0, 0, 1, 1},
  {0, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, __pyx_k_update_available_balances, sizeof(__pyx_k_update_available_balances), 0, 0, 1, 1},
  {0, __pyx_k_update_balances, sizeof(__pyx_k_update_balances), 0, 0, 1, 1},
  {0, __pyx_k_update_limit_order_status, sizeof(__pyx_k_update_limit_order_status), 0, 0, 1, 1},
  {0, __pyx_k_update_market_order_status, sizeof(__pyx_k_update_market_order_status), 0, 0, 1, 1},
  {0, __pyx_k_update_single_limit_order, sizeof(__pyx_k_update_single_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_update_trading_rules, sizeof(__pyx_k_update_trading_rules), 0, 0, 1, 1},
  {0, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {0, __pyx_k_use_coordinator, sizeof(__pyx_k_use_coordinator), 0, 0, 1, 1},
  {0, __pyx_k_valid_orders, sizeof(__pyx_k_valid_orders), 0, 0, 1, 1},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {0, __pyx_k_wallet, sizeof(__pyx_k_wallet), 0, 0, 1, 1},
  {0, __pyx_k_watch_order_hash, sizeof(__pyx_k_watch_order_hash), 0, 0, 1, 1},
  {0, __pyx_k_web3, sizeof(__pyx_k_web3), 0, 0, 1, 1},
  {0, __pyx_k_web3_exceptions, sizeof(__pyx_k_web3_exceptions), 0, 0, 1, 1},
  {0, __pyx_k_will_be_pre_emptively_soft_canc, sizeof(__pyx_k_will_be_pre_emptively_soft_canc), 0, 1, 0, 0},
  {0, __pyx_k_wrap_eth, sizeof(__pyx_k_wrap_eth), 0, 0, 1, 1},
  {0, __pyx_k_zeroExOrder, sizeof(__pyx_k_zeroExOrder), 0, 1, 0, 1},
  {0, __pyx_k_zero_ex_order, sizeof(__pyx_k_zero_ex_order), 0, 0, 1, 1},
  {0, __pyx_k_zeroex_fill_watcher, sizeof(__pyx_k_zeroex_fill_watcher), 0, 0, 1, 1},
  {0, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {&__pyx_kp_u_0x, __pyx_k_0x, sizeof(__pyx_k_0x), 0, 1, 0, 0},
  {&__pyx_kp_u_0x000000000000000000000000000000, __pyx_k_0x000000000000000000000000000000, sizeof(__pyx_k_0x000000000000000000000000000000), 0, 1, 0, 0},
  {&__pyx_kp_u_0xf47261b00000000000000000000000, __pyx_k_0xf47261b00000000000000000000000, sizeof(__pyx_k_0xf47261b00000000000000000000000), 0, 1, 0, 0},
  {&__pyx_kp_u_1e, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {&__pyx_kp_u_1e_2, __pyx_k_1e_2, sizeof(__pyx_k_1e_2), 0, 1, 0, 0},
  {&__pyx_n_s_API_CALL_TIMEOUT, __pyx_k_API_CALL_TIMEOUT, sizeof(__pyx_k_API_CALL_TIMEOUT), 0, 0, 1, 1},
  {&__pyx_kp_u_API_returned_incorrect_values_fo, __pyx_k_API_returned_incorrect_values_fo, sizeof(__pyx_k_API_returned_incorrect_values_fo), 0, 1, 0, 0},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT, __pyx_k_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT, sizeof(__pyx_k_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE, __pyx_k_BAMBOO_RELAY_MAINNET_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_MAINNET_FEE_RECIPIE), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT, __pyx_k_BAMBOO_RELAY_REST_ENDPOINT, sizeof(__pyx_k_BAMBOO_RELAY_REST_ENDPOINT), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE, __pyx_k_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE, __pyx_k_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE, sizeof(__pyx_k_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT, __pyx_k_BAMBOO_RELAY_TEST_ENDPOINT, sizeof(__pyx_k_BAMBOO_RELAY_TEST_ENDPOINT), 0, 0, 1, 1},
  {&__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT, __pyx_k_BAMBOO_RELAY_TEST_FEE_RECIPIENT, sizeof(__pyx_k_BAMBOO_RELAY_TEST_FEE_RECIPIENT), 0, 0, 1, 1},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayAPIOrderBookDataSourc, __pyx_k_BambooRelayAPIOrderBookDataSourc, sizeof(__pyx_k_BambooRelayAPIOrderBookDataSourc), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange, __pyx_k_BambooRelayExchange, sizeof(__pyx_k_BambooRelayExchange), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange___reduce_cyt, __pyx_k_BambooRelayExchange___reduce_cyt, sizeof(__pyx_k_BambooRelayExchange___reduce_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange___setstate_c, __pyx_k_BambooRelayExchange___setstate_c, sizeof(__pyx_k_BambooRelayExchange___setstate_c), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__api_request, __pyx_k_BambooRelayExchange__api_request, sizeof(__pyx_k_BambooRelayExchange__api_request), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__approval_tx, __pyx_k_BambooRelayExchange__approval_tx, sizeof(__pyx_k_BambooRelayExchange__approval_tx), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__format_trad, __pyx_k_BambooRelayExchange__format_trad, sizeof(__pyx_k_BambooRelayExchange__format_trad), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__get_order_u, __pyx_k_BambooRelayExchange__get_order_u, sizeof(__pyx_k_BambooRelayExchange__get_order_u), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__status_poll, __pyx_k_BambooRelayExchange__status_poll, sizeof(__pyx_k_BambooRelayExchange__status_poll), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__stop_networ, __pyx_k_BambooRelayExchange__stop_networ, sizeof(__pyx_k_BambooRelayExchange__stop_networ), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_avai, __pyx_k_BambooRelayExchange__update_avai, sizeof(__pyx_k_BambooRelayExchange__update_avai), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_bala, __pyx_k_BambooRelayExchange__update_bala, sizeof(__pyx_k_BambooRelayExchange__update_bala), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_limi, __pyx_k_BambooRelayExchange__update_limi, sizeof(__pyx_k_BambooRelayExchange__update_limi), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_mark, __pyx_k_BambooRelayExchange__update_mark, sizeof(__pyx_k_BambooRelayExchange__update_mark), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_sing, __pyx_k_BambooRelayExchange__update_sing, sizeof(__pyx_k_BambooRelayExchange__update_sing), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange__update_trad, __pyx_k_BambooRelayExchange__update_trad, sizeof(__pyx_k_BambooRelayExchange__update_trad), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_buy, __pyx_k_BambooRelayExchange_buy, sizeof(__pyx_k_BambooRelayExchange_buy), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_cancel, __pyx_k_BambooRelayExchange_cancel, sizeof(__pyx_k_BambooRelayExchange_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_cancel_all, __pyx_k_BambooRelayExchange_cancel_all, sizeof(__pyx_k_BambooRelayExchange_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_cancel_order, __pyx_k_BambooRelayExchange_cancel_order, sizeof(__pyx_k_BambooRelayExchange_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_check_networ, __pyx_k_BambooRelayExchange_check_networ, sizeof(__pyx_k_BambooRelayExchange_check_networ), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_execute_trad, __pyx_k_BambooRelayExchange_execute_trad, sizeof(__pyx_k_BambooRelayExchange_execute_trad), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_account, __pyx_k_BambooRelayExchange_get_account, sizeof(__pyx_k_BambooRelayExchange_get_account), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_active_e, __pyx_k_BambooRelayExchange_get_active_e, sizeof(__pyx_k_BambooRelayExchange_get_active_e), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_fee, __pyx_k_BambooRelayExchange_get_fee, sizeof(__pyx_k_BambooRelayExchange_get_fee), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_order_bo, __pyx_k_BambooRelayExchange_get_order_bo, sizeof(__pyx_k_BambooRelayExchange_get_order_bo), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_order_ha, __pyx_k_BambooRelayExchange_get_order_ha, sizeof(__pyx_k_BambooRelayExchange_get_order_ha), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_orders, __pyx_k_BambooRelayExchange_get_orders, sizeof(__pyx_k_BambooRelayExchange_get_orders), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_price, __pyx_k_BambooRelayExchange_get_price, sizeof(__pyx_k_BambooRelayExchange_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_tx_hash, __pyx_k_BambooRelayExchange_get_tx_hash, sizeof(__pyx_k_BambooRelayExchange_get_tx_hash), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_get_zero_ex, __pyx_k_BambooRelayExchange_get_zero_ex, sizeof(__pyx_k_BambooRelayExchange_get_zero_ex), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_list_account, __pyx_k_BambooRelayExchange_list_account, sizeof(__pyx_k_BambooRelayExchange_list_account), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_list_market, __pyx_k_BambooRelayExchange_list_market, sizeof(__pyx_k_BambooRelayExchange_list_market), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_logger, __pyx_k_BambooRelayExchange_logger, sizeof(__pyx_k_BambooRelayExchange_logger), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_reset_state, __pyx_k_BambooRelayExchange_reset_state, sizeof(__pyx_k_BambooRelayExchange_reset_state), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_restore_trac, __pyx_k_BambooRelayExchange_restore_trac, sizeof(__pyx_k_BambooRelayExchange_restore_trac), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_sell, __pyx_k_BambooRelayExchange_sell, sizeof(__pyx_k_BambooRelayExchange_sell), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_start_networ, __pyx_k_BambooRelayExchange_start_networ, sizeof(__pyx_k_BambooRelayExchange_start_networ), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_stop_network, __pyx_k_BambooRelayExchange_stop_network, sizeof(__pyx_k_BambooRelayExchange_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_submit_limit, __pyx_k_BambooRelayExchange_submit_limit, sizeof(__pyx_k_BambooRelayExchange_submit_limit), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_submit_marke, __pyx_k_BambooRelayExchange_submit_marke, sizeof(__pyx_k_BambooRelayExchange_submit_marke), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_unwrap_eth, __pyx_k_BambooRelayExchange_unwrap_eth, sizeof(__pyx_k_BambooRelayExchange_unwrap_eth), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayExchange_wrap_eth, __pyx_k_BambooRelayExchange_wrap_eth, sizeof(__pyx_k_BambooRelayExchange_wrap_eth), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayOrderBookTracker, __pyx_k_BambooRelayOrderBookTracker, sizeof(__pyx_k_BambooRelayOrderBookTracker), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayTransactionTracker, __pyx_k_BambooRelayTransactionTracker, sizeof(__pyx_k_BambooRelayTransactionTracker), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayTransactionTracker_2, __pyx_k_BambooRelayTransactionTracker_2, sizeof(__pyx_k_BambooRelayTransactionTracker_2), 0, 0, 1, 1},
  {&__pyx_n_s_BambooRelayTransactionTracker_3, __pyx_k_BambooRelayTransactionTracker_3, sizeof(__pyx_k_BambooRelayTransactionTracker_3), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompleted, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedEvent, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreated, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedEvent, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_n_u_CANCELED, __pyx_k_CANCELED, sizeof(__pyx_k_CANCELED), 0, 1, 0, 1},
  {&__pyx_n_s_CANCEL_EXPIRY_TIME, __pyx_k_CANCEL_EXPIRY_TIME, sizeof(__pyx_k_CANCEL_EXPIRY_TIME), 0, 0, 1, 1},
  {&__pyx_n_u_COMPLETED, __pyx_k_COMPLETED, sizeof(__pyx_k_COMPLETED), 0, 1, 0, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s_CancellationResult, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {&__pyx_n_s_CancelledError, __pyx_k_CancelledError, sizeof(__pyx_k_CancelledError), 0, 0, 1, 1},
  {&__pyx_kp_u_Check_transaction_hash, __pyx_k_Check_transaction_hash, sizeof(__pyx_k_Check_transaction_hash), 0, 1, 0, 0},
  {&__pyx_n_s_ClientSession, __pyx_k_ClientSession, sizeof(__pyx_k_ClientSession), 0, 0, 1, 1},
  {&__pyx_kp_u_Could_not_get_token_approval_sta, __pyx_k_Could_not_get_token_approval_sta, sizeof(__pyx_k_Could_not_get_token_approval_sta), 0, 1, 0, 0},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_kp_s_Dict_str_Any, __pyx_k_Dict_str_Any, sizeof(__pyx_k_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_Dict_str_Dict_str_Any, __pyx_k_Dict_str_Dict_str_Any, sizeof(__pyx_k_Dict_str_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_Dict_str_any, __pyx_k_Dict_str_any, sizeof(__pyx_k_Dict_str_any), 0, 0, 1, 0},
  {&__pyx_n_u_ETH, __pyx_k_ETH, sizeof(__pyx_k_ETH), 0, 1, 0, 1},
  {&__pyx_kp_u_Error_fetching_data_from, __pyx_k_Error_fetching_data_from, sizeof(__pyx_k_Error_fetching_data_from), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_parsing_the_trading_pair, __pyx_k_Error_parsing_the_trading_pair, sizeof(__pyx_k_Error_parsing_the_trading_pair), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_restoring_tracking_states, __pyx_k_Error_restoring_tracking_states, sizeof(__pyx_k_Error_restoring_tracking_states), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_submitting, __pyx_k_Error_submitting, sizeof(__pyx_k_Error_submitting), 0, 1, 0, 0},
  {&__pyx_n_s_EthereumChain, __pyx_k_EthereumChain, sizeof(__pyx_k_EthereumChain), 0, 0, 1, 1},
  {&__pyx_n_s_Event, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_n_u_FILLED, __pyx_k_FILLED, sizeof(__pyx_k_FILLED), 0, 1, 0, 1},
  {&__pyx_kp_u_Failed_to_cancel_order, __pyx_k_Failed_to_cancel_order, sizeof(__pyx_k_Failed_to_cancel_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_cancel_order_on_Bamboo, __pyx_k_Failed_to_cancel_order_on_Bamboo, sizeof(__pyx_k_Failed_to_cancel_order_on_Bamboo), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_cancel_orders_on_Bambo, __pyx_k_Failed_to_cancel_orders_on_Bambo, sizeof(__pyx_k_Failed_to_cancel_orders_on_Bambo), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2, __pyx_k_Failed_to_cancel_orders_on_Bambo_2, sizeof(__pyx_k_Failed_to_cancel_orders_on_Bambo_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_fetch_account_updates, __pyx_k_Failed_to_fetch_account_updates, sizeof(__pyx_k_Failed_to_fetch_account_updates), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_submit, __pyx_k_Failed_to_submit, sizeof(__pyx_k_Failed_to_submit), 0, 1, 0, 0},
  {&__pyx_kp_u_Filled, __pyx_k_Filled, sizeof(__pyx_k_Filled), 0, 1, 0, 0},
  {&__pyx_n_u_GET, __pyx_k_GET, sizeof(__pyx_k_GET), 0, 1, 0, 1},
  {&__pyx_n_s_HTTPProvider, __pyx_k_HTTPProvider, sizeof(__pyx_k_HTTPProvider), 0, 0, 1, 1},
  {&__pyx_kp_u_HTTP_status_is, __pyx_k_HTTP_status_is, sizeof(__pyx_k_HTTP_status_is), 0, 1, 0, 0},
  {&__pyx_n_s_HummingbotLogger, __pyx_k_HummingbotLogger, sizeof(__pyx_k_HummingbotLogger), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Incorrect_values_for_market_orde, __pyx_k_Incorrect_values_for_market_orde, sizeof(__pyx_k_Incorrect_values_for_market_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_trade_type_Aborting, __pyx_k_Invalid_trade_type_Aborting, sizeof(__pyx_k_Invalid_trade_type_Aborting), 0, 1, 0, 0},
  {&__pyx_n_s_KOVAN, __pyx_k_KOVAN, sizeof(__pyx_k_KOVAN), 0, 0, 1, 1},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_kp_u_Limit_orders_require_a_price_Abo, __pyx_k_Limit_orders_require_a_price_Abo, sizeof(__pyx_k_Limit_orders_require_a_price_Abo), 0, 1, 0, 0},
  {&__pyx_kp_u_Limit_orders_require_an_expirati, __pyx_k_Limit_orders_require_an_expirati, sizeof(__pyx_k_Limit_orders_require_an_expirati), 0, 1, 0, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_BambooRelayInFlightOrder, __pyx_k_List_BambooRelayInFlightOrder, sizeof(__pyx_k_List_BambooRelayInFlightOrder), 0, 0, 1, 0},
  {&__pyx_kp_s_List_CancellationResult, __pyx_k_List_CancellationResult, sizeof(__pyx_k_List_CancellationResult), 0, 0, 1, 0},
  {&__pyx_kp_s_List_Dict_str_Any, __pyx_k_List_Dict_str_Any, sizeof(__pyx_k_List_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_List_TradingRule, __pyx_k_List_TradingRule, sizeof(__pyx_k_List_TradingRule), 0, 0, 1, 0},
  {&__pyx_kp_s_List_str, __pyx_k_List_str, sizeof(__pyx_k_List_str), 0, 0, 1, 0},
  {&__pyx_n_s_MAIN_NET, __pyx_k_MAIN_NET, sizeof(__pyx_k_MAIN_NET), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT, __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T, sizeof(__pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG, __pyx_k_MARKET_ORDER_EXPIRED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_EXPIRED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG, __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG, __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG, sizeof(__pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN, __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN, sizeof(__pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_MARKET_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MarketEvent, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketOrderFailureEvent, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_CONNECTED, __pyx_k_NOT_CONNECTED, sizeof(__pyx_k_NOT_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_u_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_order_book_exists_for, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {&__pyx_kp_u_No_valid_orders_found_for_amount, __pyx_k_No_valid_orders_found_for_amount, sizeof(__pyx_k_No_valid_orders_found_for_amount), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_ORDER_CREATION_BACKOFF_TIME, __pyx_k_ORDER_CREATION_BACKOFF_TIME, sizeof(__pyx_k_ORDER_CREATION_BACKOFF_TIME), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_EXPIRY_TIME, __pyx_k_ORDER_EXPIRY_TIME, sizeof(__pyx_k_ORDER_EXPIRY_TIME), 0, 0, 1, 1},
  {&__pyx_n_s_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {&__pyx_kp_s_Optional_Dict_str_Any, __pyx_k_Optional_Dict_str_Any, sizeof(__pyx_k_Optional_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_Optional_Dict_str_str, __pyx_k_Optional_Dict_str_str, sizeof(__pyx_k_Optional_Dict_str_str), 0, 0, 1, 0},
  {&__pyx_n_s_Order, __pyx_k_Order, sizeof(__pyx_k_Order), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBook, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelled, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledEvent, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpired, __pyx_k_OrderExpired, sizeof(__pyx_k_OrderExpired), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpiredEvent, __pyx_k_OrderExpiredEvent, sizeof(__pyx_k_OrderExpiredEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailure, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilled, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledEvent, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_kp_u_Order_not_found_in_tracked_orde, __pyx_k_Order_not_found_in_tracked_orde, sizeof(__pyx_k_Order_not_found_in_tracked_orde), 0, 1, 0, 0},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME, __pyx_k_PRE_EMPTIVE_SOFT_CANCEL_TIME, sizeof(__pyx_k_PRE_EMPTIVE_SOFT_CANCEL_TIME), 0, 0, 1, 1},
  {&__pyx_n_s_RINKEBY, __pyx_k_RINKEBY, sizeof(__pyx_k_RINKEBY), 0, 0, 1, 1},
  {&__pyx_n_s_ROPSTEN, __pyx_k_ROPSTEN, sizeof(__pyx_k_ROPSTEN), 0, 0, 1, 1},
  {&__pyx_n_s_ROUND_FLOOR, __pyx_k_ROUND_FLOOR, sizeof(__pyx_k_ROUND_FLOOR), 0, 0, 1, 1},
  {&__pyx_n_s_ReceivedAsset, __pyx_k_ReceivedAsset, sizeof(__pyx_k_ReceivedAsset), 0, 0, 1, 1},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompleted, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedEvent, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreated, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedEvent, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_kp_u_Server_Error_Bad_Gateway, __pyx_k_Server_Error_Bad_Gateway, sizeof(__pyx_k_Server_Error_Bad_Gateway), 0, 1, 0, 0},
  {&__pyx_kp_u_Skipping, __pyx_k_Skipping, sizeof(__pyx_k_Skipping), 0, 1, 0, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_kp_u_The_limit_buy_order, __pyx_k_The_limit_buy_order, sizeof(__pyx_k_The_limit_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_limit_order, __pyx_k_The_limit_order, sizeof(__pyx_k_The_limit_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_limit_orders, __pyx_k_The_limit_orders, sizeof(__pyx_k_The_limit_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_The_limit_sell_order, __pyx_k_The_limit_sell_order, sizeof(__pyx_k_The_limit_sell_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_market_buy_order, __pyx_k_The_market_buy_order, sizeof(__pyx_k_The_market_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_market_order, __pyx_k_The_market_order, sizeof(__pyx_k_The_market_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_market_sell_order, __pyx_k_The_market_sell_order, sizeof(__pyx_k_The_market_sell_order), 0, 1, 0, 0},
  {&__pyx_n_s_TradeFee, __pyx_k_TradeFee, sizeof(__pyx_k_TradeFee), 0, 0, 1, 1},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_TransactionNotFound, __pyx_k_TransactionNotFound, sizeof(__pyx_k_TransactionNotFound), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo, __pyx_k_Tuple_Decimal_Decimal_str_int_bo, sizeof(__pyx_k_Tuple_Decimal_Decimal_str_int_bo), 0, 0, 1, 0},
  {&__pyx_kp_s_Tuple_str_ZeroExOrder, __pyx_k_Tuple_str_ZeroExOrder, sizeof(__pyx_k_Tuple_str_ZeroExOrder), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL, __pyx_k_UPDATE_MARKET_ORDERS_INTERVAL, sizeof(__pyx_k_UPDATE_MARKET_ORDERS_INTERVAL), 0, 0, 1, 1},
  {&__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA, __pyx_k_UPDATE_OPEN_LIMIT_ORDERS_INTERVA, sizeof(__pyx_k_UPDATE_OPEN_LIMIT_ORDERS_INTERVA), 0, 0, 1, 1},
  {&__pyx_n_s_UPDATE_RULES_INTERVAL, __pyx_k_UPDATE_RULES_INTERVAL, sizeof(__pyx_k_UPDATE_RULES_INTERVAL), 0, 0, 1, 1},
  {&__pyx_kp_u_Unexpected_error_cancelling_orde, __pyx_k_Unexpected_error_cancelling_orde, sizeof(__pyx_k_Unexpected_error_cancelling_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_cancelling_orde_2, __pyx_k_Unexpected_error_cancelling_orde_2, sizeof(__pyx_k_Unexpected_error_cancelling_orde_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_while_fetching, __pyx_k_Unexpected_error_while_fetching, sizeof(__pyx_k_Unexpected_error_while_fetching), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_while_fetching_2, __pyx_k_Unexpected_error_while_fetching_2, sizeof(__pyx_k_Unexpected_error_while_fetching_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Unrecognized_transaction_status, __pyx_k_Unrecognized_transaction_status, sizeof(__pyx_k_Unrecognized_transaction_status), 0, 1, 0, 0},
  {&__pyx_kp_u_User_Agent, __pyx_k_User_Agent, sizeof(__pyx_k_User_Agent), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Web3, __pyx_k_Web3, sizeof(__pyx_k_Web3), 0, 0, 1, 1},
  {&__pyx_n_s_Web3Wallet, __pyx_k_Web3Wallet, sizeof(__pyx_k_Web3Wallet), 0, 0, 1, 1},
  {&__pyx_n_s_ZEROEX_TEST, __pyx_k_ZEROEX_TEST, sizeof(__pyx_k_ZEROEX_TEST), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES, __pyx_k_ZERO_EX_KOVAN_COORDINATOR_ADDRES, sizeof(__pyx_k_ZERO_EX_KOVAN_COORDINATOR_ADDRES), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST, __pyx_k_ZERO_EX_KOVAN_COORDINATOR_REGIST, sizeof(__pyx_k_ZERO_EX_KOVAN_COORDINATOR_REGIST), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY, __pyx_k_ZERO_EX_KOVAN_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_KOVAN_ERC20_PROXY), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS, __pyx_k_ZERO_EX_KOVAN_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_KOVAN_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR, __pyx_k_ZERO_EX_MAINNET_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_MAINNET_COORDINATOR_ADDR), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI, __pyx_k_ZERO_EX_MAINNET_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_MAINNET_COORDINATOR_REGI), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY, __pyx_k_ZERO_EX_MAINNET_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_MAINNET_ERC20_PROXY), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS, __pyx_k_ZERO_EX_MAINNET_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_MAINNET_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR, __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_RINKEBY_COORDINATOR_ADDR), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI, __pyx_k_ZERO_EX_RINKEBY_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_RINKEBY_COORDINATOR_REGI), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY, __pyx_k_ZERO_EX_RINKEBY_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_RINKEBY_ERC20_PROXY), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS, __pyx_k_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR, __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_ADDR, sizeof(__pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_ADDR), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI, __pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_REGI, sizeof(__pyx_k_ZERO_EX_ROPSTEN_COORDINATOR_REGI), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY, __pyx_k_ZERO_EX_ROPSTEN_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_ROPSTEN_ERC20_PROXY), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS, __pyx_k_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS, __pyx_k_ZERO_EX_TEST_COORDINATOR_ADDRESS, sizeof(__pyx_k_ZERO_EX_TEST_COORDINATOR_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR, __pyx_k_ZERO_EX_TEST_COORDINATOR_REGISTR, sizeof(__pyx_k_ZERO_EX_TEST_COORDINATOR_REGISTR), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY, __pyx_k_ZERO_EX_TEST_ERC20_PROXY, sizeof(__pyx_k_ZERO_EX_TEST_ERC20_PROXY), 0, 0, 1, 1},
  {&__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS, __pyx_k_ZERO_EX_TEST_EXCHANGE_ADDRESS, sizeof(__pyx_k_ZERO_EX_TEST_EXCHANGE_ADDRESS), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroExCoordinator, __pyx_k_ZeroExCoordinator, sizeof(__pyx_k_ZeroExCoordinator), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroExExchange, __pyx_k_ZeroExExchange, sizeof(__pyx_k_ZeroExExchange), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroExFillEvent, __pyx_k_ZeroExFillEvent, sizeof(__pyx_k_ZeroExFillEvent), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroExOrder, __pyx_k_ZeroExOrder, sizeof(__pyx_k_ZeroExOrder), 0, 0, 1, 1},
  {&__pyx_n_s__125, __pyx_k__125, sizeof(__pyx_k__125), 0, 0, 1, 1},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__41, __pyx_k__41, sizeof(__pyx_k__41), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_n_s__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 1},
  {&__pyx_kp_u_according_to_order_status_API, __pyx_k_according_to_order_status_API, sizeof(__pyx_k_according_to_order_status_API), 0, 1, 0, 0},
  {&__pyx_kp_u_according_to_the_RPC_transactio, __pyx_k_according_to_the_RPC_transactio, sizeof(__pyx_k_according_to_the_RPC_transactio), 0, 1, 0, 0},
  {&__pyx_n_u_account_available_balance, __pyx_k_account_available_balance, sizeof(__pyx_k_account_available_balance), 0, 1, 0, 1},
  {&__pyx_n_u_account_balance, __pyx_k_account_balance, sizeof(__pyx_k_account_balance), 0, 1, 0, 1},
  {&__pyx_n_s_account_order, __pyx_k_account_order, sizeof(__pyx_k_account_order), 0, 0, 1, 1},
  {&__pyx_n_s_account_orders_list, __pyx_k_account_orders_list, sizeof(__pyx_k_account_orders_list), 0, 0, 1, 1},
  {&__pyx_n_s_account_orders_map, __pyx_k_account_orders_map, sizeof(__pyx_k_account_orders_map), 0, 0, 1, 1},
  {&__pyx_kp_u_accounts, __pyx_k_accounts, sizeof(__pyx_k_accounts), 0, 1, 0, 0},
  {&__pyx_n_s_active_asks, __pyx_k_active_asks, sizeof(__pyx_k_active_asks), 0, 0, 1, 1},
  {&__pyx_n_s_active_bids, __pyx_k_active_bids, sizeof(__pyx_k_active_bids), 0, 0, 1, 1},
  {&__pyx_n_s_address, __pyx_k_address, sizeof(__pyx_k_address), 0, 0, 1, 1},
  {&__pyx_n_s_aenter, __pyx_k_aenter, sizeof(__pyx_k_aenter), 0, 0, 1, 1},
  {&__pyx_n_s_aexit, __pyx_k_aexit, sizeof(__pyx_k_aexit), 0, 0, 1, 1},
  {&__pyx_n_s_aiohttp, __pyx_k_aiohttp, sizeof(__pyx_k_aiohttp), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_amount_to_fill, __pyx_k_amount_to_fill, sizeof(__pyx_k_amount_to_fill), 0, 0, 1, 1},
  {&__pyx_kp_u_and_price, __pyx_k_and_price, sizeof(__pyx_k_and_price), 0, 1, 0, 0},
  {&__pyx_n_s_apiOrder, __pyx_k_apiOrder, sizeof(__pyx_k_apiOrder), 0, 0, 1, 1},
  {&__pyx_n_s_api_request, __pyx_k_api_request, sizeof(__pyx_k_api_request), 0, 0, 1, 1},
  {&__pyx_n_s_app_warning_msg, __pyx_k_app_warning_msg, sizeof(__pyx_k_app_warning_msg), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_approval_tx_polling_loop, __pyx_k_approval_tx_polling_loop, sizeof(__pyx_k_approval_tx_polling_loop), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_async_timeout, __pyx_k_async_timeout, sizeof(__pyx_k_async_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_tasks, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_avg_price, __pyx_k_avg_price, sizeof(__pyx_k_avg_price), 0, 0, 1, 1},
  {&__pyx_n_s_await, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {&__pyx_n_s_balance, __pyx_k_balance, sizeof(__pyx_k_balance), 0, 0, 1, 1},
  {&__pyx_n_u_bamboo_relay, __pyx_k_bamboo_relay, sizeof(__pyx_k_bamboo_relay), 0, 1, 0, 1},
  {&__pyx_n_u_baseTokenDecimals, __pyx_k_baseTokenDecimals, sizeof(__pyx_k_baseTokenDecimals), 0, 1, 0, 1},
  {&__pyx_n_s_base_amount_with_decimals, __pyx_k_base_amount_with_decimals, sizeof(__pyx_k_base_amount_with_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset_decimals, __pyx_k_base_asset_decimals, sizeof(__pyx_k_base_asset_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset_increment, __pyx_k_base_asset_increment, sizeof(__pyx_k_base_asset_increment), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_s_base_token_asset_data, __pyx_k_base_token_asset_data, sizeof(__pyx_k_base_token_asset_data), 0, 0, 1, 1},
  {&__pyx_n_s_batch_fill_orders, __pyx_k_batch_fill_orders, sizeof(__pyx_k_batch_fill_orders), 0, 0, 1, 1},
  {&__pyx_n_s_batch_soft_cancel_orders, __pyx_k_batch_soft_cancel_orders, sizeof(__pyx_k_batch_soft_cancel_orders), 0, 0, 1, 1},
  {&__pyx_n_u_blockNumber, __pyx_k_blockNumber, sizeof(__pyx_k_blockNumber), 0, 1, 0, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_brm_logger, __pyx_k_brm_logger, sizeof(__pyx_k_brm_logger), 0, 0, 1, 1},
  {&__pyx_kp_u_buy, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 0},
  {&__pyx_n_s_buy_2, __pyx_k_buy_2, sizeof(__pyx_k_buy_2), 0, 0, 1, 1},
  {&__pyx_n_s_c_did_timeout_tx, __pyx_k_c_did_timeout_tx, sizeof(__pyx_k_c_did_timeout_tx), 0, 0, 1, 1},
  {&__pyx_n_s_calculated_price, __pyx_k_calculated_price, sizeof(__pyx_k_calculated_price), 0, 0, 1, 1},
  {&__pyx_n_s_cancel, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_all, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_orders_up_to, __pyx_k_cancel_orders_up_to, sizeof(__pyx_k_cancel_orders_up_to), 0, 0, 1, 1},
  {&__pyx_n_s_capitalize, __pyx_k_capitalize, sizeof(__pyx_k_capitalize), 0, 0, 1, 1},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_n_u_chainId, __pyx_k_chainId, sizeof(__pyx_k_chainId), 0, 1, 0, 1},
  {&__pyx_n_s_chain_id, __pyx_k_chain_id, sizeof(__pyx_k_chain_id), 0, 0, 1, 1},
  {&__pyx_n_s_check_and_fix_approval_amounts, __pyx_k_check_and_fix_approval_amounts, sizeof(__pyx_k_check_and_fix_approval_amounts), 0, 0, 1, 1},
  {&__pyx_n_s_check_network, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_client, __pyx_k_client, sizeof(__pyx_k_client), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_kp_u_could_not_be_found_according_to, __pyx_k_could_not_be_found_according_to, sizeof(__pyx_k_could_not_be_found_according_to), 0, 1, 0, 0},
  {&__pyx_n_s_currency, __pyx_k_currency, sizeof(__pyx_k_currency), 0, 0, 1, 1},
  {&__pyx_n_s_current_backend, __pyx_k_current_backend, sizeof(__pyx_k_current_backend), 0, 0, 1, 1},
  {&__pyx_n_s_current_timestamp, __pyx_k_current_timestamp, sizeof(__pyx_k_current_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_erc20_tokens, __pyx_k_erc20_tokens, sizeof(__pyx_k_erc20_tokens), 0, 0, 1, 1},
  {&__pyx_n_s_err_msg, __pyx_k_err_msg, sizeof(__pyx_k_err_msg), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_estimate_fee, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {&__pyx_n_s_eth, __pyx_k_eth, sizeof(__pyx_k_eth), 0, 0, 1, 1},
  {&__pyx_n_s_eth_utils, __pyx_k_eth_utils, sizeof(__pyx_k_eth_utils), 0, 0, 1, 1},
  {&__pyx_n_s_ethereum_rpc_url, __pyx_k_ethereum_rpc_url, sizeof(__pyx_k_ethereum_rpc_url), 0, 0, 1, 1},
  {&__pyx_n_s_ex, __pyx_k_ex, sizeof(__pyx_k_ex), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_u_exchangeAddress, __pyx_k_exchangeAddress, sizeof(__pyx_k_exchangeAddress), 0, 1, 0, 1},
  {&__pyx_n_s_exchange_address, __pyx_k_exchange_address, sizeof(__pyx_k_exchange_address), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_order_id, __pyx_k_exchange_order_id, sizeof(__pyx_k_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_execute_trade, __pyx_k_execute_trade, sizeof(__pyx_k_execute_trade), 0, 0, 1, 1},
  {&__pyx_n_s_executed_amount_quote, __pyx_k_executed_amount_quote, sizeof(__pyx_k_executed_amount_quote), 0, 0, 1, 1},
  {&__pyx_n_u_expirationTimeSeconds, __pyx_k_expirationTimeSeconds, sizeof(__pyx_k_expirationTimeSeconds), 0, 1, 0, 1},
  {&__pyx_kp_u_expiration_time, __pyx_k_expiration_time, sizeof(__pyx_k_expiration_time), 0, 1, 0, 0},
  {&__pyx_n_u_expiration_ts, __pyx_k_expiration_ts, sizeof(__pyx_k_expiration_ts), 0, 1, 0, 1},
  {&__pyx_n_s_expires, __pyx_k_expires, sizeof(__pyx_k_expires), 0, 0, 1, 1},
  {&__pyx_n_u_feeRecipientAddress, __pyx_k_feeRecipientAddress, sizeof(__pyx_k_feeRecipientAddress), 0, 1, 0, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_fill_base_token_amount, __pyx_k_fill_base_token_amount, sizeof(__pyx_k_fill_base_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_fill_event, __pyx_k_fill_event, sizeof(__pyx_k_fill_event), 0, 0, 1, 1},
  {&__pyx_n_s_fill_order, __pyx_k_fill_order, sizeof(__pyx_k_fill_order), 0, 0, 1, 1},
  {&__pyx_n_u_filledBaseTokenAmount, __pyx_k_filledBaseTokenAmount, sizeof(__pyx_k_filledBaseTokenAmount), 0, 1, 0, 1},
  {&__pyx_n_u_filledQuoteTokenAmount, __pyx_k_filledQuoteTokenAmount, sizeof(__pyx_k_filledQuoteTokenAmount), 0, 1, 0, 1},
  {&__pyx_n_u_fills, __pyx_k_fills, sizeof(__pyx_k_fills), 0, 1, 0, 1},
  {&__pyx_n_s_fix_signature, __pyx_k_fix_signature, sizeof(__pyx_k_fix_signature), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_signature, __pyx_k_fixed_signature, sizeof(__pyx_k_fixed_signature), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_kp_u_for_more_details, __pyx_k_for_more_details, sizeof(__pyx_k_for_more_details), 0, 1, 0, 0},
  {&__pyx_n_s_format_trading_rules, __pyx_k_format_trading_rules, sizeof(__pyx_k_format_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_from_json, __pyx_k_from_json, sizeof(__pyx_k_from_json), 0, 0, 1, 1},
  {&__pyx_n_u_gasUsed, __pyx_k_gasUsed, sizeof(__pyx_k_gasUsed), 0, 1, 0, 1},
  {&__pyx_n_s_gas_used, __pyx_k_gas_used, sizeof(__pyx_k_gas_used), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_generate_order_hash_hex, __pyx_k_generate_order_hash_hex, sizeof(__pyx_k_generate_order_hash_hex), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_u_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 1, 0, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_getTransactionReceipt, __pyx_k_getTransactionReceipt, sizeof(__pyx_k_getTransactionReceipt), 0, 0, 1, 1},
  {&__pyx_n_s_get_account_orders, __pyx_k_get_account_orders, sizeof(__pyx_k_get_account_orders), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_exchange_markets, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_order_tracker, __pyx_k_get_active_order_tracker, sizeof(__pyx_k_get_active_order_tracker), 0, 0, 1, 1},
  {&__pyx_n_s_get_all_balances, __pyx_k_get_all_balances, sizeof(__pyx_k_get_all_balances), 0, 0, 1, 1},
  {&__pyx_n_s_get_event_loop, __pyx_k_get_event_loop, sizeof(__pyx_k_get_event_loop), 0, 0, 1, 1},
  {&__pyx_n_s_get_fee, __pyx_k_get_fee, sizeof(__pyx_k_get_fee), 0, 0, 1, 1},
  {&__pyx_n_s_get_order_book, __pyx_k_get_order_book, sizeof(__pyx_k_get_order_book), 0, 0, 1, 1},
  {&__pyx_n_s_get_order_hash_hex, __pyx_k_get_order_hash_hex, sizeof(__pyx_k_get_order_hash_hex), 0, 0, 1, 1},
  {&__pyx_n_s_get_order_updates, __pyx_k_get_order_updates, sizeof(__pyx_k_get_order_updates), 0, 0, 1, 1},
  {&__pyx_n_s_get_orders, __pyx_k_get_orders, sizeof(__pyx_k_get_orders), 0, 0, 1, 1},
  {&__pyx_n_s_get_price, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_tracking_nonce, __pyx_k_get_tracking_nonce, sizeof(__pyx_k_get_tracking_nonce), 0, 0, 1, 1},
  {&__pyx_n_s_get_tx_hash_receipt, __pyx_k_get_tx_hash_receipt, sizeof(__pyx_k_get_tx_hash_receipt), 0, 0, 1, 1},
  {&__pyx_n_s_get_zero_ex_signature, __pyx_k_get_zero_ex_signature, sizeof(__pyx_k_get_zero_ex_signature), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_has_been_cancelled, __pyx_k_has_been_cancelled, sizeof(__pyx_k_has_been_cancelled), 0, 0, 1, 1},
  {&__pyx_kp_u_has_been_hard_cancelled_accordi, __pyx_k_has_been_hard_cancelled_accordi, sizeof(__pyx_k_has_been_hard_cancelled_accordi), 0, 1, 0, 0},
  {&__pyx_kp_u_has_been_soft_cancelled_accordi, __pyx_k_has_been_soft_cancelled_accordi, sizeof(__pyx_k_has_been_soft_cancelled_accordi), 0, 1, 0, 0},
  {&__pyx_kp_u_has_cancelled_according_to_orde, __pyx_k_has_cancelled_according_to_orde, sizeof(__pyx_k_has_cancelled_according_to_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_orde, __pyx_k_has_completed_according_to_orde, sizeof(__pyx_k_has_completed_according_to_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_the, __pyx_k_has_completed_according_to_the, sizeof(__pyx_k_has_completed_according_to_the), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_tran, __pyx_k_has_completed_according_to_tran, sizeof(__pyx_k_has_completed_according_to_tran), 0, 1, 0, 0},
  {&__pyx_n_s_has_coordinated_order, __pyx_k_has_coordinated_order, sizeof(__pyx_k_has_coordinated_order), 0, 0, 1, 1},
  {&__pyx_kp_u_has_expired_according_to_order, __pyx_k_has_expired_according_to_order, sizeof(__pyx_k_has_expired_according_to_order), 0, 1, 0, 0},
  {&__pyx_kp_u_has_failed_according_to_order_s, __pyx_k_has_failed_according_to_order_s, sizeof(__pyx_k_has_failed_according_to_order_s), 0, 1, 0, 0},
  {&__pyx_kp_u_has_failed_according_to_transact, __pyx_k_has_failed_according_to_transact, sizeof(__pyx_k_has_failed_according_to_transact), 0, 1, 0, 0},
  {&__pyx_kp_u_has_had_it_s_available_amount_r, __pyx_k_has_had_it_s_available_amount_r, sizeof(__pyx_k_has_had_it_s_available_amount_r), 0, 1, 0, 0},
  {&__pyx_n_s_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {&__pyx_n_s_hash_index, __pyx_k_hash_index, sizeof(__pyx_k_hash_index), 0, 0, 1, 1},
  {&__pyx_n_s_hashes, __pyx_k_hashes, sizeof(__pyx_k_hashes), 0, 0, 1, 1},
  {&__pyx_kp_u_have_been_hard_cancelled_accordi, __pyx_k_have_been_hard_cancelled_accordi, sizeof(__pyx_k_have_been_hard_cancelled_accordi), 0, 1, 0, 0},
  {&__pyx_kp_u_have_been_soft_cancelled_accordi, __pyx_k_have_been_soft_cancelled_accordi, sizeof(__pyx_k_have_been_soft_cancelled_accordi), 0, 1, 0, 0},
  {&__pyx_n_s_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {&__pyx_n_s_hexstr, __pyx_k_hexstr, sizeof(__pyx_k_hexstr), 0, 0, 1, 1},
  {&__pyx_n_s_http_method, __pyx_k_http_method, sizeof(__pyx_k_http_method), 0, 0, 1, 1},
  {&__pyx_n_u_hummingbot, __pyx_k_hummingbot, sizeof(__pyx_k_hummingbot), 0, 1, 0, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba_2, __pyx_k_hummingbot_connector_exchange_ba_2, sizeof(__pyx_k_hummingbot_connector_exchange_ba_2), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba_3, __pyx_k_hummingbot_connector_exchange_ba_3, sizeof(__pyx_k_hummingbot_connector_exchange_ba_3), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba_4, __pyx_k_hummingbot_connector_exchange_ba_4, sizeof(__pyx_k_hummingbot_connector_exchange_ba_4), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba_5, __pyx_k_hummingbot_connector_exchange_ba_5, sizeof(__pyx_k_hummingbot_connector_exchange_ba_5), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_k_hummingbot_connector_exchange_ba_6, sizeof(__pyx_k_hummingbot_connector_exchange_ba_6), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_async_util, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_k_hummingbot_core_utils_tracking_n, sizeof(__pyx_k_hummingbot_core_utils_tracking_n), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_logger, __pyx_k_hummingbot_logger, sizeof(__pyx_k_hummingbot_logger), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_ether, __pyx_k_hummingbot_wallet_ethereum_ether, sizeof(__pyx_k_hummingbot_wallet_ethereum_ether), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_web3, __pyx_k_hummingbot_wallet_ethereum_web3, sizeof(__pyx_k_hummingbot_wallet_ethereum_web3), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_zero, __pyx_k_hummingbot_wallet_ethereum_zero, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_zero_2, __pyx_k_hummingbot_wallet_ethereum_zero_2, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero_2), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_zero_3, __pyx_k_hummingbot_wallet_ethereum_zero_3, sizeof(__pyx_k_hummingbot_wallet_ethereum_zero_3), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_u_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_flight_limit_orders, __pyx_k_in_flight_limit_orders, sizeof(__pyx_k_in_flight_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_in_flight_market_orders, __pyx_k_in_flight_market_orders, sizeof(__pyx_k_in_flight_market_orders), 0, 0, 1, 1},
  {&__pyx_n_s_incomplete_order_ids, __pyx_k_incomplete_order_ids, sizeof(__pyx_k_incomplete_order_ids), 0, 0, 1, 1},
  {&__pyx_n_s_incomplete_orders, __pyx_k_incomplete_orders, sizeof(__pyx_k_incomplete_orders), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_u_isCoordinated, __pyx_k_isCoordinated, sizeof(__pyx_k_isCoordinated), 0, 1, 0, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_cancelled, __pyx_k_is_cancelled, sizeof(__pyx_k_is_cancelled), 0, 0, 1, 1},
  {&__pyx_n_s_is_coordinated, __pyx_k_is_coordinated, sizeof(__pyx_k_is_coordinated), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_is_done, __pyx_k_is_done, sizeof(__pyx_k_is_done), 0, 0, 1, 1},
  {&__pyx_n_s_is_expired, __pyx_k_is_expired, sizeof(__pyx_k_is_expired), 0, 0, 1, 1},
  {&__pyx_n_s_is_failure, __pyx_k_is_failure, sizeof(__pyx_k_is_failure), 0, 0, 1, 1},
  {&__pyx_n_s_is_finite, __pyx_k_is_finite, sizeof(__pyx_k_is_finite), 0, 0, 1, 1},
  {&__pyx_kp_u_is_greater_than_requested_amoun, __pyx_k_is_greater_than_requested_amoun, sizeof(__pyx_k_is_greater_than_requested_amoun), 0, 1, 0, 0},
  {&__pyx_kp_u_is_greater_than_the_maximum_ord, __pyx_k_is_greater_than_the_maximum_ord, sizeof(__pyx_k_is_greater_than_the_maximum_ord), 0, 1, 0, 0},
  {&__pyx_kp_u_is_lower_than_the_minimum_order, __pyx_k_is_lower_than_the_minimum_order, sizeof(__pyx_k_is_lower_than_the_minimum_order), 0, 1, 0, 0},
  {&__pyx_n_s_is_nan, __pyx_k_is_nan, sizeof(__pyx_k_is_nan), 0, 0, 1, 1},
  {&__pyx_n_s_is_set, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
  {&__pyx_kp_u_is_worse_than_requested_price, __pyx_k_is_worse_than_requested_price, sizeof(__pyx_k_is_worse_than_requested_price), 0, 1, 0, 0},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_jsdict_order_to_struct, __pyx_k_jsdict_order_to_struct, sizeof(__pyx_k_jsdict_order_to_struct), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_kp_u_kovan_0x, __pyx_k_kovan_0x, sizeof(__pyx_k_kovan_0x), 0, 1, 0, 0},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_latest_salt, __pyx_k_latest_salt, sizeof(__pyx_k_latest_salt), 0, 0, 1, 1},
  {&__pyx_n_u_limit_orders, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 1, 0, 1},
  {&__pyx_n_s_list_account_orders, __pyx_k_list_account_orders, sizeof(__pyx_k_list_account_orders), 0, 0, 1, 1},
  {&__pyx_n_s_list_market, __pyx_k_list_market, sizeof(__pyx_k_list_market), 0, 0, 1, 1},
  {&__pyx_n_s_locked_balances, __pyx_k_locked_balances, sizeof(__pyx_k_locked_balances), 0, 0, 1, 1},
  {&__pyx_n_s_log10, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_u_main_0x, __pyx_k_main_0x, sizeof(__pyx_k_main_0x), 0, 1, 0, 0},
  {&__pyx_n_u_makerAddress, __pyx_k_makerAddress, sizeof(__pyx_k_makerAddress), 0, 1, 0, 1},
  {&__pyx_n_u_makerAssetAmount, __pyx_k_makerAssetAmount, sizeof(__pyx_k_makerAssetAmount), 0, 1, 0, 1},
  {&__pyx_n_u_makerAssetData, __pyx_k_makerAssetData, sizeof(__pyx_k_makerAssetData), 0, 1, 0, 1},
  {&__pyx_n_u_makerFee, __pyx_k_makerFee, sizeof(__pyx_k_makerFee), 0, 1, 0, 1},
  {&__pyx_n_u_makerFeeAssetData, __pyx_k_makerFeeAssetData, sizeof(__pyx_k_makerFeeAssetData), 0, 1, 0, 1},
  {&__pyx_n_s_maker_asset_amount, __pyx_k_maker_asset_amount, sizeof(__pyx_k_maker_asset_amount), 0, 0, 1, 1},
  {&__pyx_n_s_maker_asset_data, __pyx_k_maker_asset_data, sizeof(__pyx_k_maker_asset_data), 0, 0, 1, 1},
  {&__pyx_n_s_maker_asset_filled_amount, __pyx_k_maker_asset_filled_amount, sizeof(__pyx_k_maker_asset_filled_amount), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_u_market_orders, __pyx_k_market_orders, sizeof(__pyx_k_market_orders), 0, 1, 0, 1},
  {&__pyx_n_s_markets, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 0, 1, 1},
  {&__pyx_kp_u_markets_perPage_1000_include_ba, __pyx_k_markets_perPage_1000_include_ba, sizeof(__pyx_k_markets_perPage_1000_include_ba), 0, 1, 0, 0},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_u_maxOrderSize, __pyx_k_maxOrderSize, sizeof(__pyx_k_maxOrderSize), 0, 1, 0, 1},
  {&__pyx_n_s_max_base_amount_with_decimals, __pyx_k_max_base_amount_with_decimals, sizeof(__pyx_k_max_base_amount_with_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_max_order_size, __pyx_k_max_order_size, sizeof(__pyx_k_max_order_size), 0, 0, 1, 1},
  {&__pyx_n_s_max_price_significant_digits, __pyx_k_max_price_significant_digits, sizeof(__pyx_k_max_price_significant_digits), 0, 0, 1, 1},
  {&__pyx_n_u_minOrderSize, __pyx_k_minOrderSize, sizeof(__pyx_k_minOrderSize), 0, 1, 0, 1},
  {&__pyx_n_s_min_base_amount_increment, __pyx_k_min_base_amount_increment, sizeof(__pyx_k_min_base_amount_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_order_size, __pyx_k_min_order_size, sizeof(__pyx_k_min_order_size), 0, 0, 1, 1},
  {&__pyx_n_s_min_price_increment, __pyx_k_min_price_increment, sizeof(__pyx_k_min_price_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_quote_amount_increment, __pyx_k_min_quote_amount_increment, sizeof(__pyx_k_min_quote_amount_increment), 0, 0, 1, 1},
  {&__pyx_kp_u_must_be_greater_than_current_ti, __pyx_k_must_be_greater_than_current_ti, sizeof(__pyx_k_must_be_greater_than_current_ti), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_network, __pyx_k_network, sizeof(__pyx_k_network), 0, 0, 1, 1},
  {&__pyx_n_s_network_status, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {&__pyx_n_s_null_address, __pyx_k_null_address, sizeof(__pyx_k_null_address), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_kp_u_of_the_limit_order, __pyx_k_of_the_limit_order, sizeof(__pyx_k_of_the_limit_order), 0, 1, 0, 0},
  {&__pyx_n_s_oid, __pyx_k_oid, sizeof(__pyx_k_oid), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_u_orderHash, __pyx_k_orderHash, sizeof(__pyx_k_orderHash), 0, 1, 0, 1},
  {&__pyx_kp_u_order_amount, __pyx_k_order_amount, sizeof(__pyx_k_order_amount), 0, 1, 0, 0},
  {&__pyx_n_s_order_books, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {&__pyx_n_u_order_books_initialized, __pyx_k_order_books_initialized, sizeof(__pyx_k_order_books_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_order_filled_base_token_amount, __pyx_k_order_filled_base_token_amount, sizeof(__pyx_k_order_filled_base_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_order_filled_quote_token_amount, __pyx_k_order_filled_quote_token_amount, sizeof(__pyx_k_order_filled_quote_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_order_hash, __pyx_k_order_hash, sizeof(__pyx_k_order_hash), 0, 0, 1, 1},
  {&__pyx_n_s_order_hash_hex, __pyx_k_order_hash_hex, sizeof(__pyx_k_order_hash_hex), 0, 0, 1, 1},
  {&__pyx_n_s_order_hashes, __pyx_k_order_hashes, sizeof(__pyx_k_order_hashes), 0, 0, 1, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_ids, __pyx_k_order_ids, sizeof(__pyx_k_order_ids), 0, 0, 1, 1},
  {&__pyx_n_s_order_price, __pyx_k_order_price, sizeof(__pyx_k_order_price), 0, 0, 1, 1},
  {&__pyx_n_s_order_remaining_base_token_amoun, __pyx_k_order_remaining_base_token_amoun, sizeof(__pyx_k_order_remaining_base_token_amoun), 0, 0, 1, 1},
  {&__pyx_n_s_order_side, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {&__pyx_n_s_order_state, __pyx_k_order_state, sizeof(__pyx_k_order_state), 0, 0, 1, 1},
  {&__pyx_n_s_order_struct, __pyx_k_order_struct, sizeof(__pyx_k_order_struct), 0, 0, 1, 1},
  {&__pyx_n_s_order_timestamp_diff, __pyx_k_order_timestamp_diff, sizeof(__pyx_k_order_timestamp_diff), 0, 0, 1, 1},
  {&__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth, __pyx_k_order_to_Bamboo_Relay_Check_Eth, sizeof(__pyx_k_order_to_Bamboo_Relay_Check_Eth), 0, 1, 0, 0},
  {&__pyx_kp_u_order_to_Bamboo_Relay_for, __pyx_k_order_to_Bamboo_Relay_for, sizeof(__pyx_k_order_to_Bamboo_Relay_for), 0, 1, 0, 0},
  {&__pyx_n_s_order_type, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_order_update, __pyx_k_order_update, sizeof(__pyx_k_order_update), 0, 0, 1, 1},
  {&__pyx_n_s_order_updates, __pyx_k_order_updates, sizeof(__pyx_k_order_updates), 0, 0, 1, 1},
  {&__pyx_kp_u_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 1, 0, 0},
  {&__pyx_n_s_orders_2, __pyx_k_orders_2, sizeof(__pyx_k_orders_2), 0, 0, 1, 1},
  {&__pyx_kp_u_orders_hashes, __pyx_k_orders_hashes, sizeof(__pyx_k_orders_hashes), 0, 1, 0, 0},
  {&__pyx_kp_u_out_of, __pyx_k_out_of, sizeof(__pyx_k_out_of), 0, 1, 0, 0},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_n_s_pair_split, __pyx_k_pair_split, sizeof(__pyx_k_pair_split), 0, 0, 1, 1},
  {&__pyx_n_s_poll_interval, __pyx_k_poll_interval, sizeof(__pyx_k_poll_interval), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_n_u_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 1, 0, 1},
  {&__pyx_n_s_pre_emptive_soft_cancels, __pyx_k_pre_emptive_soft_cancels, sizeof(__pyx_k_pre_emptive_soft_cancels), 0, 0, 1, 1},
  {&__pyx_n_s_previous_amount_available, __pyx_k_previous_amount_available, sizeof(__pyx_k_previous_amount_available), 0, 0, 1, 1},
  {&__pyx_n_s_previous_is_cancelled, __pyx_k_previous_is_cancelled, sizeof(__pyx_k_previous_is_cancelled), 0, 0, 1, 1},
  {&__pyx_n_s_previous_is_done, __pyx_k_previous_is_done, sizeof(__pyx_k_previous_is_done), 0, 0, 1, 1},
  {&__pyx_n_s_previous_is_expired, __pyx_k_previous_is_expired, sizeof(__pyx_k_previous_is_expired), 0, 0, 1, 1},
  {&__pyx_n_s_previous_is_failure, __pyx_k_previous_is_failure, sizeof(__pyx_k_previous_is_failure), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_protocol_fee, __pyx_k_protocol_fee, sizeof(__pyx_k_protocol_fee), 0, 0, 1, 1},
  {&__pyx_n_s_protocol_fee_amount, __pyx_k_protocol_fee_amount, sizeof(__pyx_k_protocol_fee_amount), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q_amt, __pyx_k_q_amt, sizeof(__pyx_k_q_amt), 0, 0, 1, 1},
  {&__pyx_n_s_q_price, __pyx_k_q_price, sizeof(__pyx_k_q_price), 0, 0, 1, 1},
  {&__pyx_n_u_quoteIncrement, __pyx_k_quoteIncrement, sizeof(__pyx_k_quoteIncrement), 0, 1, 0, 1},
  {&__pyx_n_u_quoteTokenDecimals, __pyx_k_quoteTokenDecimals, sizeof(__pyx_k_quoteTokenDecimals), 0, 1, 0, 1},
  {&__pyx_n_s_quote_amount, __pyx_k_quote_amount, sizeof(__pyx_k_quote_amount), 0, 0, 1, 1},
  {&__pyx_n_s_quote_amount_with_decimals, __pyx_k_quote_amount_with_decimals, sizeof(__pyx_k_quote_amount_with_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset_decimals, __pyx_k_quote_asset_decimals, sizeof(__pyx_k_quote_asset_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset_increment, __pyx_k_quote_asset_increment, sizeof(__pyx_k_quote_asset_increment), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_quote_token_asset_data, __pyx_k_quote_token_asset_data, sizeof(__pyx_k_quote_token_asset_data), 0, 0, 1, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_receipt, __pyx_k_receipt, sizeof(__pyx_k_receipt), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_u_remainingBaseTokenAmount, __pyx_k_remainingBaseTokenAmount, sizeof(__pyx_k_remainingBaseTokenAmount), 0, 1, 0, 1},
  {&__pyx_n_u_remainingQuoteTokenAmount, __pyx_k_remainingQuoteTokenAmount, sizeof(__pyx_k_remainingQuoteTokenAmount), 0, 1, 0, 1},
  {&__pyx_n_s_remaining_base_token_amount, __pyx_k_remaining_base_token_amount, sizeof(__pyx_k_remaining_base_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_remaining_quote_token_amount, __pyx_k_remaining_quote_token_amount, sizeof(__pyx_k_remaining_quote_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_0x_prefix, __pyx_k_remove_0x_prefix, sizeof(__pyx_k_remove_0x_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_request, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {&__pyx_n_s_reset_state, __pyx_k_reset_state, sizeof(__pyx_k_reset_state), 0, 0, 1, 1},
  {&__pyx_n_s_response, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
  {&__pyx_n_s_response_data, __pyx_k_response_data, sizeof(__pyx_k_response_data), 0, 0, 1, 1},
  {&__pyx_n_s_response_json, __pyx_k_response_json, sizeof(__pyx_k_response_json), 0, 0, 1, 1},
  {&__pyx_n_s_response_text, __pyx_k_response_text, sizeof(__pyx_k_response_text), 0, 0, 1, 1},
  {&__pyx_n_s_restore_tracking_states, __pyx_k_restore_tracking_states, sizeof(__pyx_k_restore_tracking_states), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_s_retval, __pyx_k_retval, sizeof(__pyx_k_retval), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_kp_u_rinkeby_0x, __pyx_k_rinkeby_0x, sizeof(__pyx_k_rinkeby_0x), 0, 1, 0, 0},
  {&__pyx_kp_u_ropsten_0x, __pyx_k_ropsten_0x, sizeof(__pyx_k_ropsten_0x), 0, 1, 0, 0},
  {&__pyx_n_s_rounding, __pyx_k_rounding, sizeof(__pyx_k_rounding), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_NaN, __pyx_k_s_decimal_NaN, sizeof(__pyx_k_s_decimal_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_safe_ensure_future, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {&__pyx_n_s_safe_gather, __pyx_k_safe_gather, sizeof(__pyx_k_safe_gather), 0, 0, 1, 1},
  {&__pyx_n_u_salt, __pyx_k_salt, sizeof(__pyx_k_salt), 0, 1, 0, 1},
  {&__pyx_n_s_saved_states, __pyx_k_saved_states, sizeof(__pyx_k_saved_states), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_u_sell, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 0},
  {&__pyx_n_s_sell_2, __pyx_k_sell_2, sizeof(__pyx_k_sell_2), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_u_senderAddress, __pyx_k_senderAddress, sizeof(__pyx_k_senderAddress), 0, 1, 0, 1},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sign_hash, __pyx_k_sign_hash, sizeof(__pyx_k_sign_hash), 0, 0, 1, 1},
  {&__pyx_n_s_signature, __pyx_k_signature, sizeof(__pyx_k_signature), 0, 0, 1, 1},
  {&__pyx_n_u_signature, __pyx_k_signature, sizeof(__pyx_k_signature), 0, 1, 0, 1},
  {&__pyx_n_s_signatures, __pyx_k_signatures, sizeof(__pyx_k_signatures), 0, 0, 1, 1},
  {&__pyx_n_s_signed_limit_order, __pyx_k_signed_limit_order, sizeof(__pyx_k_signed_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_signed_market_order, __pyx_k_signed_market_order, sizeof(__pyx_k_signed_market_order), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_soft_cancel_order, __pyx_k_soft_cancel_order, sizeof(__pyx_k_soft_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_soft_cancel_result, __pyx_k_soft_cancel_result, sizeof(__pyx_k_soft_cancel_result), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_spender, __pyx_k_spender, sizeof(__pyx_k_spender), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_network, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {&__pyx_n_u_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 1, 0, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_u_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {&__pyx_n_s_status_dict, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {&__pyx_n_s_status_polling_loop, __pyx_k_status_polling_loop, sizeof(__pyx_k_status_polling_loop), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network_2, __pyx_k_stop_network_2, sizeof(__pyx_k_stop_network_2), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_submit_limit_order, __pyx_k_submit_limit_order, sizeof(__pyx_k_submit_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_submit_market_order, __pyx_k_submit_market_order, sizeof(__pyx_k_submit_market_order), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_u_takerAddress, __pyx_k_takerAddress, sizeof(__pyx_k_takerAddress), 0, 1, 0, 1},
  {&__pyx_n_u_takerAssetAmount, __pyx_k_takerAssetAmount, sizeof(__pyx_k_takerAssetAmount), 0, 1, 0, 1},
  {&__pyx_n_u_takerAssetData, __pyx_k_takerAssetData, sizeof(__pyx_k_takerAssetData), 0, 1, 0, 1},
  {&__pyx_n_u_takerFee, __pyx_k_takerFee, sizeof(__pyx_k_takerFee), 0, 1, 0, 1},
  {&__pyx_n_u_takerFeeAssetData, __pyx_k_takerFeeAssetData, sizeof(__pyx_k_takerFeeAssetData), 0, 1, 0, 1},
  {&__pyx_n_s_taker_asset_amount, __pyx_k_taker_asset_amount, sizeof(__pyx_k_taker_asset_amount), 0, 0, 1, 1},
  {&__pyx_n_s_taker_asset_data, __pyx_k_taker_asset_data, sizeof(__pyx_k_taker_asset_data), 0, 0, 1, 1},
  {&__pyx_n_s_taker_asset_fill_amount, __pyx_k_taker_asset_fill_amount, sizeof(__pyx_k_taker_asset_fill_amount), 0, 0, 1, 1},
  {&__pyx_n_s_taker_asset_fill_amounts, __pyx_k_taker_asset_fill_amounts, sizeof(__pyx_k_taker_asset_fill_amounts), 0, 0, 1, 1},
  {&__pyx_n_s_taker_asset_filled_amount, __pyx_k_taker_asset_filled_amount, sizeof(__pyx_k_taker_asset_filled_amount), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_testrpc_0x, __pyx_k_testrpc_0x, sizeof(__pyx_k_testrpc_0x), 0, 1, 0, 0},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_timeout_seconds, __pyx_k_timeout_seconds, sizeof(__pyx_k_timeout_seconds), 0, 0, 1, 1},
  {&__pyx_n_s_toChecksumAddress, __pyx_k_toChecksumAddress, sizeof(__pyx_k_toChecksumAddress), 0, 0, 1, 1},
  {&__pyx_n_s_toHex, __pyx_k_toHex, sizeof(__pyx_k_toHex), 0, 0, 1, 1},
  {&__pyx_n_s_to_integral_exact, __pyx_k_to_integral_exact, sizeof(__pyx_k_to_integral_exact), 0, 0, 1, 1},
  {&__pyx_n_s_to_json, __pyx_k_to_json, sizeof(__pyx_k_to_json), 0, 0, 1, 1},
  {&__pyx_n_s_to_limit_order, __pyx_k_to_limit_order, sizeof(__pyx_k_to_limit_order), 0, 0, 1, 1},
  {&__pyx_n_u_token_approval, __pyx_k_token_approval, sizeof(__pyx_k_token_approval), 0, 1, 0, 1},
  {&__pyx_kp_u_tokens, __pyx_k_tokens, sizeof(__pyx_k_tokens), 0, 1, 0, 0},
  {&__pyx_n_s_tokens_2, __pyx_k_tokens_2, sizeof(__pyx_k_tokens_2), 0, 0, 1, 1},
  {&__pyx_n_s_total_balances, __pyx_k_total_balances, sizeof(__pyx_k_total_balances), 0, 0, 1, 1},
  {&__pyx_n_s_total_base_token_amount, __pyx_k_total_base_token_amount, sizeof(__pyx_k_total_base_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_total_quote_token_amount, __pyx_k_total_quote_token_amount, sizeof(__pyx_k_total_quote_token_amount), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_limit_order, __pyx_k_tracked_limit_order, sizeof(__pyx_k_tracked_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_limit_orders, __pyx_k_tracked_limit_orders, sizeof(__pyx_k_tracked_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_market_order, __pyx_k_tracked_market_order, sizeof(__pyx_k_tracked_market_order), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_market_orders, __pyx_k_tracked_market_orders, sizeof(__pyx_k_tracked_market_orders), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_order, __pyx_k_tracked_order, sizeof(__pyx_k_tracked_order), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type_desc, __pyx_k_trade_type_desc, sizeof(__pyx_k_trade_type_desc), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair_rules, __pyx_k_trading_pair_rules, sizeof(__pyx_k_trading_pair_rules), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pairs, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_trading_required, __pyx_k_trading_required, sizeof(__pyx_k_trading_required), 0, 0, 1, 1},
  {&__pyx_n_s_trading_rule, __pyx_k_trading_rule, sizeof(__pyx_k_trading_rule), 0, 0, 1, 1},
  {&__pyx_n_u_trading_rule_initialized, __pyx_k_trading_rule_initialized, sizeof(__pyx_k_trading_rule_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_trading_rules, __pyx_k_trading_rules, sizeof(__pyx_k_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_trading_rules_list, __pyx_k_trading_rules_list, sizeof(__pyx_k_trading_rules_list), 0, 0, 1, 1},
  {&__pyx_n_u_transactionHash, __pyx_k_transactionHash, sizeof(__pyx_k_transactionHash), 0, 1, 0, 1},
  {&__pyx_n_s_tx_hash, __pyx_k_tx_hash, sizeof(__pyx_k_tx_hash), 0, 0, 1, 1},
  {&__pyx_n_s_tx_hash_receipt, __pyx_k_tx_hash_receipt, sizeof(__pyx_k_tx_hash_receipt), 0, 0, 1, 1},
  {&__pyx_n_s_tx_hashes, __pyx_k_tx_hashes, sizeof(__pyx_k_tx_hashes), 0, 0, 1, 1},
  {&__pyx_n_s_type_str, __pyx_k_type_str, sizeof(__pyx_k_type_str), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_unsigned_limit_order, __pyx_k_unsigned_limit_order, sizeof(__pyx_k_unsigned_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_unsigned_order, __pyx_k_unsigned_order, sizeof(__pyx_k_unsigned_order), 0, 0, 1, 1},
  {&__pyx_n_s_unwatch_order_hash, __pyx_k_unwatch_order_hash, sizeof(__pyx_k_unwatch_order_hash), 0, 0, 1, 1},
  {&__pyx_n_s_unwrap_eth, __pyx_k_unwrap_eth, sizeof(__pyx_k_unwrap_eth), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_available_balances, __pyx_k_update_available_balances, sizeof(__pyx_k_update_available_balances), 0, 0, 1, 1},
  {&__pyx_n_s_update_balances, __pyx_k_update_balances, sizeof(__pyx_k_update_balances), 0, 0, 1, 1},
  {&__pyx_n_s_update_limit_order_status, __pyx_k_update_limit_order_status, sizeof(__pyx_k_update_limit_order_status), 0, 0, 1, 1},
  {&__pyx_n_s_update_market_order_status, __pyx_k_update_market_order_status, sizeof(__pyx_k_update_market_order_status), 0, 0, 1, 1},
  {&__pyx_n_s_update_single_limit_order, __pyx_k_update_single_limit_order, sizeof(__pyx_k_update_single_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_update_trading_rules, __pyx_k_update_trading_rules, sizeof(__pyx_k_update_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_use_coordinator, __pyx_k_use_coordinator, sizeof(__pyx_k_use_coordinator), 0, 0, 1, 1},
  {&__pyx_n_s_valid_orders, __pyx_k_valid_orders, sizeof(__pyx_k_valid_orders), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {&__pyx_n_s_wallet, __pyx_k_wallet, sizeof(__pyx_k_wallet), 0, 0, 1, 1},
  {&__pyx_n_s_watch_order_hash, __pyx_k_watch_order_hash, sizeof(__pyx_k_watch_order_hash), 0, 0, 1, 1},
  {&__pyx_n_s_web3, __pyx_k_web3, sizeof(__pyx_k_web3), 0, 0, 1, 1},
  {&__pyx_n_s_web3_exceptions, __pyx_k_web3_exceptions, sizeof(__pyx_k_web3_exceptions), 0, 0, 1, 1},
  {&__pyx_kp_u_will_be_pre_emptively_soft_canc, __pyx_k_will_be_pre_emptively_soft_canc, sizeof(__pyx_k_will_be_pre_emptively_soft_canc), 0, 1, 0, 0},
  {&__pyx_n_s_wrap_eth, __pyx_k_wrap_eth, sizeof(__pyx_k_wrap_eth), 0, 0, 1, 1},
  {&__pyx_n_u_zeroExOrder, __pyx_k_zeroExOrder, sizeof(__pyx_k_zeroExOrder), 0, 1, 0, 1},
  {&__pyx_n_s_zero_ex_order, __pyx_k_zero_ex_order, sizeof(__pyx_k_zero_ex_order), 0, 0, 1, 1},
  {&__pyx_n_s_zeroex_fill_watcher, __pyx_k_zeroex_fill_watcher, sizeof(__pyx_k_zeroex_fill_watcher), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 1008, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 1022, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 1049, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":356
 *                         del self._in_flight_limit_orders[order.client_order_id]
 *         except Exception:
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     async def get_active_exchange_markets(self):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Error_restoring_tracking_states); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":377
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching account updates.",
 *                     exc_info=True,
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_while_fetching); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":523
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:
 *         return await self._api_request("post",             # <<<<<<<<<<<<<<
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 *                                        data=order_hashes,
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_u_post); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":862
 *                     )
 *                 elif receipt["status"] == 1:
 *                     gas_used = float(receipt.get("gasUsed", 0.0))             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_u_gasUsed, __pyx_float_0_0); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":931
 *                             pass
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unexpected error while fetching approval transactions.",
 *                     exc_info=True,
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_while_fetching_2); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":946
 *                            headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
 *         async with aiohttp.ClientSession() as client:
 *             async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                       url=url,
 *                                       timeout=self.API_CALL_TIMEOUT,
 */
  __pyx_tuple__21 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1049
 *                                   price: Decimal) -> Tuple[Decimal, Decimal, str, int, bool]:
 *         if trade_type is not TradeType.BUY and trade_type is not TradeType.SELL:
 *             raise ValueError("Invalid trade_type. Aborting.")             # <<<<<<<<<<<<<<
 * 
 *         valid_orders = self.c_get_orders_for_amount_price(trading_pair=trading_pair,
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Invalid_trade_type_Aborting); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1337
 *                 return [CancellationResult(oid, True) for oid in incomplete_order_ids]
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling orders.",
 *                     exc_info=True,
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_cancelling_orde); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1407
 *             if order_type is OrderType.LIMIT:
 *                 if math.isnan(price):
 *                     raise ValueError(f"Limit orders require a price. Aborting.")             # <<<<<<<<<<<<<<
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Limit_orders_require_a_price_Abo); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1409
 *                     raise ValueError(f"Limit orders require a price. Aborting.")
 *                 elif expires is None:
 *                     raise ValueError(f"Limit orders require an expiration timestamp 'expiration_ts'. Aborting.")             # <<<<<<<<<<<<<<
 *                 elif expires < time.time():
 *                     raise ValueError(f"expiration time {expires} must be greater than current time {time.time()}")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Limit_orders_require_an_expirati); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1612
 *                         return CancellationResult(client_order_id, True)
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     f"Unexpected error cancelling order.",
 *                     exc_info=True,
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_cancelling_orde_2); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1631
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})             # <<<<<<<<<<<<<<
 *         return response_data
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_u_get); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(2, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":101
 * 
 * brm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("NaN")
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":102
 * brm_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")             # <<<<<<<<<<<<<<
 * 
 * cdef class BambooRelayTransactionTracker(TransactionTracker):
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_u_NaN); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":137
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_logger, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":325
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 * 
 *     def reset_state(self):             # <<<<<<<<<<<<<<
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_reset_state, 325, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 325, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":333
 *         self._order_expiry_queue = deque()
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         # ignore saved orders that may not reflect current version schema
 *         try:
 */
  __pyx_tuple__63 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_saved_states, __pyx_n_s_order, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_restore_tracking_states, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 333, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":358
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 *     async def get_active_exchange_markets(self):             # <<<<<<<<<<<<<<
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_active_exchange_markets, 358, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":361
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_status_polling_loop, 361, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 361, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":428
 *         return estimate_fee("bamboo_relay", is_maker)
 * 
 *     def _update_balances(self):             # <<<<<<<<<<<<<<
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_balances, 428, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 428, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":431
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 *     def _update_available_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_tuple__69 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_current_timestamp, __pyx_n_s_order, __pyx_n_s_amount, __pyx_n_s_currency, __pyx_n_s_pair_split, __pyx_n_s_locked_balances, __pyx_n_s_total_balances, __pyx_n_s_balance); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_available_balances, 431, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 431, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":484
 *             self._last_update_available_balance_timestamp = current_timestamp
 * 
 *     async def list_market(self) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 */
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_url); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_list_market, 484, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 484, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":488
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_tuple__72 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_current_timestamp, __pyx_n_s_markets, __pyx_n_s_trading_rules_list, __pyx_n_s_trading_rule); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_trading_rules, 488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":500
 *             self._last_update_trading_rules_timestamp = current_timestamp
 * 
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */
  __pyx_tuple__73 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_markets, __pyx_n_s_retval, __pyx_n_s_market, __pyx_n_s_trading_pair); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_format_trading_rules, 500, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 500, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":517
 *         return retval
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_account_orders, 517, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 517, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":522
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_order_hashes); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_orders, 522, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 522, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":528
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 */
  __pyx_tuple__77 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_tracked_limit_orders, __pyx_n_s_tracked_limit_order, __pyx_n_s_account_orders_list, __pyx_n_s_order_updates, __pyx_n_s_hashes, __pyx_n_s_hash_index, __pyx_n_s_account_orders_map, __pyx_n_s_account_order, __pyx_n_s_i, __pyx_n_s_tracked_order, __pyx_n_s_order_hash, __pyx_n_s_orders_2, __pyx_n_s_hash); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_order_updates, 528, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":560
 * 
 *     # Single order update, i.e. via RPC logs instead of market API
 *     def _update_single_limit_order(self, fill_event: ZeroExFillEvent):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_tuple__78 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_fill_event, __pyx_n_s_current_timestamp, __pyx_n_s_order_remaining_base_token_amoun, __pyx_n_s_order_filled_base_token_amount, __pyx_n_s_order_filled_quote_token_amount, __pyx_n_s_base_asset_decimals, __pyx_n_s_quote_asset_decimals, __pyx_n_s_tracked_limit_order, __pyx_n_s_tracked_limit_orders, __pyx_n_s_previous_is_done, __pyx_n_s_trading_pair_rules); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_single_limit_order, 560, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 560, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":655
 *                 return
 * 
 *     async def _update_limit_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_tuple__80 = PyTuple_Pack(18, __pyx_n_s_self, __pyx_n_s_current_timestamp, __pyx_n_s_order_timestamp_diff, __pyx_n_s_order_remaining_base_token_amoun, __pyx_n_s_fill_base_token_amount, __pyx_n_s_order_filled_base_token_amount, __pyx_n_s_order_filled_quote_token_amount, __pyx_n_s_previous_amount_available, __pyx_n_s_tracked_limit_order, __pyx_n_s_tracked_limit_orders, __pyx_n_s_order_updates, __pyx_n_s_order_update, __pyx_n_s_previous_is_done, __pyx_n_s_previous_is_cancelled, __pyx_n_s_previous_is_failure, __pyx_n_s_previous_is_expired, __pyx_n_s_order_state, __pyx_n_s_fill); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_limit_order_status, 655, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 655, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":837
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 *     async def _update_market_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_tuple__81 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_current_timestamp, __pyx_n_s_tracked_market_orders, __pyx_n_s_tracked_market_order, __pyx_n_s_receipt, __pyx_n_s_err_msg, __pyx_n_s_gas_used); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_update_market_order_status, 837, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 837, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":920
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 *     async def _approval_tx_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 */
  __pyx_tuple__82 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_tx_hash, __pyx_n_s_receipt); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_approval_tx_polling_loop, 920, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 920, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */
  __pyx_tuple__83 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_http_method, __pyx_n_s_url, __pyx_n_s_data, __pyx_n_s_headers, __pyx_n_s_client, __pyx_n_s_response, __pyx_n_s_response_json, __pyx_n_s_response_text); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_api_request, 940, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_tuple__84 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":968
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:             # <<<<<<<<<<<<<<
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 */
  __pyx_tuple__85 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_unsigned_order, __pyx_n_s_order_struct, __pyx_n_s_order_hash_hex); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_order_hash_hex, 968, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 968, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":977
 *         return order_hash_hex
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:             # <<<<<<<<<<<<<<
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,
 */
  __pyx_tuple__87 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_order_hash_hex, __pyx_n_s_signature, __pyx_n_s_fixed_signature); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_zero_ex_signature, 977, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 977, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1043
 *         return found_orders
 * 
 *     async def submit_market_order(self,             # <<<<<<<<<<<<<<
 *                                   trading_pair: str,
 *                                   trade_type: TradeType,
 */
  __pyx_tuple__89 = PyTuple_Pack(29, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_trade_type, __pyx_n_s_amount, __pyx_n_s_price, __pyx_n_s_valid_orders, __pyx_n_s_total_base_token_amount, __pyx_n_s_total_quote_token_amount, __pyx_n_s_taker_asset_fill_amount, __pyx_n_s_calculated_price, __pyx_n_s_trading_pair_rules, __pyx_n_s_base_asset_increment, __pyx_n_s_base_asset_decimals, __pyx_n_s_max_base_amount_with_decimals, __pyx_n_s_quote_asset_increment, __pyx_n_s_quote_asset_decimals, __pyx_n_s_is_coordinated, __pyx_n_s_tx_hash, __pyx_n_s_protocol_fee, __pyx_n_s_apiOrder, __pyx_n_s_signed_market_order, __pyx_n_s_signature, __pyx_n_s_order, __pyx_n_s_remaining_base_token_amount, __pyx_n_s_remaining_quote_token_amount, __pyx_n_s_taker_asset_fill_amounts, __pyx_n_s_signatures, __pyx_n_s_orders_2, __pyx_n_s_order_price); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 29, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_submit_market_order, 1043, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 1043, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1169
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *     async def submit_limit_order(self,             # <<<<<<<<<<<<<<
 *                                  trading_pair: str,
 *                                  trade_type: TradeType,
 */
  __pyx_tuple__90 = PyTuple_Pack(32, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_trade_type, __pyx_n_s_is_coordinated, __pyx_n_s_amount, __pyx_n_s_price, __pyx_n_s_expires, __pyx_n_s_latest_salt, __pyx_n_s_trading_pair_rules, __pyx_n_s_base_asset_increment, __pyx_n_s_base_asset_decimals, __pyx_n_s_base_amount_with_decimals, __pyx_n_s_quote_asset_increment, __pyx_n_s_quote_asset_decimals, __pyx_n_s_quote_amount, __pyx_n_s_quote_amount_with_decimals, __pyx_n_s_maker_asset_amount, __pyx_n_s_taker_asset_amount, __pyx_n_s_maker_asset_data, __pyx_n_s_taker_asset_data, __pyx_n_s_pair_split, __pyx_n_s_tokens_2, __pyx_n_s_base_token_asset_data, __pyx_n_s_quote_token_asset_data, __pyx_n_s_null_address, __pyx_n_s_unsigned_limit_order, __pyx_n_s_order_hash_hex, __pyx_n_s_signed_limit_order, __pyx_n_s_signature, __pyx_n_s_order_hash, __pyx_n_s_zero_ex_order, __pyx_n_s_ex); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_submit_limit_order, 1169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 1169, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1287
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int order_timestamp_diff
 */
  __pyx_tuple__91 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_timeout_seconds, __pyx_n_s_order_timestamp_diff, __pyx_n_s_current_timestamp, __pyx_n_s_in_flight_limit_orders, __pyx_n_s_incomplete_order_ids, __pyx_n_s_incomplete_orders, __pyx_n_s_has_coordinated_order, __pyx_n_s_order, __pyx_n_s_orders_2, __pyx_n_s_soft_cancel_result, __pyx_n_s_order_ids, __pyx_n_s_tx_hash, __pyx_n_s_receipt, __pyx_n_s_o, __pyx_n_s_oid, __pyx_n_s_oid, __pyx_n_s_oid, __pyx_n_s_oid); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_cancel_all, 1287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 1287, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1382
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 * 
 *     async def execute_trade(self,             # <<<<<<<<<<<<<<
 *                             order_id: str,
 *                             order_type: OrderType,
 */
  __pyx_tuple__92 = PyTuple_Pack(20, __pyx_n_s_self, __pyx_n_s_order_id, __pyx_n_s_order_type, __pyx_n_s_trade_type, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_price, __pyx_n_s_expires, __pyx_n_s_q_price, __pyx_n_s_q_amt, __pyx_n_s_amount_to_fill, __pyx_n_s_trading_rule, __pyx_n_s_trade_type_desc, __pyx_n_s_type_str, __pyx_n_s_exchange_order_id, __pyx_n_s_zero_ex_order, __pyx_n_s_avg_price, __pyx_n_s_tx_hash, __pyx_n_s_protocol_fee, __pyx_n_s_is_coordinated); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_execute_trade, 1382, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 1382, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1550
 *         return order_id
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)
 */
  __pyx_tuple__93 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_client_order_id, __pyx_n_s_order, __pyx_n_s_order_timestamp_diff, __pyx_n_s_current_timestamp, __pyx_n_s_tx_hash, __pyx_n_s_receipt); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_cancel_order, 1550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1550, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1619
 *                 )
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_tuple__94 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_is_buy); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_price, 1619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1619, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1622
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_tx_hash, __pyx_n_s_tx_hash_receipt); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_tx_hash_receipt, 1622, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1622, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1629
 *             return None
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 */
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_url, __pyx_n_s_response_data); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_list_account_orders, 1629, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 1629, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1634
 *         return response_data
 * 
 *     def wrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.wrap_eth(amount)
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_amount); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_wrap_eth, 1634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 1634, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1637
 *         return self._wallet.wrap_eth(amount)
 * 
 *     def unwrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.unwrap_eth(amount)
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_amount); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_unwrap_eth, 1637, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 1637, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1648
 *         return order_books[trading_pair]
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_tx_hashes); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_start_network, 1648, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 1648, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1659
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_stop_network, 1659, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 1659, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1669
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 1669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_stop_network_2, 1669, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 1669, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1672
 *         self._stop_network()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_check_network, 1672, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 1672, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1802
 *         return quantized_amount
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_is_buy); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_price, 1802, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 1802, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_tuple__111 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_buy_2, 1805, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 1805, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_tuple__113 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_sell_2, 1809, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 1809, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1813
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */
  __pyx_tuple__115 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_client_order_id); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_cancel, 1813, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 1813, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1816
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */
  __pyx_tuple__117 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_base_currency, __pyx_n_s_quote_currency, __pyx_n_s_order_type, __pyx_n_s_order_side, __pyx_n_s_amount, __pyx_n_s_price); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_fee, 1816, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1816, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1825
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_trading_pair); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_ba_6, __pyx_n_s_get_order_book, 1825, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1825, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__123 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.method_name = &__pyx_n_s_values;
  __pyx_umethod_PyUnicode_Type_capitalize.type = (PyObject*)&PyUnicode_Type;
  __pyx_umethod_PyUnicode_Type_capitalize.method_name = &__pyx_n_s_capitalize;
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_kp_u_0x000000000000000000000000000000) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_kp_u_0xf47261b00000000000000000000000) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_kp_u_1e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_u_1e_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_API_CALL_TIMEOUT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_kp_u_API_returned_incorrect_values_fo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_BUY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_BambooRelayAPIOrderBookDataSourc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_BambooRelayExchange) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_BambooRelayExchange___reduce_cyt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s_BambooRelayExchange___setstate_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s_BambooRelayExchange__api_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_BambooRelayExchange__approval_tx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_BambooRelayExchange__format_trad) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_BambooRelayExchange__get_order_u) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_BambooRelayExchange__status_poll) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_BambooRelayExchange__stop_networ) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_BambooRelayExchange__update_avai) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_BambooRelayExchange__update_bala) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_BambooRelayExchange__update_limi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_BambooRelayExchange__update_mark) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_BambooRelayExchange__update_sing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_BambooRelayExchange__update_trad) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_BambooRelayExchange_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_BambooRelayExchange_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_BambooRelayExchange_cancel_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_BambooRelayExchange_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_BambooRelayExchange_check_networ) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_BambooRelayExchange_execute_trad) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_BambooRelayExchange_get_account) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_s_BambooRelayExchange_get_active_e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_BambooRelayExchange_get_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_BambooRelayExchange_get_order_bo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_BambooRelayExchange_get_order_ha) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_BambooRelayExchange_get_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_BambooRelayExchange_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_BambooRelayExchange_get_tx_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_BambooRelayExchange_get_zero_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_BambooRelayExchange_list_account) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_BambooRelayExchange_list_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_BambooRelayExchange_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_BambooRelayExchange_reset_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_BambooRelayExchange_restore_trac) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_BambooRelayExchange_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_BambooRelayExchange_start_networ) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_BambooRelayExchange_stop_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_BambooRelayExchange_submit_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_BambooRelayExchange_submit_marke) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_BambooRelayExchange_unwrap_eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_BambooRelayExchange_wrap_eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_BambooRelayOrderBookTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_BambooRelayTransactionTracker_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_BambooRelayTransactionTracker_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_BuyOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_BuyOrderCompletedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_BuyOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_BuyOrderCreatedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_u_CANCELED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_CANCEL_EXPIRY_TIME) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_u_COMPLETED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_CancellationResult) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_s_CancelledError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_kp_u_Check_transaction_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_ClientSession) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_kp_u_Could_not_get_token_approval_sta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_Dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_kp_s_Dict_str_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_u_ETH) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_kp_u_Error_fetching_data_from) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_u_Error_parsing_the_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_u_Error_restoring_tracking_states) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u_Error_submitting) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_EthereumChain) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_Event) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_ExchangeBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_u_FILLED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_u_Failed_to_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_kp_u_Failed_to_cancel_order_on_Bamboo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_kp_u_Failed_to_cancel_orders_on_Bambo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_kp_u_Failed_to_cancel_orders_on_Bambo_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_kp_u_Failed_to_fetch_account_updates) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_u_Failed_to_submit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_kp_u_Filled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_u_GET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_s_HTTPProvider) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_kp_u_HTTP_status_is) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_n_s_HummingbotLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_IOError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_kp_u_Incorrect_values_for_market_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_u_Invalid_trade_type_Aborting) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_KOVAN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_s_LIMIT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_LimitOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_kp_u_Limit_orders_require_a_price_Abo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_kp_u_Limit_orders_require_an_expirati) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_List) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_kp_s_List_BambooRelayInFlightOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_kp_s_List_CancellationResult) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_kp_s_List_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_kp_s_List_TradingRule) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_kp_s_List_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_MAIN_NET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_MARKET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_MarketEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_MarketOrderFailureEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_NOT_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_u_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_kp_u_No_order_book_exists_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_kp_u_No_valid_orders_found_for_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_ORDER_CREATION_BACKOFF_TIME) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_s_ORDER_EXPIRY_TIME) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_Optional) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_s_Optional_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_kp_s_Optional_Dict_str_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_n_s_Order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_OrderBook) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_OrderCancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_OrderCancelledEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_OrderExpired) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_OrderExpiredEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_OrderFailure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_s_OrderFilled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_OrderFilledEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_kp_u_Order_not_found_in_tracked_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s_OrderedDict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_RINKEBY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_ROPSTEN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_ROUND_FLOOR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_ReceivedAsset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_SELL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_SellOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_SellOrderCompletedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_SellOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_n_s_SellOrderCreatedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_kp_u_Server_Error_Bad_Gateway) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_kp_u_Skipping) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_StopIteration) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_kp_u_The_limit_buy_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_kp_u_The_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_kp_u_The_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_kp_u_The_limit_sell_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_kp_u_The_market_buy_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_kp_u_The_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_kp_u_The_market_sell_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_TradeFee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_TransactionNotFound) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_n_s_Tuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_kp_s_Tuple_str_ZeroExOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_UPDATE_RULES_INTERVAL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_kp_u_Unexpected_error_cancelling_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_kp_u_Unexpected_error_cancelling_orde_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_kp_u_Unexpected_error_while_fetching) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_kp_u_Unexpected_error_while_fetching_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_kp_u_Unrecognized_transaction_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_kp_u_User_Agent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_Web3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_Web3Wallet) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_ZEROEX_TEST) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_ZeroExCoordinator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_n_s_ZeroExExchange) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_ZeroExFillEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_ZeroExOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_n_s__125) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_kp_u__13) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_kp_u__15) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_kp_u__20) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_kp_u__26) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_kp_u__41) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_kp_u__5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_s__52) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_kp_u_according_to_order_status_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_kp_u_according_to_the_RPC_transactio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_u_account_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_n_u_account_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_s_account_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_n_s_account_orders_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_account_orders_map) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_kp_u_accounts) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_active_asks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_s_active_bids) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_s_address) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_aenter) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_n_s_aexit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_n_s_aiohttp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_n_s_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_n_s_amount_to_fill) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_kp_u_and_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_s_apiOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_s_api_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_app_warning_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_append) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_approval_tx_polling_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_async_timeout) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_s_asyncio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_asyncio_tasks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_s_avg_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_n_s_await) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_n_s_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_n_u_bamboo_relay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_n_u_baseTokenDecimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[258], &__pyx_n_s_base_amount_with_decimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[259], &__pyx_n_s_base_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[260], &__pyx_n_s_base_asset_decimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[261], &__pyx_n_s_base_asset_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[262], &__pyx_n_s_base_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[263], &__pyx_n_s_base_token_asset_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[264], &__pyx_n_s_batch_fill_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[265], &__pyx_n_s_batch_soft_cancel_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[266], &__pyx_n_u_blockNumber) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[267], &__pyx_n_s_bool) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[268], &__pyx_n_s_brm_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[269], &__pyx_kp_u_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[270], &__pyx_n_s_buy_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[271], &__pyx_n_s_c_did_timeout_tx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[272], &__pyx_n_s_calculated_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[273], &__pyx_n_s_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[274], &__pyx_n_s_cancel_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[275], &__pyx_n_s_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[276], &__pyx_n_s_cancel_orders_up_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[277], &__pyx_n_s_capitalize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[278], &__pyx_n_s_ceil) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[279], &__pyx_n_s_chain) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[280], &__pyx_n_u_chainId) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[281], &__pyx_n_s_chain_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[282], &__pyx_n_s_check_and_fix_approval_amounts) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[283], &__pyx_n_s_check_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[284], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[285], &__pyx_n_s_clear) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[286], &__pyx_n_s_client) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[287], &__pyx_n_s_client_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[288], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[289], &__pyx_n_s_close) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[290], &__pyx_n_s_cls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[291], &__pyx_n_s_collections) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[292], &__pyx_n_s_copy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[293], &__pyx_kp_u_could_not_be_found_according_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[294], &__pyx_n_s_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[295], &__pyx_n_s_current_backend) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[296], &__pyx_n_s_current_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[297], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[298], &__pyx_n_s_decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[299], &__pyx_n_s_deepcopy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[300], &__pyx_n_s_deque) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[301], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[302], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[303], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[304], &__pyx_n_s_enumerate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[305], &__pyx_n_s_erc20_tokens) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[306], &__pyx_n_s_err_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[307], &__pyx_n_s_error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[308], &__pyx_n_s_estimate_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[309], &__pyx_n_s_eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[310], &__pyx_n_s_eth_utils) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[311], &__pyx_n_s_ethereum_rpc_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[312], &__pyx_n_s_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[313], &__pyx_n_s_exc_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[314], &__pyx_n_u_exchangeAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[315], &__pyx_n_s_exchange_address) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[316], &__pyx_n_s_exchange_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[317], &__pyx_n_s_execute_trade) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[318], &__pyx_n_s_executed_amount_quote) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[319], &__pyx_n_u_expirationTimeSeconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[320], &__pyx_kp_u_expiration_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[321], &__pyx_n_u_expiration_ts) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[322], &__pyx_n_s_expires) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[323], &__pyx_n_u_feeRecipientAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[324], &__pyx_n_s_fill) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[325], &__pyx_n_s_fill_base_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[326], &__pyx_n_s_fill_event) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[327], &__pyx_n_s_fill_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[328], &__pyx_n_u_filledBaseTokenAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[329], &__pyx_n_u_filledQuoteTokenAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[330], &__pyx_n_u_fills) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[331], &__pyx_n_s_fix_signature) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[332], &__pyx_n_s_fixed_signature) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[333], &__pyx_n_s_float) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[334], &__pyx_n_s_floor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[335], &__pyx_kp_u_for_more_details) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[336], &__pyx_n_s_format_trading_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[337], &__pyx_n_s_from_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[338], &__pyx_n_u_gasUsed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[339], &__pyx_n_s_gas_used) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[340], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[341], &__pyx_n_s_generate_order_hash_hex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[342], &__pyx_n_s_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[343], &__pyx_n_u_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[344], &__pyx_n_s_getLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[345], &__pyx_n_s_getTransactionReceipt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[346], &__pyx_n_s_get_account_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[347], &__pyx_n_s_get_active_exchange_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[348], &__pyx_n_s_get_active_order_tracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[349], &__pyx_n_s_get_all_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[350], &__pyx_n_s_get_event_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[351], &__pyx_n_s_get_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[352], &__pyx_n_s_get_order_book) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[353], &__pyx_n_s_get_order_hash_hex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[354], &__pyx_n_s_get_order_updates) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[355], &__pyx_n_s_get_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[356], &__pyx_n_s_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[357], &__pyx_n_s_get_tracking_nonce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[358], &__pyx_n_s_get_tx_hash_receipt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[359], &__pyx_n_s_get_zero_ex_signature) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[360], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[361], &__pyx_n_s_has_been_cancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[362], &__pyx_kp_u_has_been_hard_cancelled_accordi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[363], &__pyx_kp_u_has_been_soft_cancelled_accordi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[364], &__pyx_kp_u_has_cancelled_according_to_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[365], &__pyx_kp_u_has_completed_according_to_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[366], &__pyx_kp_u_has_completed_according_to_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[367], &__pyx_kp_u_has_completed_according_to_tran) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[368], &__pyx_n_s_has_coordinated_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[369], &__pyx_kp_u_has_expired_according_to_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[370], &__pyx_kp_u_has_failed_according_to_order_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[371], &__pyx_kp_u_has_failed_according_to_transact) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[372], &__pyx_kp_u_has_had_it_s_available_amount_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[373], &__pyx_n_s_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[374], &__pyx_n_s_hash_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[375], &__pyx_n_s_hashes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[376], &__pyx_kp_u_have_been_hard_cancelled_accordi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[377], &__pyx_kp_u_have_been_soft_cancelled_accordi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[378], &__pyx_n_s_headers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[379], &__pyx_n_s_hexstr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[380], &__pyx_n_s_http_method) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[381], &__pyx_n_u_hummingbot) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[382], &__pyx_n_s_hummingbot_connector_exchange_ba) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[383], &__pyx_n_s_hummingbot_connector_exchange_ba_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[384], &__pyx_n_s_hummingbot_connector_exchange_ba_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[385], &__pyx_n_s_hummingbot_connector_exchange_ba_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[386], &__pyx_n_s_hummingbot_connector_exchange_ba_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[387], &__pyx_kp_s_hummingbot_connector_exchange_ba_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[388], &__pyx_n_s_hummingbot_core_data_type_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[389], &__pyx_n_s_hummingbot_core_data_type_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[390], &__pyx_n_s_hummingbot_core_event_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[391], &__pyx_n_s_hummingbot_core_network_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[392], &__pyx_n_s_hummingbot_core_utils_async_util) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[393], &__pyx_n_s_hummingbot_core_utils_estimate_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[394], &__pyx_n_s_hummingbot_core_utils_tracking_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[395], &__pyx_n_s_hummingbot_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[396], &__pyx_n_s_hummingbot_wallet_ethereum_ether) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[397], &__pyx_n_s_hummingbot_wallet_ethereum_web3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[398], &__pyx_n_s_hummingbot_wallet_ethereum_zero) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[399], &__pyx_n_s_hummingbot_wallet_ethereum_zero_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[400], &__pyx_n_s_hummingbot_wallet_ethereum_zero_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[401], &__pyx_n_s_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[402], &__pyx_n_u_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[403], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[404], &__pyx_n_s_in_flight_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[405], &__pyx_n_s_in_flight_market_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[406], &__pyx_n_s_incomplete_order_ids) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[407], &__pyx_n_s_incomplete_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[408], &__pyx_n_s_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[409], &__pyx_n_s_init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[410], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[411], &__pyx_n_s_inspect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[412], &__pyx_n_s_int) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[413], &__pyx_n_u_isCoordinated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[414], &__pyx_n_s_is_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[415], &__pyx_n_s_is_cancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[416], &__pyx_n_s_is_coordinated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[417], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[418], &__pyx_n_s_is_done) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[419], &__pyx_n_s_is_expired) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[420], &__pyx_n_s_is_failure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[421], &__pyx_n_s_is_finite) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[422], &__pyx_kp_u_is_greater_than_requested_amoun) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[423], &__pyx_kp_u_is_greater_than_the_maximum_ord) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[424], &__pyx_kp_u_is_lower_than_the_minimum_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[425], &__pyx_n_s_is_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[426], &__pyx_n_s_is_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[427], &__pyx_kp_u_is_worse_than_requested_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[428], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[429], &__pyx_n_s_isnan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[430], &__pyx_n_s_items) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[431], &__pyx_n_s_jsdict_order_to_struct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[432], &__pyx_n_s_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[433], &__pyx_n_s_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[434], &__pyx_n_s_keys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[435], &__pyx_kp_u_kovan_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[436], &__pyx_n_s_kwargs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[437], &__pyx_n_s_latest_salt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[438], &__pyx_n_u_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[439], &__pyx_n_s_list_account_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[440], &__pyx_n_s_list_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[441], &__pyx_n_s_locked_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[442], &__pyx_n_s_log10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[443], &__pyx_n_s_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[444], &__pyx_n_s_logging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[445], &__pyx_n_s_lower) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[446], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[447], &__pyx_kp_u_main_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[448], &__pyx_n_u_makerAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[449], &__pyx_n_u_makerAssetAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[450], &__pyx_n_u_makerAssetData) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[451], &__pyx_n_u_makerFee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[452], &__pyx_n_u_makerFeeAssetData) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[453], &__pyx_n_s_maker_asset_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[454], &__pyx_n_s_maker_asset_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[455], &__pyx_n_s_maker_asset_filled_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[456], &__pyx_n_s_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[457], &__pyx_n_u_market_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[458], &__pyx_n_s_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[459], &__pyx_kp_u_markets_perPage_1000_include_ba) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[460], &__pyx_n_s_math) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[461], &__pyx_n_u_maxOrderSize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[462], &__pyx_n_s_max_base_amount_with_decimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[463], &__pyx_n_s_max_order_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[464], &__pyx_n_s_max_price_significant_digits) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[465], &__pyx_n_u_minOrderSize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[466], &__pyx_n_s_min_base_amount_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[467], &__pyx_n_s_min_order_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[468], &__pyx_n_s_min_price_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[469], &__pyx_n_s_min_quote_amount_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[470], &__pyx_kp_u_must_be_greater_than_current_ti) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[471], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[472], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[473], &__pyx_n_s_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[474], &__pyx_n_s_network_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[475], &__pyx_n_s_null_address) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[476], &__pyx_kp_u_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[477], &__pyx_kp_u_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[478], &__pyx_n_s_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[479], &__pyx_kp_u_of_the_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[480], &__pyx_n_s_oid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[481], &__pyx_n_s_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[482], &__pyx_n_u_orderHash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[483], &__pyx_kp_u_order_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[484], &__pyx_n_s_order_books) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[485], &__pyx_n_u_order_books_initialized) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[486], &__pyx_n_s_order_filled_base_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[487], &__pyx_n_s_order_filled_quote_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[488], &__pyx_n_s_order_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[489], &__pyx_n_s_order_hash_hex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[490], &__pyx_n_s_order_hashes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[491], &__pyx_n_s_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[492], &__pyx_n_s_order_ids) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[493], &__pyx_n_s_order_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[494], &__pyx_n_s_order_remaining_base_token_amoun) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[495], &__pyx_n_s_order_side) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[496], &__pyx_n_s_order_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[497], &__pyx_n_s_order_struct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[498], &__pyx_n_s_order_timestamp_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[499], &__pyx_kp_u_order_to_Bamboo_Relay_Check_Eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[500], &__pyx_kp_u_order_to_Bamboo_Relay_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[501], &__pyx_n_s_order_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[502], &__pyx_n_s_order_update) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[503], &__pyx_n_s_order_updates) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[504], &__pyx_kp_u_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[505], &__pyx_n_s_orders_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[506], &__pyx_kp_u_orders_hashes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[507], &__pyx_kp_u_out_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[508], &__pyx_n_s_owner) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[509], &__pyx_n_s_pair_split) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[510], &__pyx_n_s_poll_interval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[511], &__pyx_n_s_popleft) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[512], &__pyx_n_u_post) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[513], &__pyx_n_s_pre_emptive_soft_cancels) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[514], &__pyx_n_s_previous_amount_available) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[515], &__pyx_n_s_previous_is_cancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[516], &__pyx_n_s_previous_is_done) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[517], &__pyx_n_s_previous_is_expired) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[518], &__pyx_n_s_previous_is_failure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[519], &__pyx_n_s_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[520], &__pyx_n_s_protocol_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[521], &__pyx_n_s_protocol_fee_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[522], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[523], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[524], &__pyx_n_s_q_amt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[525], &__pyx_n_s_q_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[526], &__pyx_n_u_quoteIncrement) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[527], &__pyx_n_u_quoteTokenDecimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[528], &__pyx_n_s_quote_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[529], &__pyx_n_s_quote_amount_with_decimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[530], &__pyx_n_s_quote_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[531], &__pyx_n_s_quote_asset_decimals) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[532], &__pyx_n_s_quote_asset_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[533], &__pyx_n_s_quote_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[534], &__pyx_n_s_quote_token_asset_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[535], &__pyx_n_s_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[536], &__pyx_n_s_receipt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[537], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[538], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[539], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[540], &__pyx_n_u_remainingBaseTokenAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[541], &__pyx_n_u_remainingQuoteTokenAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[542], &__pyx_n_s_remaining_base_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[543], &__pyx_n_s_remaining_quote_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[544], &__pyx_n_s_remove) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[545], &__pyx_n_s_remove_0x_prefix) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[546], &__pyx_n_s_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[547], &__pyx_n_s_reset_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[548], &__pyx_n_s_response) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[549], &__pyx_n_s_response_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[550], &__pyx_n_s_response_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[551], &__pyx_n_s_response_text) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[552], &__pyx_n_s_restore_tracking_states) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[553], &__pyx_n_s_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[554], &__pyx_n_s_retval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[555], &__pyx_n_s_reverse) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[556], &__pyx_kp_u_rinkeby_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[557], &__pyx_kp_u_ropsten_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[558], &__pyx_n_s_rounding) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[559], &__pyx_n_s_s_decimal_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[560], &__pyx_n_s_s_decimal_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[561], &__pyx_n_s_safe_ensure_future) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[562], &__pyx_n_s_safe_gather) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[563], &__pyx_n_u_salt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[564], &__pyx_n_s_saved_states) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[565], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[566], &__pyx_kp_s_self__events_cannot_be_converted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[567], &__pyx_kp_u_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[568], &__pyx_n_s_sell_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[569], &__pyx_n_s_send) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[570], &__pyx_n_u_senderAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[571], &__pyx_n_s_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[572], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[573], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[574], &__pyx_n_s_sign_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[575], &__pyx_n_s_signature) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[576], &__pyx_n_u_signature) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[577], &__pyx_n_s_signatures) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[578], &__pyx_n_s_signed_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[579], &__pyx_n_s_signed_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[580], &__pyx_n_s_sleep) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[581], &__pyx_n_s_soft_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[582], &__pyx_n_s_soft_cancel_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[583], &__pyx_n_s_sorted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[584], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[585], &__pyx_n_s_spender) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[586], &__pyx_n_s_start) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[587], &__pyx_n_s_start_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[588], &__pyx_n_u_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[589], &__pyx_n_s_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[590], &__pyx_n_u_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[591], &__pyx_n_s_status_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[592], &__pyx_n_s_status_polling_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[593], &__pyx_n_s_stop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[594], &__pyx_n_s_stop_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[595], &__pyx_n_s_stop_network_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[596], &__pyx_n_s_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[597], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[598], &__pyx_n_s_submit_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[599], &__pyx_n_s_submit_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[600], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[601], &__pyx_n_u_takerAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[602], &__pyx_n_u_takerAssetAmount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[603], &__pyx_n_u_takerAssetData) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[604], &__pyx_n_u_takerFee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[605], &__pyx_n_u_takerFeeAssetData) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[606], &__pyx_n_s_taker_asset_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[607], &__pyx_n_s_taker_asset_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[608], &__pyx_n_s_taker_asset_fill_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[609], &__pyx_n_s_taker_asset_fill_amounts) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[610], &__pyx_n_s_taker_asset_filled_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[611], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[612], &__pyx_kp_u_testrpc_0x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[613], &__pyx_n_s_text) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[614], &__pyx_n_s_throw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[615], &__pyx_n_s_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[616], &__pyx_n_s_timeout) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[617], &__pyx_n_s_timeout_seconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[618], &__pyx_n_s_toChecksumAddress) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[619], &__pyx_n_s_toHex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[620], &__pyx_n_s_to_integral_exact) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[621], &__pyx_n_s_to_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[622], &__pyx_n_s_to_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[623], &__pyx_n_u_token_approval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[624], &__pyx_kp_u_tokens) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[625], &__pyx_n_s_tokens_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[626], &__pyx_n_s_total_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[627], &__pyx_n_s_total_base_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[628], &__pyx_n_s_total_quote_token_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[629], &__pyx_n_s_tracked_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[630], &__pyx_n_s_tracked_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[631], &__pyx_n_s_tracked_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[632], &__pyx_n_s_tracked_market_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[633], &__pyx_n_s_tracked_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[634], &__pyx_n_s_trade_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[635], &__pyx_n_s_trade_type_desc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[636], &__pyx_n_s_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[637], &__pyx_n_s_trading_pair_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[638], &__pyx_n_s_trading_pairs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[639], &__pyx_n_s_trading_required) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[640], &__pyx_n_s_trading_rule) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[641], &__pyx_n_u_trading_rule_initialized) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[642], &__pyx_n_s_trading_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[643], &__pyx_n_s_trading_rules_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[644], &__pyx_n_u_transactionHash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[645], &__pyx_n_s_tx_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[646], &__pyx_n_s_tx_hash_receipt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[647], &__pyx_n_s_tx_hashes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[648], &__pyx_n_s_type_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[649], &__pyx_n_s_typing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[650], &__pyx_n_s_unsigned_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[651], &__pyx_n_s_unsigned_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[652], &__pyx_n_s_unwatch_order_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[653], &__pyx_n_s_unwrap_eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[654], &__pyx_n_s_update) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[655], &__pyx_n_s_update_available_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[656], &__pyx_n_s_update_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[657], &__pyx_n_s_update_limit_order_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[658], &__pyx_n_s_update_market_order_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[659], &__pyx_n_s_update_single_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[660], &__pyx_n_s_update_trading_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[661], &__pyx_n_s_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[662], &__pyx_n_s_use_coordinator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[663], &__pyx_n_s_valid_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[664], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[665], &__pyx_n_s_values) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[666], &__pyx_n_s_wait) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[667], &__pyx_n_s_wallet) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[668], &__pyx_n_s_watch_order_hash) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[669], &__pyx_n_s_web3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[670], &__pyx_n_s_web3_exceptions) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[671], &__pyx_kp_u_will_be_pre_emptively_soft_canc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[672], &__pyx_n_s_wrap_eth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[673], &__pyx_n_u_zeroExOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[674], &__pyx_n_s_zero_ex_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[675], &__pyx_n_s_zeroex_fill_watcher) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[676], &__pyx_n_s_zip) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_6_0 = PyFloat_FromDouble(6.0); if (unlikely(!__pyx_float_6_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1e18 = PyFloat_FromDouble(1e18); if (unlikely(!__pyx_float_1e18)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_30_0 = PyFloat_FromDouble(30.0); if (unlikely(!__pyx_float_30_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_60_0 = PyFloat_FromDouble(60.0); if (unlikely(!__pyx_float_60_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_120 = PyInt_FromLong(120); if (unlikely(!__pyx_int_120)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201 = PyInt_FromLong(201); if (unlikely(!__pyx_int_201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_502 = PyInt_FromLong(502); if (unlikely(!__pyx_int_502)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = &__pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base = *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_tick;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_buy = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_buy;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_sell = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_sell;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_cancel = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_cancel;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_stop_tracking_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_stop_tracking_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_get_order_price_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_price_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_get_order_size_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_size_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.__pyx_base.c_quantize_order_amount = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_quantize_order_amount;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.c_get_order_book = (struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_order_book;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.__pyx_base.c_get_fee = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_fee;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.c_start_tracking_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *, PyObject *, int, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_limit_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.c_start_tracking_market_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_start_tracking_market_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.c_expire_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, int))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_expire_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.c_check_and_remove_expired_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_check_and_remove_expired_orders;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.c_get_orders_for_amount_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_c_get_orders_for_amount_price;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange_spec, __pyx_t_2); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  #else
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_base = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BambooRelayExchange, __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BambooRelayExchange, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, __pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange;
  #endif
  __pyx_t_2 = PyImport_ImportModule("hummingbot.core.data_type.transaction_tracker"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = __Pyx_ImportType(__pyx_t_2, "hummingbot.core.data_type.transaction_tracker", "TransactionTracker", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = &__pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.__pyx_base.c_did_timeout_tx = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_c_did_timeout_tx;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_base = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BambooRelayTransactionTracker, __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BambooRelayTransactionTracker, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayTransactionTracker;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets)) __PYX_ERR(0, 358, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct__get_active_exchange_markets;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop)) __PYX_ERR(0, 361, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop) < 0) __PYX_ERR(0, 361, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_1__status_polling_loop;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market)) __PYX_ERR(0, 484, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_2_list_market;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules)) __PYX_ERR(0, 488, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_3__update_trading_rules;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders)) __PYX_ERR(0, 517, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_4_get_account_orders;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders)) __PYX_ERR(0, 522, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_5_get_orders;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates)) __PYX_ERR(0, 528, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_6__get_order_updates;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status)) __PYX_ERR(0, 655, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_7__update_limit_order_status;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status)) __PYX_ERR(0, 837, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_8__update_market_order_status;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop)) __PYX_ERR(0, 920, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_9__approval_tx_polling_loop;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request)) __PYX_ERR(0, 940, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_10__api_request;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order)) __PYX_ERR(0, 1043, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_11_submit_market_order;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order)) __PYX_ERR(0, 1169, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_12_submit_limit_order;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all)) __PYX_ERR(0, 1287, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_13_cancel_all;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade)) __PYX_ERR(0, 1382, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_14_execute_trade;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order)) __PYX_ERR(0, 1550, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order) < 0) __PYX_ERR(0, 1550, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_15_cancel_order;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders)) __PYX_ERR(0, 1629, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders) < 0) __PYX_ERR(0, 1629, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_16_list_account_orders;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network)) __PYX_ERR(0, 1648, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network) < 0) __PYX_ERR(0, 1648, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_17_start_network;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network)) __PYX_ERR(0, 1669, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network) < 0) __PYX_ERR(0, 1669, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_18_stop_network;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network)) __PYX_ERR(0, 1672, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network) < 0) __PYX_ERR(0, 1672, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network = &__pyx_type_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange___pyx_scope_struct_19_check_network;
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(6, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(7, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(7, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(9, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(12, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(13, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.in_flight_order_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.in_flight_order_base", "InFlightOrderBase", sizeof(struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order", "BambooRelayInFlightOrder", sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_28bamboo_relay_in_flight_order_BambooRelayInFlightOrder) __PYX_ERR(15, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.trading_rule"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.trading_rule", "TradingRule", sizeof(struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_bamboo_relay_exchange(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_bamboo_relay_exchange},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "bamboo_relay_exchange",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initbamboo_relay_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initbamboo_relay_exchange(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_bamboo_relay_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_bamboo_relay_exchange(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_bamboo_relay_exchange(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'bamboo_relay_exchange' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("bamboo_relay_exchange", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_bamboo_relay_exchange(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__connector__exchange__bamboo_relay__bamboo_relay_exchange) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange")) {
      if (unlikely((PyDict_SetItemString(modules, "hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1
 * import aiohttp             # <<<<<<<<<<<<<<
 * import asyncio
 * from async_timeout import timeout
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_aiohttp, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_aiohttp, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":2
 * import aiohttp
 * import asyncio             # <<<<<<<<<<<<<<
 * from async_timeout import timeout
 * from collections import (
 */
  __pyx_t_1 = __Pyx_patch_asyncio(__Pyx_ImportDottedModule(__pyx_n_s_asyncio, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asyncio, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":3
 * import aiohttp
 * import asyncio
 * from async_timeout import timeout             # <<<<<<<<<<<<<<
 * from collections import (
 *     deque,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_timeout);
  __Pyx_GIVEREF(__pyx_n_s_timeout);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_timeout);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_async_timeout, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timeout, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":5
 * from async_timeout import timeout
 * from collections import (
 *     deque,             # <<<<<<<<<<<<<<
 *     OrderedDict
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_deque);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_OrderedDict);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":4
 * import asyncio
 * from async_timeout import timeout
 * from collections import (             # <<<<<<<<<<<<<<
 *     deque,
 *     OrderedDict
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":8
 *     OrderedDict
 * )
 * import copy             # <<<<<<<<<<<<<<
 * import logging
 * import math
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_copy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":9
 * )
 * import copy
 * import logging             # <<<<<<<<<<<<<<
 * import math
 * import time
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":10
 * import copy
 * import logging
 * import math             # <<<<<<<<<<<<<<
 * import time
 * from typing import (
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_math, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":11
 * import logging
 * import math
 * import time             # <<<<<<<<<<<<<<
 * from typing import (
 *     Any,
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_time, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":13
 * import time
 * from typing import (
 *     Any,             # <<<<<<<<<<<<<<
 *     Dict,
 *     List,
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Any);
  __Pyx_GIVEREF(__pyx_n_s_Any);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Any);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Optional);
  __Pyx_GIVEREF(__pyx_n_s_Optional);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_Optional);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_Tuple);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":12
 * import math
 * import time
 * from typing import (             # <<<<<<<<<<<<<<
 *     Any,
 *     Dict,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Any); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Optional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Optional, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":20
 * )
 * from decimal import (
 *     ROUND_FLOOR,             # <<<<<<<<<<<<<<
 *     Decimal
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ROUND_FLOOR);
  __Pyx_GIVEREF(__pyx_n_s_ROUND_FLOOR);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ROUND_FLOOR);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Decimal);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":19
 *     Tuple
 * )
 * from decimal import (             # <<<<<<<<<<<<<<
 *     ROUND_FLOOR,
 *     Decimal
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ROUND_FLOOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ROUND_FLOOR, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":23
 *     Decimal
 * )
 * from eth_utils import remove_0x_prefix             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int64_t
 * from web3 import Web3
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_remove_0x_prefix);
  __Pyx_GIVEREF(__pyx_n_s_remove_0x_prefix);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_remove_0x_prefix);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_eth_utils, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_remove_0x_prefix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_remove_0x_prefix, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":25
 * from eth_utils import remove_0x_prefix
 * from libc.stdint cimport int64_t
 * from web3 import Web3             # <<<<<<<<<<<<<<
 * from web3.exceptions import TransactionNotFound
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Web3);
  __Pyx_GIVEREF(__pyx_n_s_Web3);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Web3);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_web3, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Web3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Web3, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":26
 * from libc.stdint cimport int64_t
 * from web3 import Web3
 * from web3.exceptions import TransactionNotFound             # <<<<<<<<<<<<<<
 * 
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TransactionNotFound);
  __Pyx_GIVEREF(__pyx_n_s_TransactionNotFound);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TransactionNotFound);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_web3_exceptions, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TransactionNotFound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TransactionNotFound, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":28
 * from web3.exceptions import TransactionNotFound
 * 
 * from hummingbot.core.data_type.cancellation_result import CancellationResult             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CancellationResult);
  __Pyx_GIVEREF(__pyx_n_s_CancellationResult);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CancellationResult);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancellationResult, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":29
 * 
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LimitOrder);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LimitOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LimitOrder, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":32
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (
 *     MarketEvent,             # <<<<<<<<<<<<<<
 *     BuyOrderCreatedEvent,
 *     SellOrderCreatedEvent,
 */
  __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketEvent);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_SellOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_SellOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_OrderExpiredEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderExpiredEvent);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_OrderExpiredEvent);
  __Pyx_INCREF(__pyx_n_s_OrderFilledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderFilledEvent);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_OrderFilledEvent);
  __Pyx_INCREF(__pyx_n_s_OrderCancelledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderCancelledEvent);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_OrderCancelledEvent);
  __Pyx_INCREF(__pyx_n_s_MarketOrderFailureEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketOrderFailureEvent);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_MarketOrderFailureEvent);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_TradeType);
  __Pyx_INCREF(__pyx_n_s_TradeFee);
  __Pyx_GIVEREF(__pyx_n_s_TradeFee);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_TradeFee);
  __Pyx_INCREF(__pyx_n_s_ZeroExFillEvent);
  __Pyx_GIVEREF(__pyx_n_s_ZeroExFillEvent);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_ZeroExFillEvent);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":31
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     MarketEvent,
 *     BuyOrderCreatedEvent,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketEvent, __pyx_t_2) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderExpiredEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderExpiredEvent, __pyx_t_2) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderFilledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderCancelledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketOrderFailureEvent, __pyx_t_2) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeFee, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ZeroExFillEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZeroExFillEvent, __pyx_t_2) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":46
 * )
 * from hummingbot.core.utils.async_utils import (
 *     safe_ensure_future,             # <<<<<<<<<<<<<<
 *     safe_gather,
 * )
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_safe_ensure_future);
  __Pyx_GIVEREF(__pyx_n_s_safe_ensure_future);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_safe_ensure_future);
  __Pyx_INCREF(__pyx_n_s_safe_gather);
  __Pyx_GIVEREF(__pyx_n_s_safe_gather);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_safe_gather);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":45
 *     ZeroExFillEvent
 * )
 * from hummingbot.core.utils.async_utils import (             # <<<<<<<<<<<<<<
 *     safe_ensure_future,
 *     safe_gather,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_async_util, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_ensure_future, __pyx_t_1) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_safe_gather); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_gather, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":49
 *     safe_gather,
 * )
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.logger import HummingbotLogger
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_api_order_book_data_source import BambooRelayAPIOrderBookDataSource
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":50
 * )
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.logger import HummingbotLogger             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_api_order_book_data_source import BambooRelayAPIOrderBookDataSource
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order cimport BambooRelayInFlightOrder
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_HummingbotLogger);
  __Pyx_GIVEREF(__pyx_n_s_HummingbotLogger);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_HummingbotLogger);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_logger, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_HummingbotLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HummingbotLogger, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":51
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.logger import HummingbotLogger
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_api_order_book_data_source import BambooRelayAPIOrderBookDataSource             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order cimport BambooRelayInFlightOrder
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_order_book_tracker import BambooRelayOrderBookTracker
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BambooRelayAPIOrderBookDataSourc);
  __Pyx_GIVEREF(__pyx_n_s_BambooRelayAPIOrderBookDataSourc);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BambooRelayAPIOrderBookDataSourc);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba_2, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BambooRelayAPIOrderBookDataSourc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BambooRelayAPIOrderBookDataSourc, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":53
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_api_order_book_data_source import BambooRelayAPIOrderBookDataSource
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_in_flight_order cimport BambooRelayInFlightOrder
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_order_book_tracker import BambooRelayOrderBookTracker             # <<<<<<<<<<<<<<
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.connector.exchange_base import ExchangeBase
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BambooRelayOrderBookTracker);
  __Pyx_GIVEREF(__pyx_n_s_BambooRelayOrderBookTracker);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BambooRelayOrderBookTracker);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba_3, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BambooRelayOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BambooRelayOrderBookTracker, __pyx_t_1) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":55
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_order_book_tracker import BambooRelayOrderBookTracker
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import OrderType
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba_4, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":57
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import OrderType             # <<<<<<<<<<<<<<
 * from hummingbot.wallet.ethereum.ethereum_chain import EthereumChain
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderType);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":58
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import OrderType
 * from hummingbot.wallet.ethereum.ethereum_chain import EthereumChain             # <<<<<<<<<<<<<<
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_custom_utils_v3 import (
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_EthereumChain);
  __Pyx_GIVEREF(__pyx_n_s_EthereumChain);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_EthereumChain);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_ether, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_EthereumChain); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EthereumChain, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":59
 * from hummingbot.core.event.events import OrderType
 * from hummingbot.wallet.ethereum.ethereum_chain import EthereumChain
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet             # <<<<<<<<<<<<<<
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_custom_utils_v3 import (
 *     fix_signature,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Web3Wallet);
  __Pyx_GIVEREF(__pyx_n_s_Web3Wallet);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Web3Wallet);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_web3, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Web3Wallet); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Web3Wallet, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":61
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_custom_utils_v3 import (
 *     fix_signature,             # <<<<<<<<<<<<<<
 *     generate_order_hash_hex,
 *     jsdict_order_to_struct,
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_fix_signature);
  __Pyx_GIVEREF(__pyx_n_s_fix_signature);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_fix_signature);
  __Pyx_INCREF(__pyx_n_s_generate_order_hash_hex);
  __Pyx_GIVEREF(__pyx_n_s_generate_order_hash_hex);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_generate_order_hash_hex);
  __Pyx_INCREF(__pyx_n_s_jsdict_order_to_struct);
  __Pyx_GIVEREF(__pyx_n_s_jsdict_order_to_struct);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_jsdict_order_to_struct);
  __Pyx_INCREF(__pyx_n_s_Order);
  __Pyx_GIVEREF(__pyx_n_s_Order);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Order);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":60
 * from hummingbot.wallet.ethereum.ethereum_chain import EthereumChain
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_custom_utils_v3 import (             # <<<<<<<<<<<<<<
 *     fix_signature,
 *     generate_order_hash_hex,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_zero, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_fix_signature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fix_signature, __pyx_t_2) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_generate_order_hash_hex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generate_order_hash_hex, __pyx_t_2) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_jsdict_order_to_struct); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jsdict_order_to_struct, __pyx_t_2) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZeroExOrder, __pyx_t_2) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":66
 *     Order as ZeroExOrder
 * )
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_exchange_v3 import ZeroExExchange             # <<<<<<<<<<<<<<
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_coordinator_v3 import ZeroExCoordinator
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_constants import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ZeroExExchange);
  __Pyx_GIVEREF(__pyx_n_s_ZeroExExchange);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ZeroExExchange);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_zero_2, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZeroExExchange); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZeroExExchange, __pyx_t_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":67
 * )
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_exchange_v3 import ZeroExExchange
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_coordinator_v3 import ZeroExCoordinator             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_constants import (
 *     BAMBOO_RELAY_REST_ENDPOINT,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ZeroExCoordinator);
  __Pyx_GIVEREF(__pyx_n_s_ZeroExCoordinator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ZeroExCoordinator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_zero_3, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ZeroExCoordinator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZeroExCoordinator, __pyx_t_2) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":69
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_coordinator_v3 import ZeroExCoordinator
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_constants import (
 *     BAMBOO_RELAY_REST_ENDPOINT,             # <<<<<<<<<<<<<<
 *     BAMBOO_RELAY_TEST_ENDPOINT,
 *     ZERO_EX_MAINNET_ERC20_PROXY,
 */
  __pyx_t_1 = PyList_New(27); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_TEST_ERC20_PROXY);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_ZERO_EX_TEST_ERC20_PROXY);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS);
  __Pyx_INCREF(__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR);
  __Pyx_GIVEREF(__pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT);
  __Pyx_INCREF(__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT);
  __Pyx_GIVEREF(__pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":68
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_exchange_v3 import ZeroExExchange
 * from hummingbot.wallet.ethereum.zero_ex.zero_ex_coordinator_v3 import ZeroExCoordinator
 * from hummingbot.connector.exchange.bamboo_relay.bamboo_relay_constants import (             # <<<<<<<<<<<<<<
 *     BAMBOO_RELAY_REST_ENDPOINT,
 *     BAMBOO_RELAY_TEST_ENDPOINT,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba_5, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_REST_ENDPOINT, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_TEST_ENDPOINT, __pyx_t_1) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_MAINNET_ERC20_PROXY, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_MAINNET_EXCHANGE_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_ADDR, __pyx_t_1) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_MAINNET_COORDINATOR_REGI, __pyx_t_1) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_ROPSTEN_ERC20_PROXY, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_ROPSTEN_EXCHANGE_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_ADDR, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_ROPSTEN_COORDINATOR_REGI, __pyx_t_1) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_RINKEBY_ERC20_PROXY, __pyx_t_1) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_RINKEBY_EXCHANGE_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_ADDR, __pyx_t_1) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_RINKEBY_COORDINATOR_REGI, __pyx_t_1) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_KOVAN_ERC20_PROXY, __pyx_t_1) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_KOVAN_EXCHANGE_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_ADDRES, __pyx_t_1) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_KOVAN_COORDINATOR_REGIST, __pyx_t_1) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_ERC20_PROXY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_TEST_ERC20_PROXY, __pyx_t_1) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_TEST_EXCHANGE_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_ADDRESS, __pyx_t_1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZERO_EX_TEST_COORDINATOR_REGISTR, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_MAINNET_FEE_RECIPIE, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_ROPSTEN_FEE_RECIPIE, __pyx_t_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_RINKEBY_FEE_RECIPIE, __pyx_t_1) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_KOVAN_FEE_RECIPIENT, __pyx_t_1) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BAMBOO_RELAY_TEST_FEE_RECIPIENT, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":97
 *     BAMBOO_RELAY_TEST_FEE_RECIPIENT_ADDRESS
 * )
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_tracking_nonce);
  __Pyx_GIVEREF(__pyx_n_s_get_tracking_nonce);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_tracking_nonce);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_tracking_nonce, __pyx_t_2) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":98
 * )
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 * from hummingbot.core.utils.estimate_fee import estimate_fee             # <<<<<<<<<<<<<<
 * 
 * brm_logger = None
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_estimate_fee);
  __Pyx_GIVEREF(__pyx_n_s_estimate_fee);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_estimate_fee);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_estimate_fee, __pyx_t_1) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":100
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * 
 * brm_logger = None             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_brm_logger, Py_None) < 0) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":101
 * 
 * brm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("NaN")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_1) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":102
 * brm_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")             # <<<<<<<<<<<<<<
 * 
 * cdef class BambooRelayTransactionTracker(TransactionTracker):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_NaN, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayTransactionTracker_2, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_29BambooRelayTransactionTracker_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayTransactionTracker_3, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":118
 * 
 * cdef class BambooRelayExchange(ExchangeBase):
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value             # <<<<<<<<<<<<<<
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ReceivedAsset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":119
 * cdef class BambooRelayExchange(ExchangeBase):
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value             # <<<<<<<<<<<<<<
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuyOrderCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT, __pyx_t_2) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":120
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SellOrderCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN, __pyx_t_2) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":121
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":122
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":123
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value             # <<<<<<<<<<<<<<
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":124
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value             # <<<<<<<<<<<<<<
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     MARKET_ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuyOrderCreated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_t_2) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":125
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SellOrderCreated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_t_2) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":126
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     MARKET_ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value             # <<<<<<<<<<<<<<
 * 
 *     API_CALL_TIMEOUT = 10.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderExpired); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_MARKET_ORDER_EXPIRED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":128
 *     MARKET_ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 * 
 *     API_CALL_TIMEOUT = 10.0             # <<<<<<<<<<<<<<
 *     CANCEL_EXPIRY_TIME = 60.0
 *     ORDER_EXPIRY_TIME = 60.0 * 15
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_API_CALL_TIMEOUT, __pyx_float_10_0) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":129
 * 
 *     API_CALL_TIMEOUT = 10.0
 *     CANCEL_EXPIRY_TIME = 60.0             # <<<<<<<<<<<<<<
 *     ORDER_EXPIRY_TIME = 60.0 * 15
 *     PRE_EMPTIVE_SOFT_CANCEL_TIME = 30.0
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_CANCEL_EXPIRY_TIME, __pyx_float_60_0) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":130
 *     API_CALL_TIMEOUT = 10.0
 *     CANCEL_EXPIRY_TIME = 60.0
 *     ORDER_EXPIRY_TIME = 60.0 * 15             # <<<<<<<<<<<<<<
 *     PRE_EMPTIVE_SOFT_CANCEL_TIME = 30.0
 *     ORDER_CREATION_BACKOFF_TIME = 3
 */
  __pyx_t_2 = PyFloat_FromDouble((60.0 * 15.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_ORDER_EXPIRY_TIME, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":131
 *     CANCEL_EXPIRY_TIME = 60.0
 *     ORDER_EXPIRY_TIME = 60.0 * 15
 *     PRE_EMPTIVE_SOFT_CANCEL_TIME = 30.0             # <<<<<<<<<<<<<<
 *     ORDER_CREATION_BACKOFF_TIME = 3
 *     UPDATE_RULES_INTERVAL = 60.0
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_PRE_EMPTIVE_SOFT_CANCEL_TIME, __pyx_float_30_0) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":132
 *     ORDER_EXPIRY_TIME = 60.0 * 15
 *     PRE_EMPTIVE_SOFT_CANCEL_TIME = 30.0
 *     ORDER_CREATION_BACKOFF_TIME = 3             # <<<<<<<<<<<<<<
 *     UPDATE_RULES_INTERVAL = 60.0
 *     UPDATE_OPEN_LIMIT_ORDERS_INTERVAL = 10.0
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_ORDER_CREATION_BACKOFF_TIME, __pyx_int_3) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":133
 *     PRE_EMPTIVE_SOFT_CANCEL_TIME = 30.0
 *     ORDER_CREATION_BACKOFF_TIME = 3
 *     UPDATE_RULES_INTERVAL = 60.0             # <<<<<<<<<<<<<<
 *     UPDATE_OPEN_LIMIT_ORDERS_INTERVAL = 10.0
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_UPDATE_RULES_INTERVAL, __pyx_float_60_0) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":134
 *     ORDER_CREATION_BACKOFF_TIME = 3
 *     UPDATE_RULES_INTERVAL = 60.0
 *     UPDATE_OPEN_LIMIT_ORDERS_INTERVAL = 10.0             # <<<<<<<<<<<<<<
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_UPDATE_OPEN_LIMIT_ORDERS_INTERVA, __pyx_float_10_0) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":135
 *     UPDATE_RULES_INTERVAL = 60.0
 *     UPDATE_OPEN_LIMIT_ORDERS_INTERVAL = 10.0
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_UPDATE_MARKET_ORDERS_INTERVAL, __pyx_float_10_0) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":137
 *     UPDATE_MARKET_ORDERS_INTERVAL = 10.0
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global brm_logger
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_HummingbotLogger) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_1logger, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_logger, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":325
 *         return {**self.in_flight_limit_orders, **self.in_flight_market_orders}
 * 
 *     def reset_state(self):             # <<<<<<<<<<<<<<
 *         self._in_flight_market_orders = {}
 *         self._in_flight_limit_orders = {}
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_5reset_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_reset_state, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_reset_state, __pyx_t_2) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":333
 *         self._order_expiry_queue = deque()
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         # ignore saved orders that may not reflect current version schema
 *         try:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_saved_states, __pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_7restore_tracking_states, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_restore_trac, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_restore_tracking_states, __pyx_t_1) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":358
 *             self.logger().error(f"Error restoring tracking states.", exc_info=True)
 * 
 *     async def get_active_exchange_markets(self):             # <<<<<<<<<<<<<<
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_9get_active_exchange_markets, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_get_active_e, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_active_exchange_markets, __pyx_t_1) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":361
 *         return await BambooRelayAPIOrderBookDataSource.get_active_exchange_markets(self._api_endpoint, self._api_prefix)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_12_status_polling_loop, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__status_poll, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_status_polling_loop, __pyx_t_1) < 0) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":428
 *         return estimate_fee("bamboo_relay", is_maker)
 * 
 *     def _update_balances(self):             # <<<<<<<<<<<<<<
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_15_update_balances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange__update_bala, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_balances, __pyx_t_1) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":431
 *         self._account_balances = self.wallet.get_all_balances().copy()
 * 
 *     def _update_available_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_17_update_available_balances, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange__update_avai, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_available_balances, __pyx_t_1) < 0) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":484
 *             self._last_update_available_balance_timestamp = current_timestamp
 * 
 *     async def list_market(self) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/markets?perPage=1000&include=base"
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_19list_market, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_list_market, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_list_market, __pyx_t_2) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":488
 *         return await self._api_request(http_method="get", url=url, headers={"User-Agent": "hummingbot"})
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_22_update_trading_rules, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__update_trad, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_trading_rules, __pyx_t_2) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":500
 *             self._last_update_trading_rules_timestamp = current_timestamp
 * 
 *     def _format_trading_rules(self, markets: List[Dict[str, Any]]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_markets, __pyx_kp_s_List_Dict_str_Any) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_List_TradingRule) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_25_format_trading_rules, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange__format_trad, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_format_trading_rules, __pyx_t_1) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":517
 *         return retval
 * 
 *     async def get_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request(http_method="get",
 *                                        url=f"{BAMBOO_RELAY_REST_ENDPOINT}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders",
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_Dict_str_Any) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_27get_account_orders, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_get_account, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_account_orders, __pyx_t_2) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":522
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def get_orders(self, order_hashes: List[str]) -> Dict[str, Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         return await self._api_request("post",
 *                                        url=f"{self._api_endpoint}{self._api_prefix}/orders/hashes",
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order_hashes, __pyx_kp_s_List_str) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_Dict_str_Dict_str_Any) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_30get_orders, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_get_orders, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_orders, __pyx_t_1) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":528
 *                                        headers={"User-Agent": "hummingbot"})
 * 
 *     async def _get_order_updates(self, tracked_limit_orders: List[BambooRelayInFlightOrder]) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder tracked_limit_order
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tracked_limit_orders, __pyx_kp_s_List_BambooRelayInFlightOrder) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_Dict_str_Any) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_33_get_order_updates, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__get_order_u, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_order_updates, __pyx_t_2) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":560
 * 
 *     # Single order update, i.e. via RPC logs instead of market API
 *     def _update_single_limit_order(self, fill_event: ZeroExFillEvent):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fill_event, __pyx_n_s_ZeroExFillEvent) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_36_update_single_limit_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange__update_sing, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_single_limit_order, __pyx_t_1) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":655
 *                 return
 * 
 *     async def _update_limit_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_38_update_limit_order_status, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__update_limi, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_limit_order_status, __pyx_t_1) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":837
 *         self._last_update_limit_order_timestamp = current_timestamp
 * 
 *     async def _update_market_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double current_timestamp = self._current_timestamp
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_41_update_market_order_status, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__update_mark, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_update_market_order_status, __pyx_t_1) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":920
 *         self._last_update_market_order_timestamp = current_timestamp
 * 
 *     async def _approval_tx_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while len(self._pending_approval_tx_hashes) > 0:
 *             try:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_44_approval_tx_polling_loop, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__approval_tx, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_approval_tx_polling_loop, __pyx_t_1) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":940
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            url: str,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_http_method, __pyx_n_s_str) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_url, __pyx_n_s_str) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_kp_s_Optional_Dict_str_Any) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_headers, __pyx_kp_s_Optional_Dict_str_str) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_47_api_request, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange__api_request, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__84);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_api_request, __pyx_t_2) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":968
 *                                       f"HTTP status is {response.status} - {response_text}.")
 * 
 *     def get_order_hash_hex(self, unsigned_order: Dict[str, Any]) -> str:             # <<<<<<<<<<<<<<
 *         order_struct = jsdict_order_to_struct(unsigned_order)
 *         order_hash_hex = "0x" + generate_order_hash_hex(
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_unsigned_order, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_50get_order_hash_hex, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_order_ha, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_order_hash_hex, __pyx_t_1) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":977
 *         return order_hash_hex
 * 
 *     def get_zero_ex_signature(self, order_hash_hex: str) -> str:             # <<<<<<<<<<<<<<
 *         signature = self._wallet.current_backend.sign_hash(hexstr=order_hash_hex)
 *         fixed_signature = fix_signature(self._provider,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_hash_hex, __pyx_n_s_str) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_52get_zero_ex_signature, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_zero_ex, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_zero_ex_signature, __pyx_t_2) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1043
 *         return found_orders
 * 
 *     async def submit_market_order(self,             # <<<<<<<<<<<<<<
 *                                   trading_pair: str,
 *                                   trade_type: TradeType,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trade_type, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_Tuple_Decimal_Decimal_str_int_bo) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_54submit_market_order, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_submit_marke, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_submit_market_order, __pyx_t_1) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1169
 *         return total_base_token_amount, calculated_price, tx_hash, protocol_fee, is_coordinated
 * 
 *     async def submit_limit_order(self,             # <<<<<<<<<<<<<<
 *                                  trading_pair: str,
 *                                  trade_type: TradeType,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trade_type, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_coordinated, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_expires, __pyx_n_s_int) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_Tuple_str_ZeroExOrder) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_57submit_limit_order, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_submit_limit, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_submit_limit_order, __pyx_t_2) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1287
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             int order_timestamp_diff
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_timeout_seconds, __pyx_n_s_float) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_List_CancellationResult) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_60cancel_all, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_cancel_all, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_cancel_all, __pyx_t_1) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1382
 *         return [CancellationResult(oid, False) for oid in incomplete_order_ids]
 * 
 *     async def execute_trade(self,             # <<<<<<<<<<<<<<
 *                             order_id: str,
 *                             order_type: OrderType,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trade_type, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_expires, __pyx_n_s_int) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_63execute_trade, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_execute_trad, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_execute_trade, __pyx_t_2) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1493
 *                    str trading_pair,
 *                    object amount,
 *                    object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                    object price=s_decimal_NaN,
 *                    dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__31 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1494
 *                    object amount,
 *                    object order_type=OrderType.MARKET,
 *                    object price=s_decimal_NaN,             # <<<<<<<<<<<<<<
 *                    dict kwargs={}):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__32 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1495
 *                    object order_type=OrderType.MARKET,
 *                    object price=s_decimal_NaN,
 *                    dict kwargs={}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__33 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1523
 *                     str trading_pair,
 *                     object amount,
 *                     object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                     object price=s_decimal_NaN,
 *                     dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__34 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1524
 *                     object amount,
 *                     object order_type=OrderType.MARKET,
 *                     object price=s_decimal_NaN,             # <<<<<<<<<<<<<<
 *                     dict kwargs={}):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__35 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1525
 *                     object order_type=OrderType.MARKET,
 *                     object price=s_decimal_NaN,
 *                     dict kwargs={}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__36 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1550
 *         return order_id
 * 
 *     async def cancel_order(self, client_order_id: str) -> CancellationResult:             # <<<<<<<<<<<<<<
 *         cdef:
 *             BambooRelayInFlightOrder order = self._in_flight_limit_orders.get(client_order_id)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_client_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 1550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_CancellationResult) < 0) __PYX_ERR(0, 1550, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_66cancel_order, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_cancel_order, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_cancel_order, __pyx_t_1) < 0) __PYX_ERR(0, 1550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1619
 *                 )
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1619, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1619, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1619, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_69get_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_price, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_price, __pyx_t_2) < 0) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1622
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def get_tx_hash_receipt(self, tx_hash: str) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 *         try:
 *             tx_hash_receipt = self._w3.eth.getTransactionReceipt(tx_hash)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tx_hash, __pyx_n_s_str) < 0) __PYX_ERR(0, 1622, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 1622, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_71get_tx_hash_receipt, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_tx_hash, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_tx_hash_receipt, __pyx_t_1) < 0) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1629
 *             return None
 * 
 *     async def list_account_orders(self) -> List[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         url = f"{self._api_endpoint}{self._api_prefix}/accounts/{self._wallet.address.lower()}/orders"
 *         response_data = await self._api_request("get", url=url, headers={"User-Agent": "hummingbot"})
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_Dict_str_Any) < 0) __PYX_ERR(0, 1629, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_73list_account_orders, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_list_account, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_list_account_orders, __pyx_t_2) < 0) __PYX_ERR(0, 1629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1634
 *         return response_data
 * 
 *     def wrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.wrap_eth(amount)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_amount, __pyx_n_s_float) < 0) __PYX_ERR(0, 1634, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1634, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_76wrap_eth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_wrap_eth, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_wrap_eth, __pyx_t_1) < 0) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1637
 *         return self._wallet.wrap_eth(amount)
 * 
 *     def unwrap_eth(self, amount: float) -> str:             # <<<<<<<<<<<<<<
 *         return self._wallet.unwrap_eth(amount)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_float) < 0) __PYX_ERR(0, 1637, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1637, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_78unwrap_eth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_unwrap_eth, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_unwrap_eth, __pyx_t_2) < 0) __PYX_ERR(0, 1637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1648
 *         return order_books[trading_pair]
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_80start_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_start_networ, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_start_network, __pyx_t_2) < 0) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1659
 *             self._approval_tx_polling_task = safe_ensure_future(self._approval_tx_polling_loop())
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_83_stop_network, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange__stop_networ, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_stop_network, __pyx_t_2) < 0) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1669
 *         self._status_polling_task = self._approval_tx_polling_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_85stop_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_stop_network, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_stop_network_2, __pyx_t_2) < 0) __PYX_ERR(0, 1669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1672
 *         self._stop_network()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         if self._wallet.network_status is not NetworkStatus.CONNECTED:
 *             return NetworkStatus.NOT_CONNECTED
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1672, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_88check_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BambooRelayExchange_check_networ, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_check_network, __pyx_t_1) < 0) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1790
 *         return max(decimals_quantum, precision_quantum)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__108 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1802
 *         return quantized_amount
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1802, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1802, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1802, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_91get_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_price, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_price, __pyx_t_2) < 0) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__45 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1806
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__46 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1806
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1805
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_93buy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_buy, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_buy_2, __pyx_t_2) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__47 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1810
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__48 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1810
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1809
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_95sell, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_sell, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_sell_2, __pyx_t_2) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1813
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1813, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_client_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 1813, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_97cancel, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_cancel, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_cancel, __pyx_t_1) < 0) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1822
 *                 order_side: TradeType,
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:             # <<<<<<<<<<<<<<
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__49 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1816
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_base_currency, __pyx_n_s_str) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_quote_currency, __pyx_n_s_str) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_side, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_TradeFee) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_99get_fee, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_fee, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_fee, __pyx_t_3) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1825
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_OrderBook) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_101get_order_book, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange_get_order_bo, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange->tp_dict, __pyx_n_s_get_order_book, __pyx_t_1) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_BambooRelayExchange);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_103__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange___reduce_cyt, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_12bamboo_relay_21bamboo_relay_exchange_19BambooRelayExchange_105__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BambooRelayExchange___setstate_c, NULL, __pyx_n_s_hummingbot_connector_exchange_ba, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bamboo_relay/bamboo_relay_exchange.pyx":1
 * import aiohttp             # <<<<<<<<<<<<<<
 * import asyncio
 * from async_timeout import timeout
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.connector.exchange.bamboo_relay.bamboo_relay_exchange");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseMappingExpected */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg) {
    __Pyx_TypeName arg_type_name = __Pyx_PyType_GetName(Py_TYPE(arg));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not a mapping", arg_type_name);
    __Pyx_DECREF_TypeName(arg_type_name);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Coroutine */
static void __Pyx_CoroutineAwait_dealloc(PyObject *self) {
    PyObject_GC_UnTrack(self);
    Py_CLEAR(((__pyx_CoroutineAwaitObject*)self)->coroutine);
    PyObject_GC_Del(self);
}
static int __Pyx_CoroutineAwait_traverse(__pyx_CoroutineAwaitObject *self, visitproc visit, void *arg) {
    Py_VISIT(self->coroutine);
    return 0;
}
static int __Pyx_CoroutineAwait_clear(__pyx_CoroutineAwaitObject *self) {
    Py_CLEAR(self->coroutine);
    return 0;
}
static PyObject *__Pyx_CoroutineAwait_Next(__pyx_CoroutineAwaitObject *self) {
    return __Pyx_Generator_Next(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_Send(__pyx_CoroutineAwaitObject *self, PyObject *value) {
    return __Pyx_Coroutine_Send(self->coroutine, value);
}
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args) {
    return __Pyx_Coroutine_Throw(self->coroutine, args);
}
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_self(PyObject *self) {
    Py_INCREF(self);
    return self;
}
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_CoroutineAwait_no_new(PyTypeObject *type, PyObject *args, PyObject *kwargs) {
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(args);
    CYTHON_UNUSED_VAR(kwargs);
    PyErr_SetString(PyExc_TypeError, "cannot instantiate type, use 'await coroutine' instead");
    return NULL;
}
#endif
static PyMethodDef __pyx_CoroutineAwait_methods[] = {
    {"send", (PyCFunction) __Pyx_CoroutineAwait_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_CoroutineAwait_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_CoroutineAwait_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_CoroutineAwaitType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "coroutine_wrapper",
    sizeof(__pyx_CoroutineAwaitObject),
    0,
    (destructor) __Pyx_CoroutineAwait_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("A wrapper object implementing __await__ for coroutines."),
    (traverseproc) __Pyx_CoroutineAwait_traverse,
    (inquiry) __Pyx_CoroutineAwait_clear,
    0,
    0,
    __Pyx_CoroutineAwait_self,
    (iternextfunc) __Pyx_CoroutineAwait_Next,
    __pyx_CoroutineAwait_methods,
    0                         ,
    0                      ,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if !CYTHON_COMPILING_IN_PYPY
    __Pyx_CoroutineAwait_no_new,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#if PY_VERSION_HEX < 0x030500B1 || defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static CYTHON_INLINE PyObject *__Pyx__Coroutine_await(PyObject *coroutine) {
    __pyx_CoroutineAwaitObject *await = PyObject_GC_New(__pyx_CoroutineAwaitObject, __pyx_CoroutineAwaitType);
    if (unlikely(!await)) return NULL;
    Py_INCREF(coroutine);
    await->coroutine = coroutine;
    PyObject_GC_Track(await);
    return (PyObject*)await;
}
#endif
#if PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_await_method(PyObject *coroutine, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static PyObject *__Pyx_Coroutine_await(PyObject *coroutine) {
    if (unlikely(!coroutine || !__Pyx_Coroutine_Check(coroutine))) {
        PyErr_SetString(PyExc_TypeError, "invalid input, expected coroutine");
        return NULL;
    }
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_compare(PyObject *obj, PyObject *other, int op) {
    PyObject* result;
    switch (op) {
        case Py_EQ: result = (other == obj) ? Py_True : Py_False; break;
        case Py_NE: result = (other != obj) ? Py_True : Py_False; break;
        default:
            result = Py_NotImplemented;
    }
    Py_INCREF(result);
    return result;
}
#endif
static PyMethodDef __pyx_Coroutine_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
#if PY_VERSION_HEX < 0x030500B1
    {"__await__", (PyCFunction) __Pyx_Coroutine_await_method, METH_NOARGS,
     (char*) PyDoc_STR("__await__() -> return an iterator to be used in await expression.")},
#endif
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Coroutine_memberlist[] = {
    {(char *) "cr_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "cr_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited, or None")},
    {(char*) "cr_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Coroutine_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the coroutine"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the coroutine"), 0},
    {(char *) "cr_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the coroutine"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __pyx_Coroutine_as_async = {
    __Pyx_Coroutine_await,
    0,
    0,
};
#endif
static PyTypeObject __pyx_CoroutineType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "coroutine",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__pyx_Coroutine_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __pyx_Coroutine_methods,
    __pyx_Coroutine_memberlist,
    __pyx_Coroutine_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_Coroutine_init(void) {
    __pyx_CoroutineType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_CoroutineType = __Pyx_FetchCommonType(&__pyx_CoroutineType_type);
    if (unlikely(!__pyx_CoroutineType))
        return -1;
#ifdef __Pyx_IterableCoroutine_USED
    if (unlikely(__pyx_IterableCoroutine_init() == -1))
        return -1;
#endif
    __pyx_CoroutineAwaitType = __Pyx_FetchCommonType(&__pyx_CoroutineAwaitType_type);
    if (unlikely(!__pyx_CoroutineAwaitType))
        return -1;
    return 0;
}

/* GetAwaitIter */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o) {
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(o)) {
        return __Pyx_NewRef(o);
    }
#endif
    return __Pyx__Coroutine_GetAwaitableIter(o);
}
static void __Pyx_Coroutine_AwaitableIterError(PyObject *source) {
#if PY_VERSION_HEX >= 0x030600B3 || defined(_PyErr_FormatFromCause)
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetName(Py_TYPE(source));
    _PyErr_FormatFromCause(PyExc_TypeError,
        "'async for' received an invalid object from __anext__: " __Pyx_FMT_TYPENAME, source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
#elif PY_MAJOR_VERSION >= 3
    PyObject *exc, *val, *val2, *tb;
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetName(Py_TYPE(source));
    assert(PyErr_Occurred());
    PyErr_Fetch(&exc, &val, &tb);
    PyErr_NormalizeException(&exc, &val, &tb);
    if (tb != NULL) {
        PyException_SetTraceback(val, tb);
        Py_DECREF(tb);
    }
    Py_DECREF(exc);
    assert(!PyErr_Occurred());
    PyErr_Format(PyExc_TypeError,
        "'async for' received an invalid object from __anext__: " __Pyx_FMT_TYPENAME, source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
    PyErr_Fetch(&exc, &val2, &tb);
    PyErr_NormalizeException(&exc, &val2, &tb);
    Py_INCREF(val);
    PyException_SetCause(val2, val);
    PyException_SetContext(val2, val);
    PyErr_Restore(exc, val2, tb);
#else
    source++;
#endif
}
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *obj) {
    PyObject *res;
#if CYTHON_USE_ASYNC_SLOTS
    __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
    if (likely(am && am->am_await)) {
        res = (*am->am_await)(obj);
    } else
#endif
#if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
    if (PyCoro_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    } else
#endif
#if CYTHON_COMPILING_IN_CPYTHON && defined(CO_ITERABLE_COROUTINE)
    if (PyGen_CheckExact(obj) && ((PyGenObject*)obj)->gi_code && ((PyCodeObject *)((PyGenObject*)obj)->gi_code)->co_flags & CO_ITERABLE_COROUTINE) {
        return __Pyx_NewRef(obj);
    } else
#endif
    {
        PyObject *method = NULL;
        int is_method = __Pyx_PyObject_GetMethod(obj, __pyx_n_s_await, &method);
        if (likely(is_method)) {
            res = __Pyx_PyObject_CallOneArg(method, obj);
        } else if (likely(method)) {
            res = __Pyx_PyObject_CallNoArg(method);
        } else
            goto slot_error;
        Py_DECREF(method);
    }
    if (unlikely(!res)) {
        __Pyx_Coroutine_AwaitableIterError(obj);
        goto bad;
    }
    if (unlikely(!PyIter_Check(res))) {
        __Pyx_TypeName res_type_name = __Pyx_PyType_GetName(Py_TYPE(res));
        PyErr_Format(PyExc_TypeError,
            "__await__() returned non-iterator of type '" __Pyx_FMT_TYPENAME "'", res_type_name);
        __Pyx_DECREF_TypeName(res_type_name);
        Py_CLEAR(res);
    } else {
        int is_coroutine = 0;
        #ifdef __Pyx_Coroutine_USED
        is_coroutine |= __Pyx_Coroutine_Check(res);
        #endif
        #if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
        is_coroutine |= PyCoro_CheckExact(res);
        #endif
        if (unlikely(is_coroutine)) {
            /* __await__ must return an *iterator*, not
               a coroutine or another awaitable (see PEP 492) */
            PyErr_SetString(PyExc_TypeError,
                            "__await__() returned a coroutine");
            Py_CLEAR(res);
        }
    }
    return res;
slot_error:
    {
        __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
        PyErr_Format(PyExc_TypeError,
            "object " __Pyx_FMT_TYPENAME " can't be used in 'await' expression", obj_type_name);
        __Pyx_DECREF_TypeName(obj_type_name);
    }
bad:
    return NULL;
}

/* CoroutineYieldFrom */
static PyObject* __Pyx__Coroutine_Yield_From_Generic(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    PyObject *source_gen = __Pyx__Coroutine_GetAwaitableIter(source);
    if (unlikely(!source_gen)) {
        return NULL;
    }
    if (__Pyx_Coroutine_Check(source_gen)) {
        retval = __Pyx_Generator_Next(source_gen);
    } else {
        retval = __Pyx_PyObject_GetIterNextFunc(source_gen)(source_gen);
    }
    if (retval) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    if (__Pyx_Coroutine_Check(source)) {
        if (unlikely(((__pyx_CoroutineObject*)source)->yieldfrom)) {
            PyErr_SetString(
                PyExc_RuntimeError,
                "coroutine is being awaited already");
            return NULL;
        }
        retval = __Pyx_Generator_Next(source);
#ifdef __Pyx_AsyncGen_USED
    } else if (__pyx_PyAsyncGenASend_CheckExact(source)) {
        retval = __Pyx_async_gen_asend_iternext(source);
#endif
    } else {
        return __Pyx__Coroutine_Yield_From_Generic(gen, source);
    }
    if (retval) {
        Py_INCREF(source);
        gen->yieldfrom = source;
    }
    return retval;
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_PYSTON
    __Pyx_PyThreadState_declare
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1)
            || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_type)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
    #endif
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            if ((PY_VERSION_HEX >= 0x030700A0)) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
static CYTHON_UNUSED double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pynumber_float */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)obj)->ob_digit;
        switch (Py_SIZE(obj)) {
            case 0:
                val = 0.0;
                goto no_error;
            case 1:
                val = (double) digits[0];
                goto no_error;
            case -1:
                val = (double) - (sdigit) digits[0];
                goto no_error;
            default:
                val = PyLong_AsDouble(obj);
        }
#else
        val = PyLong_AsDouble(obj);
#endif
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
no_error:
    return PyFloat_FromDouble(val);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ReRaiseException */
static CYTHON_INLINE void __Pyx_ReraiseException(void) {
    PyObject *type = NULL, *value = NULL, *tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    type = exc_info->exc_type;
    value = exc_info->exc_value;
    tb = exc_info->exc_traceback;
    #else
    type = tstate->exc_type;
    value = tstate->exc_value;
    tb = tstate->exc_traceback;
    #endif
#else
    PyErr_GetExcInfo(&type, &value, &tb);
#endif
    if (!type || type == Py_None) {
#if !CYTHON_FAST_THREAD_STATE
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(tb);
#endif
        PyErr_SetString(PyExc_RuntimeError,
            "No active exception to reraise");
    } else {
#if CYTHON_FAST_THREAD_STATE
        Py_INCREF(type);
        Py_XINCREF(value);
        Py_XINCREF(tb);
#endif
        PyErr_Restore(type, value, tb);
    }
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyType_Ready */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t) {
    int r;
    PyObject *bases = t->tp_bases;
    if (bases)
    {
        Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
        for (i = 1; i < n; i++)
        {
            PyObject *b0 = PyTuple_GET_ITEM(bases, i);
            PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
            if (PyClass_Check(b0))
            {
                PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                             PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
                return -1;
            }
#endif
            b = (PyTypeObject*)b0;
            if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
            {
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
            if (t->tp_dictoffset == 0 && b->tp_dictoffset)
            {
                __Pyx_TypeName t_name = __Pyx_PyType_GetName(t);
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "extension type '" __Pyx_FMT_TYPENAME "' has no __dict__ slot, "
                    "but base type '" __Pyx_FMT_TYPENAME "' has: "
                    "either add 'cdef dict __dict__' to the extension type "
                    "or add '__slots__ = [...]' to the base type",
                    t_name, b_name);
                __Pyx_DECREF_TypeName(t_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
        }
    }
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__52;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PatchInspect */
  static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* PatchAsyncIO */
  static PyObject* __Pyx_patch_asyncio(PyObject* module) {
#if PY_VERSION_HEX < 0x030500B2 &&\
        (defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED)) &&\
        (!defined(CYTHON_PATCH_ASYNCIO) || CYTHON_PATCH_ASYNCIO)
    PyObject *patch_module = NULL;
    static int asyncio_patched = 0;
    if (unlikely((!asyncio_patched) && module)) {
        PyObject *package;
        package = __Pyx_Import(__pyx_n_s_asyncio_coroutines, NULL, 0);
        if (package) {
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "coroutines"), ""
"try:\n"
"    coro_types = _module._COROUTINE_TYPES\n"
"except AttributeError: pass\n"
"else:\n"
"    if _cython_coroutine_type is not None and _cython_coroutine_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_coroutine_type,)\n"
"    if _cython_generator_type is not None and _cython_generator_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_generator_type,)\n"
"_module._COROUTINE_TYPES = coro_types\n"
            );
        } else {
            PyErr_Clear();
            package = __Pyx_Import(__pyx_n_s_asyncio_tasks, NULL, 0);
            if (unlikely(!package)) goto asyncio_done;
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "tasks"), ""
"if hasattr(_module, 'iscoroutine'):\n"
"    old_types = getattr(_module.iscoroutine, '_cython_coroutine_types', None)\n"
"    if old_types is None or not isinstance(old_types, set):\n"
"        old_types = set()\n"
"        def cy_wrap(orig_func, type=type, cython_coroutine_types=old_types):\n"
"            def cy_iscoroutine(obj): return type(obj) in cython_coroutine_types or orig_func(obj)\n"
"            cy_iscoroutine._cython_coroutine_types = cython_coroutine_types\n"
"            return cy_iscoroutine\n"
"        _module.iscoroutine = cy_wrap(_module.iscoroutine)\n"
"    if _cython_coroutine_type is not None:\n"
"        old_types.add(_cython_coroutine_type)\n"
"    if _cython_generator_type is not None:\n"
"        old_types.add(_cython_generator_type)\n"
            );
        }
        Py_DECREF(package);
        if (unlikely(!patch_module)) goto ignore;
asyncio_done:
        PyErr_Clear();
        asyncio_patched = 1;
#ifdef __Pyx_Generator_USED
        {
            PyObject *inspect_module;
            if (patch_module) {
                inspect_module = PyObject_GetAttr(patch_module, __pyx_n_s_inspect);
                Py_DECREF(patch_module);
            } else {
                inspect_module = __Pyx_Import(__pyx_n_s_inspect, NULL, 0);
            }
            if (unlikely(!inspect_module)) goto ignore;
            inspect_module = __Pyx_patch_inspect(inspect_module);
            if (unlikely(!inspect_module)) {
                Py_DECREF(module);
                module = NULL;
            }
            Py_XDECREF(inspect_module);
        }
#else
        if ((0)) return __Pyx_patch_inspect(module);
#endif
    }
    return module;
ignore:
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch asyncio package with custom generator type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    if ((0)) return __Pyx_patch_inspect(__Pyx_Coroutine_patch_module(module, NULL));
#endif
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
  static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__125));
    }
    return name;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
