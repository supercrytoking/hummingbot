// Variabiles for the pipeline
def testName = 'all stable tests'
def githubUrl = 'https://github.com/coinalpha/hummingbot'
def githubContext = 'ci/jenkins: stable tests'

// Jenkins environment variables
def path = '/root/miniconda/bin'
def envPath = '/root/miniconda/envs/hummingbot/bin'

pipeline {
  agent any

  stages {

    stage('Retrieve tooling versions') {
      steps {
        echo 'Retrieving tooling version...'

        sh 'which python'
        sh 'python --version'

        sh "which ${envPath}/python"
        sh "${envPath}/python --version"

        echo "Base hummingbot version:"
        sh "cat hummingbot/VERSION"
      }
    }

    stage('Build hummingbot') {
      steps {
        echo 'Set git commit status'
        setBuildStatus('Jenkins is building hummingbot...', 'PENDING', githubContext, githubUrl)

        echo 'Running build...'

        // Clean-up environment
        sh ". ${path}/deactivate"
        sh './uninstall'

        // Install hummingbot
        sh './install'
        sh ". ${path}/activate hummingbot"

        // ./compile
        sh "${envPath}/python setup.py build_ext --inplace"

      }

      post {
        success {
          echo "=> [Build hummingbot]: SUCCESS"
        }
        failure {
          handleResult('Build hummingbot', 'FAILURE', testName, githubContext, githubUrl)
        }
      }
    }

    stage('Run tests') {
      steps {
        echo 'Run tests'
        setBuildStatus('Jenkins is running your tests...', 'PENDING', githubContext, githubUrl)

        // make test
        sh "${envPath}/nosetests -d -v test/test*.py"
      }

      post {
        success {
          echo '=> [Run tests]: SUCCESS'
        }
        unstable {
          handleResult('Run tests', 'UNSTABLE', testName, githubContext, githubUrl)
        }
        failure {
          handleResult('Run tests', 'FAILURE', testName, githubContext, githubUrl)
        }
      }
    }

  }

  // Run after all stages
  post {
    always {
      deleteDir()
    }
    success {
      handleResult('Your tests passed on Jenkins!', 'SUCCESS', testName, githubContext, githubUrl)
    }
    failure {
      handleResult('Uh oh, your tests failed on Jenkins :(', 'FAILURE', testName, githubContext, githubUrl)
    }
    unstable {
      handleResult('Uh oh, your PR is unstable on Jenkins :(', 'FAILURE', testName, githubContext, githubUrl)
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
  }

}

// Define helper methods

void setBuildStatus(String message, String state, String context, String url) {
  step([
      $class: 'GitHubCommitStatusSetter',
      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: url],
      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],
      errorHandlers: [[$class: 'ChangingBuildStatusErrorHandler', result: 'UNSTABLE']],
      statusResultSource: [ $class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]] ]
  ]);
}

void notifyDiscord(String buildStatus = 'STARTED', String testNameInput = 'not defined', String githubUrl) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  
  // Default values
  def result = 'FAILURE'

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    buildStatus = "Initiating ${testNameInput} test... "
    result = 'UNSTABLE'
  } else if (buildStatus == 'SUCCESS') {
    buildStatus = 'Your tests passed on Jenkins!'
    result = 'SUCCESS'
  } else if (buildStatus == 'FAILED') {
    buildStatus = 'Uh oh, your tests failed on Jenkins :('
  }

  def footer
  if (env.CHANGE_ID) {
    footer = "${githubUrl}/pull/${env.CHANGE_ID}"
  }

  def subject = "**[${env.JOB_NAME} #${env.BUILD_NUMBER}]** ${buildStatus}"
  def description = "${subject}\n(${env.BUILD_URL})"

  // Send notifications
  discordSend (webhookURL: env.DISCORD_URL, description: description, result: result, link: env.BUILD_URL, footer: footer)
}

void handleResult(String label, String state, String testNameInput, String githubContext, String githubUrl) {
  echo "=> ${label}: ${state}"
  setBuildStatus("${label}", state, githubContext, githubUrl)
  notifyDiscord(state, "${testNameInput}: ${label}")
}