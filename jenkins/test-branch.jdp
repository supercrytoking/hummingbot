// Jenkins environment variables
def path = '/root/miniconda'
def envPath = "${path}/envs/hummingbot"

pipeline {
  agent any

  environment {
    GIT_COMMIT_MESSAGE = ''
    ERROR_MESSAGE = ''
  }

  stages {

    stage('Retrieve tooling versions') {
      steps {
        echo 'Retrieving tooling version...'

        sh 'which python'
        sh 'python --version'

        echo 'Base hummingbot version:'
        sh 'cat hummingbot/VERSION'

        // Get commit message
        echo 'Get commit message'
        script {
          GIT_COMMIT_MESSAGE = sh returnStdout: true, script: 'git log -1 --pretty=oneline'
          ERROR_MESSAGE = ''
        }
      }
    }

    stage('Setup hummingbot environment') {
      steps {
        echo 'Running build...'

        // Clean-up environment
        sh ". ${path}/bin/deactivate"
        sh './uninstall'
        sh "rm -rf ${envPath}"

        // Install hummingbot
        sh './install'
        sh ". ${path}/bin/activate hummingbot"
      }

      post {
        success {
          echo "=> [Setup environment]: SUCCESS"
        }
        failure {
          script {
            ERROR_MESSAGE = '\n => Failed: setup environment'
          }
        }
      }
    }

    stage('Compile hummingbot') {
      steps {
        echo 'Compile hummingbot...'

        // ./compile
        sh "${envPath}/bin/python setup.py build_ext --inplace"
      }

      post {
        success {
          echo "=> [Build hummingbot]: SUCCESS"
        }
        failure {
          script {
            ERROR_MESSAGE = '\n => Failed: compile hummingbot'
          }
        }
      }
    }

    stage('Run tests') {

      parallel {
        stage('Run stable tests') {
          steps {
            echo 'Run stable tests'

            // make test
            sh "${envPath}/bin/nosetests -d -v test/test*.py"
          }
          post {
            success {
              echo '=> [Run tests: stable tests]: SUCCESS'
            }
            unstable {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Unstable: stable tests'
              }
            }
            failure {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Failed: stable tests'
              }
            }
          }
        }

        stage('Run arbitrage strategy test') {
          steps {
            echo 'Run arbitrage test'
            sh "${envPath}/bin/nosetests -d -v test/test_arbitrage.py"
          }
          post {
            success {
              echo '=> [Run tests: arbitrage]: SUCCESS'
            }
            unstable {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Unstable: arbitrage strategy test'
              }
            }
            failure {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Failed: arbitrage strategy test'
              }
            }
          }
        }

        stage('Run cross_exchange_market_making strategy test') {
          steps {
            echo 'Run cross_exchange_market_making test'
            sh "${envPath}/bin/nosetests -d -v test/test_cross_exchange_market_making.py"
          }
          post {
            success {
              echo '=> [Run tests: cross_exchange_market_making]: SUCCESS'
            }
            unstable {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Unstable: cross_exchange_market_making strategy test'
              }
            }
            failure {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Failed: cross_exchange_market_making strategy test'
              }
            }
          }
        }
        
        stage('Run pure_market_making strategy test') {
          steps {
            echo 'Run pure_market_making strategy test'
            sh "${envPath}/bin/nosetests -d -v -m test/test_pmm*"
          }
          post {
            success {
              echo '=> [Run tests: pure_market_making]: SUCCESS'
            }
            unstable {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Unstable: pure_market_making strategy test'
              }
            }
            failure {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Failed: pure_market_making strategy test'
              }
            }
          }
        }

        stage('Run config_template test') {
          steps {
            echo 'Run config_template test'
            sh "${envPath}/bin/nosetests -d -v test/test_config_templates.py"
          }
          post {
            success {
              echo '=> [Run tests: config_template]: SUCCESS'
            }
            unstable {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Unstable: config_template test'
              }
            }
            failure {
              script {
                ERROR_MESSAGE = ERROR_MESSAGE + '\n => Failed: config_template test'
              }
            }
          }
        }

      } // End parallel
    }

  }

  // Run after all stages
  post {
    always {
      deleteDir()
    }
    success {
      notifyDiscord('SUCCESS', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
    failure {
      notifyDiscord('FAILURE', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
    unstable {
      notifyDiscord('FAILURE', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
  }

}

// Define helper methods

void notifyDiscord(String buildStatus = 'STARTED', String commitMessage, String errorMessage) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  
  // Default values
  def result = 'FAILURE'

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    buildStatus = "Initiating test... "
    result = 'UNSTABLE'
  } else if (buildStatus == 'SUCCESS') {
    buildStatus = 'Your tests passed on Jenkins!'
    result = 'SUCCESS'
  } else if (buildStatus == 'FAILURE') {
    buildStatus = 'Uh oh, your tests failed on Jenkins :('
  }

  def footer = commitMessage
  def title = "[${env.JOB_NAME} #${env.BUILD_NUMBER}]"
  def description = "**[${env.GIT_BRANCH}]**: ${buildStatus}${errorMessage}"

  // Send notifications
  discordSend (webhookURL: env.DISCORD_INTEGRATIONS, description: description, result: result, title: title, link: env.BUILD_URL, footer: footer)
}