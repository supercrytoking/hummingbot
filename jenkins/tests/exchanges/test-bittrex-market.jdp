node {
    def testName = "bittrex exchange connector"
    def path = "/root/miniconda/bin"
    def envPath = "/root/miniconda/envs/hummingbot/bin"

    try {
      notifyBuild("STARTED", testName)

      stage("Clone repository") {
        /* Clone repository to jenkins workspace */
        checkout scm
      }

      stage("Build hummingbot") {
        // Clean-up environment
        sh ". ${path}/deactivate"
        sh "./uninstall"

        // Install hummingbot
        sh "./install"
        sh ". ${path}/activate hummingbot"

        // ./compile
        sh "${envPath}/python setup.py build_ext --inplace"
      }

      stage("Run tests") {
        sh "${envPath}/nosetests -v test/integration/test_bittrex_market.py"
      }

    } catch (c) {
      // If there was an exception thrown, the tests failed
      sh "echo 'catch: '${c}"

      currentBuild.result = "FAILED"
      throw e
    } finally {
      // Success or failure, always send notifications
      notifyBuild(currentBuild.result, testName)
    }
}

def notifyBuild(String buildStatus = "STARTED", String testName = "not defined") {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def result = "FAILURE"

  // Override default values based on build status
  if (buildStatus == "STARTED") {
    buildStatus = "Initiating ${testName} test... "
    result = "UNSTABLE"
  } else if (buildStatus == "SUCCESSFUL") {
    buildStatus = "TEST PASSED"
    result = "SUCCESS"
  } else if (buildStatus == "FAILED") {
    buildStatus = "TEST FAILED"
  }

  def subject = "${buildStatus}: [${env.JOB_NAME}_${env.BUILD_NUMBER}]"
  def description = "${subject}\n(${env.BUILD_URL})"

  // Send notifications
  discordSend (webhookURL: env.DISCORD_URL, description: description, result: result)
}