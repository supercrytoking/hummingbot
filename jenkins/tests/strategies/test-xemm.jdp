// Jenkins environment variables
def path = '/root/miniconda'
def envPath = "${path}/envs/hummingbot"

// test parameters
def strategy = 'cross_exchange_market_making'
def testName = "${strategy} strategy test"
def testFile = "test_${strategy}.py"

pipeline {
  agent any

  environment {
    GIT_COMMIT_MESSAGE = ''
    ERROR_MESSAGE = ''
  }

  stages {

    stage('Retrieve tooling versions') {
      steps {
        echo 'Retrieving tooling version...'

        sh 'which python'
        sh 'python --version'

        echo 'Base hummingbot version:'
        sh 'cat hummingbot/VERSION'

        // Get commit message
        echo 'Get commit message'
        script {
          GIT_COMMIT_MESSAGE = sh returnStdout: true, script: 'git log -1 --pretty=oneline'
          ERROR_MESSAGE = ''
        }
      }
    }

    stage('Setup hummingbot environment') {
      steps {
        echo 'Running build...'

        // Clean-up environment
        sh ". ${path}/bin/deactivate"
        sh './uninstall'
        sh "rm -rf ${envPath}"

        // Install hummingbot
        sh './install'
        sh ". ${path}/bin/activate hummingbot"
      }

      post {
        success {
          echo "=> [Setup environment]: SUCCESS"
        }
        failure {
          script {
            ERROR_MESSAGE = '\n => Failed: setup environment'
          }
        }
      }
    }

    stage('Compile hummingbot') {
      steps {
        echo 'Compile hummingbot...'

        // ./compile
        sh "${envPath}/bin/python setup.py build_ext --inplace"
      }

      post {
        success {
          echo "=> [Build hummingbot]: SUCCESS"
        }
        failure {
          script {
            ERROR_MESSAGE = '\n => Failed: compile hummingbot'
          }
        }
      }
    }

    stage('Run strategy test') {
      steps {
        echo "Run ${testName}"
        sh "${envPath}/bin/nosetests -d -v test/${testFile}"
      }
      post {
        success {
          echo "=> [Run tests: ${testName}]: SUCCESS"
        }
        unstable {
          script {
            ERROR_MESSAGE = ERROR_MESSAGE + "\n => Unstable: ${testName}"
          }
        }
        failure {
          script {
            ERROR_MESSAGE = ERROR_MESSAGE + "\n => Failed: ${testName}"
          }
        }
      }
    }

  }

  // Run after all stages
  post {
    always {
      deleteDir()
    }
    success {
      notifyDiscord('SUCCESS', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
    failure {
      notifyDiscord('FAILURE', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
    unstable {
      notifyDiscord('FAILURE', GIT_COMMIT_MESSAGE, ERROR_MESSAGE)
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'5'))
    timeout(time: 60, unit: 'MINUTES')
  }

}

// Define helper methods

void notifyDiscord(String buildStatus = 'STARTED', String commitMessage, String errorMessage) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  
  // Default values
  def result = 'FAILURE'

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    buildStatus = "Initiating test... "
    result = 'UNSTABLE'
  } else if (buildStatus == 'SUCCESS') {
    buildStatus = 'Your tests passed on Jenkins!'
    result = 'SUCCESS'
  } else if (buildStatus == 'FAILURE') {
    buildStatus = 'Uh oh, your tests failed on Jenkins :('
  }

  def footer = commitMessage
  def title = "[${env.JOB_NAME} #${env.BUILD_NUMBER}]"
  def description = "*[${env.GIT_BRANCH}]*: ${buildStatus}${errorMessage}"

  // Send notifications
  discordSend (webhookURL: env.DISCORD_URL, description: description, result: result, title: title, link: env.BUILD_URL)
}