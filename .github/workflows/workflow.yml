name: ci

on:
  push:
    branches: [master, development, 'refactor/unit_tests**', 'epic/**']
  pull_request:
    branches: [master, development, 'refactor/unit_tests**', 'epic/**']
    types: [ready_for_review, opened, synchronize, reopened]

jobs:
  check:
    name: Check files
    outputs:
      run_client: ${{ steps.check_files.outputs.run_client }}
      run_gateway: ${{ steps.check_files.outputs.run_gateway }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            if [[ $file = gateway/* ]]; then
              echo "::set-output name=run_gateway::true"
            else
              echo "::set-output name=run_client::true"
            fi
          done < files.txt

  build_hummingbot:
    name: Hummingbot build + stable tests
    needs: check
    if: github.event.pull_request.draft == false && needs.check.outputs.run_client == 'true'
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Use cache's hashFiles function to check for changes in core code
      - name: Check for code changes
        id: program-changes
        uses: actions/cache@v2
        env:
          # Increase this value to manually reset cache if program files have not changed
          CACHE_NUMBER: 0
        with:
          path: README.md # placeholder file
          key: ${{ runner.os }}-build-${{ env.CACHE_NUMBER }}-${{ hashFiles('hummingbot/*', '**/*.py', '**/*.py*', '**/*.pxd', 'test/*') }}

      # Check for setup/environmnet-linux.yml changes
      - name: Cache conda dependencies
        id: conda-dependencies
        uses: actions/cache@v2
        env:
          # Increase this value to manually reset cache if setup/environment-linux.yml has not changed
          CONDA_CACHE_NUMBER: 0
        with:
          path: |
            /home/runner/conda_pkgs_dir/
            /usr/share/miniconda/envs
          key: ${{ runner.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{ hashFiles('setup/environment-linux.yml') }}

      # Install environment and Hummingbot
      - name: Install environment and Hummingbot
        uses: ./.github/actions/install_env_and_hb
        with:
          program-cache-hit: ${{steps.program-changes.outputs.cache-hit}}
          dependencies-cache-hit: ${{steps.conda-dependencies.outputs.cache-hit}}

      # Install gateway
      - name: Install Gateway Dependencies
        run: yarn --cwd ./gateway install

      # Compile and run tests if code has changed
      - name: Run pre-commit hooks on diff
        shell: bash
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate hummingbot
          pre-commit run --files $(git diff --name-only origin/$GITHUB_BASE_REF)

      - name: Run stable tests and calculate coverage
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate hummingbot
          make test

      - name: Check and report global coverage
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate hummingbot
          make report_coverage

      - name: Validate coverage for the changes
        if: github.event_name == 'pull_request' && (steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true')
        shell: bash
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate hummingbot
          git fetch --all -q
          git checkout -b $GITHUB_SHA
          coverage xml
          diff-cover --compare-branch=origin/$GITHUB_BASE_REF --fail-under=80 coverage.xml

      # Notify results to discord
      - uses: actions/setup-ruby@v1
      - name: Send Webhook Notification
        if: github.event_name != 'pull_request'
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
        shell: bash
  build_gateway:
    name: Gateway build + unit tests
    needs: check
    if: github.event.pull_request.draft == false && needs.check.outputs.run_gateway == 'true'
    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout commit
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn --cwd ./gateway install

      - name: Build project
        run: yarn --cwd ./gateway build

      - name: Create .env file
        run: |
          cat << EOF >> .env
          GENERATE_SOURCEMAP=false
          EOF

      - name: Run unit test
        env:
            INFURA_KEY: ${{ secrets.INFURA_KEY }}
        run: |
          cd gateway
          mkdir conf db
          cp src/templates/* conf
          sed -i'.bak' -e "/nodeAPIKey:/ s/[^ ][^ ]*$/'117bfd0769f54bd2b91f50d2b1c19f9a'/" "./conf/ethereum.yml"
          less ./conf/ethereum.yml
          yarn test:unit 

      - name: Run unit test coverage
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          git fetch --all -q
          git checkout -b $GITHUB_SHA
          yarn --cwd ./gateway test:cov 
          git diff origin/$GITHUB_BASE_REF | $(yarn --cwd ./gateway bin)/diff-test-coverage -c ./gateway/coverage/lcov.info -t lcov -b 65 -l 67
